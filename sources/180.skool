@org=$4000
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h 180 Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FC,$00,$FF,$0F,$FF,$00,$FF,$81,$FF,$C0,$0F,$80,$00,$00,$01,$00,$00,$00,$00,$80,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$00,$3F,$C0,$03,$FF,$00,$07,$FC,$00,$1C,$F8,$00,$03,$07,$81,$E0,$1F,$E0,$FC,$60,$80 ;
 $4060 DEFB $00,$00,$00,$00,$E3,$C7,$87,$08,$00,$0F,$FF,$00,$7F,$00,$FC,$1F,$C3,$F8,$3F,$80,$FC,$FF,$E0,$03,$08,$F0,$FD,$80,$7E,$E0,$04,$F0 ;
 $4080 DEFB $00,$00,$0E,$00,$E0,$6E,$1D,$48,$00,$0F,$FF,$01,$FC,$07,$F0,$7F,$07,$F0,$FE,$00,$00,$FF,$FE,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$04,$03,$D0,$60,$E1,$CF,$E1,$D0,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$7F,$FF,$1F,$FF,$00,$0F,$FF,$C0,$7F,$00,$1F,$C0,$0F,$FE,$00,$3F,$C0,$04,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$03,$F8,$00,$3F,$FE,$00,$00,$00,$00,$00,$3F,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$74,$A4,$CE,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$00,$0C,$00,$00,$04,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$00,$FF,$8F,$FF,$80,$FF,$C3,$FF,$E0,$3F,$80,$00,$00,$E7,$00,$00,$00,$00,$C0,$00 ;
 $4140 DEFB $00,$00,$00,$00,$E0,$00,$07,$78,$00,$7F,$FF,$00,$7F,$C0,$0F,$FF,$C0,$1F,$FF,$00,$3E,$F8,$00,$07,$07,$C1,$F0,$13,$E1,$FC,$30,$80 ;
 $4160 DEFB $00,$00,$00,$00,$EF,$F7,$E7,$78,$00,$7F,$FF,$00,$7F,$00,$7F,$FF,$83,$F8,$3F,$80,$FC,$FF,$80,$01,$18,$70,$FE,$00,$3E,$D8,$04,$E0 ;
 $4180 DEFB $00,$03,$EE,$F8,$E8,$1C,$3B,$48,$00,$07,$FF,$01,$FC,$07,$F0,$7F,$07,$F9,$FE,$03,$80,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$10,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$06,$07,$30,$30,$73,$88,$C3,$30,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$FF,$FF,$3F,$FC,$00,$07,$FF,$80,$3E,$00,$07,$80,$07,$FC,$00,$07,$E0,$06,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$0F,$F0,$00,$3F,$FC,$00,$00,$00,$00,$FF,$C0,$00,$00,$07,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$01,$44,$9D,$29,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C0,$00,$00,$00,$0F,$00,$00,$0C,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$03,$CF,$1C,$F3,$67,$3D,$E0,$00,$00,$07,$FF,$C0,$FF,$CF,$FF,$C1,$FF,$C3,$FF,$F0,$FF,$00,$00,$00,$FF,$00,$03,$00,$00,$E0,$00 ;
 $4240 DEFB $00,$03,$CC,$C1,$E0,$00,$0F,$40,$00,$1F,$FF,$00,$FF,$C0,$3F,$FF,$C0,$3F,$FF,$00,$7F,$F0,$00,$1F,$07,$E3,$F0,$33,$F1,$FC,$18,$00 ;
 $4260 DEFB $00,$00,$00,$00,$EF,$FB,$F7,$08,$01,$FF,$FF,$00,$7F,$00,$7F,$FF,$83,$F8,$3F,$80,$F8,$FF,$00,$01,$10,$20,$7E,$00,$3F,$58,$0C,$C0 ;
 $4280 DEFB $00,$00,$6E,$C0,$EC,$3C,$7B,$48,$00,$03,$FF,$01,$FC,$07,$FF,$FF,$07,$FF,$FC,$07,$E0,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$78,$00,$FF,$FE,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$04,$06,$00,$70,$73,$82,$C3,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$F8,$00,$07,$FE,$00,$3E,$00,$01,$00,$01,$FC,$00,$00,$F0,$04,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$1F,$C0,$00,$1F,$F8,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$01,$FC,$00,$00,$00,$00,$00,$00,$00,$01,$74,$85,$29,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F0,$00,$00,$40,$0F,$80,$00,$0E,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$03,$6D,$B6,$DB,$6D,$B1,$B0,$00,$00,$07,$FF,$F1,$FF,$EF,$FF,$F3,$FF,$E7,$FF,$F3,$FF,$00,$00,$00,$FF,$00,$03,$00,$00,$F0,$00 ;
 $4340 DEFB $00,$03,$6C,$DB,$E0,$00,$1F,$40,$00,$07,$FF,$01,$FF,$C0,$7F,$FF,$E0,$7F,$FF,$80,$7F,$F0,$0F,$3F,$07,$F3,$F0,$21,$F1,$F8,$08,$00 ;
 $4360 DEFB $00,$00,$00,$00,$EC,$3C,$7B,$08,$00,$FF,$FF,$00,$7F,$00,$3F,$FF,$03,$F8,$3F,$00,$F8,$FE,$00,$01,$10,$00,$7F,$00,$1C,$E0,$08,$C0 ;
 $4380 DEFB $00,$00,$6E,$C0,$EF,$FB,$F7,$30,$00,$01,$FF,$01,$FC,$07,$FF,$FE,$07,$FF,$FC,$07,$E0,$FF,$FE,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$30 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$F8,$00,$FF,$FC,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$06,$06,$00,$58,$7D,$83,$C1,$E0,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$07,$FD,$FF,$FF,$F0,$00,$03,$FC,$00,$1C,$00,$00,$00,$00,$FC,$00,$00,$30,$06,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$3F,$00,$00,$0F,$E0,$00,$80,$1F,$80,$00,$7F,$FF,$FF,$F8,$00,$03,$F0,$00,$00,$00,$00,$00,$00,$01,$05,$D8,$C6,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FC,$00,$00,$60,$0F,$C0,$00,$1E,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00 ;
 $4420 DEFB $00,$03,$6D,$B6,$DB,$6C,$3D,$B0,$00,$00,$3F,$FF,$FD,$FF,$FF,$FF,$FB,$FF,$EF,$FF,$FF,$FE,$00,$01,$00,$FF,$00,$07,$80,$00,$FC,$00 ;
 $4440 DEFB $00,$03,$C7,$9B,$E0,$00,$1F,$40,$00,$01,$FF,$03,$FF,$80,$7F,$FF,$E0,$FF,$FF,$80,$7F,$E3,$FE,$0F,$0F,$FF,$F8,$61,$F9,$F8,$0C,$80 ;
 $4460 DEFB $00,$00,$00,$00,$E8,$1C,$3B,$08,$00,$7F,$FF,$00,$FE,$00,$FF,$FC,$03,$F0,$7F,$00,$F0,$FC,$00,$00,$10,$00,$3F,$30,$03,$E0,$18,$80 ;
 $4480 DEFB $00,$00,$6E,$C0,$EF,$F7,$E7,$00,$00,$03,$FF,$03,$F8,$07,$FF,$FE,$07,$FF,$F8,$0F,$F0,$FF,$F8,$01,$FC,$0F,$E3,$FF,$FF,$0F,$F0,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$01,$FC,$01,$FF,$F0,$7F,$FF,$FF,$FF,$DF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$04,$06,$78,$98,$5D,$82,$C0,$F0,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$1F,$F1,$FF,$FF,$E0,$00,$01,$F0,$00,$1C,$00,$00,$00,$00,$3C,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$FE,$00,$00,$0F,$C0,$10,$01,$E0,$01,$FF,$E7,$E7,$F3,$FF,$FF,$00,$0F,$00,$04,$00,$00,$00,$00,$00,$F8,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$00,$70,$0F,$F0,$00,$3F,$00,$7F,$00,$00,$00,$00,$40,$00,$40,$78,$08,$02,$00,$00 ;
 $4520 DEFB $00,$03,$CF,$36,$DB,$6C,$31,$B0,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$01,$00,$FF,$C0,$07,$80,$00,$FF,$00 ;
 $4540 DEFB $00,$03,$63,$03,$E0,$00,$1F,$40,$00,$00,$7F,$07,$FF,$80,$FF,$FF,$E0,$FF,$FF,$80,$FE,$FF,$FC,$07,$0F,$FD,$F8,$40,$FB,$F8,$04,$80 ;
 $4560 DEFB $00,$00,$00,$00,$E0,$6E,$1D,$00,$00,$3F,$FF,$00,$FE,$01,$FF,$FE,$07,$F0,$7F,$00,$F0,$FC,$00,$00,$10,$00,$38,$30,$07,$E0,$33,$80 ;
 $4580 DEFB $00,$03,$EE,$F8,$E3,$C7,$87,$40,$00,$07,$FF,$03,$F8,$03,$FF,$FC,$03,$FF,$F0,$07,$E0,$FF,$F0,$01,$E0,$03,$C0,$FC,$3C,$03,$C0,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$07,$FC,$03,$FF,$E0,$3F,$FF,$FE,$FF,$C7,$FF,$FD,$FF,$FE,$3F,$FF,$00,$06,$06,$30,$FC,$49,$80,$C0,$18,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$3F,$C0,$FF,$FF,$C0,$00,$01,$E0,$00,$08,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$01,$F8,$00,$00,$07,$80,$00,$3E,$00,$FF,$FF,$DE,$78,$0F,$FB,$FF,$FE,$00,$F8,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$C0,$00,$F8,$0F,$F8,$00,$3F,$00,$7F,$80,$00,$C0,$00,$60,$00,$60,$FE,$3C,$06,$00,$00 ;
 $4620 DEFB $00,$03,$0D,$B6,$DB,$6D,$B1,$B0,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$01,$02,$FF,$C0,$0F,$C0,$FC,$FF,$E0 ;
 $4640 DEFB $00,$03,$63,$18,$E0,$00,$07,$48,$00,$00,$3F,$07,$FF,$80,$FE,$0F,$E1,$FE,$7F,$80,$FE,$FF,$F8,$07,$0B,$F9,$FC,$C0,$FD,$F8,$04,$C0 ;
 $4660 DEFB $00,$00,$00,$00,$E0,$6E,$1D,$78,$00,$1F,$FF,$00,$FE,$01,$FF,$FE,$07,$F0,$7F,$00,$E0,$FF,$80,$00,$00,$00,$00,$00,$00,$F9,$E3,$80 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$03,$F8,$03,$FF,$F0,$03,$FF,$E0,$07,$E0,$FF,$E0,$01,$00,$00,$80,$F0,$08,$01,$80,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$0F,$FE,$07,$FF,$C0,$3F,$FF,$F8,$FF,$81,$FF,$F8,$7F,$FE,$07,$FF,$80,$04,$07,$31,$0C,$49,$88,$C3,$18,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$7F,$80,$FF,$FF,$80,$00,$00,$80,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$98,$C6,$00 ;
 $46E0 DEFB $00,$00,$00,$03,$E0,$00,$00,$07,$00,$13,$C0,$DF,$FF,$00,$38,$1C,$1C,$1C,$01,$FF,$F9,$07,$84,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F0,$00,$FC,$0F,$FC,$00,$7F,$80,$FF,$80,$03,$C0,$00,$78,$00,$FB,$FF,$FF,$1F,$00,$00 ;
 $4720 DEFB $00,$03,$0D,$9C,$F1,$C7,$3D,$E0,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$03,$03,$FF,$E0,$0F,$C0,$FF,$FF,$C0 ;
 $4740 DEFB $00,$03,$C3,$18,$E0,$00,$07,$08,$00,$01,$FF,$07,$FF,$80,$FE,$0F,$E1,$FC,$3F,$80,$FE,$FF,$F0,$03,$09,$F9,$FC,$FF,$FD,$F0,$04,$E0 ;
 $4760 DEFB $00,$03,$FF,$F8,$E0,$6E,$1D,$48,$00,$1F,$FF,$00,$FE,$03,$F8,$3F,$07,$F0,$7F,$00,$E0,$FF,$F0,$00,$00,$00,$00,$00,$00,$0F,$00,$C0 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$03,$F8,$00,$FF,$C0,$00,$FF,$80,$01,$C0,$FF,$C0,$06,$00,$00,$00,$40,$00,$01,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$3F,$FE,$0F,$FF,$80,$1F,$FF,$F0,$7F,$80,$7F,$F0,$3F,$FE,$01,$FF,$80,$06,$03,$F1,$9E,$E3,$CF,$E2,$F0,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$01,$FE,$00,$7F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$A5,$28,$00 ;
 $47E0 DEFB $00,$00,$00,$0F,$C0,$00,$00,$02,$00,$1C,$02,$DF,$80,$00,$30,$0C,$38,$0E,$00,$03,$FD,$80,$70,$08,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$1F,$00,$00,$00,$40,$40,$E0,$3E,$E0,$00,$00,$60,$06,$30,$06,$00,$00,$0B,$BC,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$E0,$00,$80,$24,$B8,$3B,$FC,$00,$00,$00,$00,$00,$3F,$80,$60,$03,$00,$00,$00,$00,$00,$46,$F8,$3A,$48,$00,$08,$80,$00,$00 ;
 $4840 DEFB $40,$02,$04,$08,$91,$D0,$00,$06,$7E,$78,$00,$00,$00,$00,$7F,$FC,$0F,$F8,$00,$00,$00,$00,$00,$38,$00,$00,$6E,$1A,$40,$90,$40,$00 ;
 $4860 DEFB $52,$10,$06,$1C,$00,$00,$00,$00,$00,$0C,$00,$00,$08,$00,$1F,$FF,$FF,$F0,$00,$10,$00,$00,$00,$C0,$00,$00,$00,$0F,$B0,$92,$49,$42 ;
 $4880 DEFB $F2,$50,$EC,$01,$80,$00,$00,$00,$00,$0E,$1F,$6F,$F2,$3F,$E0,$00,$00,$0F,$F8,$5F,$FF,$F0,$E0,$00,$00,$00,$00,$1C,$03,$FE,$3B,$E7 ;
 $48A0 DEFB $63,$CE,$00,$38,$00,$00,$04,$67,$FF,$1C,$55,$55,$55,$7F,$FF,$FF,$FF,$FF,$C6,$AA,$AA,$AA,$71,$FF,$CC,$40,$03,$83,$87,$9C,$03,$9A ;
 $48C0 DEFB $00,$00,$18,$0F,$00,$1A,$AA,$65,$55,$55,$55,$55,$54,$BF,$FF,$FD,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$8C,$AA,$B0,$01,$E1,$E0,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$AA,$89,$FF,$F5,$55,$55,$55,$55,$55,$2F,$FF,$FF,$FF,$FF,$F4,$AA,$AA,$AA,$AA,$AA,$59,$BF,$22,$AA,$00,$00,$00,$00 ;
 $4900 DEFB $00,$00,$00,$7E,$00,$00,$00,$00,$07,$03,$FE,$60,$00,$00,$60,$06,$30,$06,$00,$00,$03,$7F,$C1,$E0,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$03,$80,$00,$10,$04,$C1,$EF,$E0,$00,$00,$00,$00,$00,$38,$00,$60,$03,$00,$00,$00,$00,$00,$06,$1F,$06,$48,$02,$40,$00,$08,$00 ;
 $4940 DEFB $00,$40,$20,$80,$E2,$E0,$00,$07,$F0,$1C,$00,$00,$00,$00,$3F,$FC,$03,$E0,$00,$00,$00,$00,$00,$30,$00,$00,$E7,$86,$48,$82,$09,$42 ;
 $4960 DEFB $10,$52,$2C,$78,$00,$00,$00,$00,$00,$3C,$00,$00,$04,$3F,$E0,$00,$00,$0F,$F8,$20,$00,$00,$01,$C0,$00,$00,$00,$00,$DC,$72,$49,$0A ;
 $4980 DEFB $57,$63,$CC,$01,$80,$00,$00,$00,$00,$31,$FF,$7E,$0F,$C0,$1F,$FF,$FF,$F0,$07,$E0,$FF,$FF,$18,$00,$00,$00,$00,$18,$07,$0F,$99,$4A ;
 $49A0 DEFB $86,$C7,$00,$30,$03,$00,$05,$9F,$FC,$E2,$AA,$AA,$A9,$7F,$FF,$FF,$FF,$FF,$F6,$95,$55,$55,$0E,$6F,$F3,$40,$03,$03,$01,$F8,$01,$CF ;
 $49C0 DEFB $00,$00,$1C,$06,$00,$65,$51,$CA,$AA,$AA,$AA,$AA,$AA,$5F,$FF,$BF,$FF,$FF,$FA,$55,$55,$55,$55,$55,$57,$15,$4C,$00,$FF,$C0,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$03,$55,$37,$FF,$F4,$AA,$AA,$AA,$AA,$AA,$AF,$7F,$FF,$FF,$FF,$F5,$55,$55,$55,$55,$55,$5E,$BF,$D9,$55,$80,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$00,$F8,$00,$00,$08,$00,$38,$1F,$E0,$60,$00,$00,$00,$06,$60,$03,$00,$00,$07,$07,$F8,$18,$04,$40,$00,$10,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$07,$00,$08,$12,$23,$07,$DF,$00,$00,$00,$00,$00,$00,$70,$00,$60,$03,$00,$00,$00,$00,$00,$0E,$07,$C1,$C8,$00,$08,$82,$00,$00 ;
 $4A40 DEFB $42,$10,$04,$89,$87,$70,$00,$03,$C0,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$41,$E3,$48,$90,$40,$00 ;
 $4A60 DEFB $00,$52,$30,$E0,$00,$00,$00,$00,$38,$F8,$00,$00,$1F,$C0,$15,$55,$55,$50,$07,$F0,$00,$00,$01,$80,$00,$00,$00,$00,$CE,$12,$40,$4A ;
 $4A80 DEFB $52,$C7,$98,$01,$80,$00,$00,$00,$01,$CF,$FF,$A1,$F2,$3B,$FF,$FF,$FF,$FF,$D8,$5F,$0F,$FF,$E7,$00,$00,$00,$00,$38,$0E,$06,$C9,$4A ;
 $4AA0 DEFB $0E,$C3,$00,$60,$07,$00,$06,$7F,$E3,$15,$55,$55,$55,$77,$FF,$FF,$FF,$FF,$F5,$2A,$AA,$AA,$A1,$8F,$DC,$C0,$00,$07,$00,$60,$00,$B6 ;
 $4AC0 DEFB $00,$00,$0E,$00,$00,$8A,$A6,$25,$55,$55,$55,$55,$55,$5F,$FF,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$A8,$CA,$A2,$00,$3F,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$04,$AA,$4F,$FF,$FA,$55,$55,$55,$55,$55,$27,$FF,$FF,$FF,$FF,$F4,$AA,$AA,$AA,$AA,$AA,$BF,$7F,$E4,$AA,$40,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$01,$E0,$00,$00,$00,$41,$C0,$FE,$00,$00,$00,$00,$00,$06,$60,$03,$00,$00,$02,$00,$7F,$07,$04,$02,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$1C,$00,$00,$80,$0C,$3E,$18,$00,$00,$00,$00,$00,$00,$60,$00,$30,$06,$00,$00,$00,$00,$00,$0C,$00,$F8,$78,$92,$08,$10,$00,$00 ;
 $4B40 DEFB $10,$02,$04,$0A,$1E,$30,$00,$03,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$70,$00,$00,$00,$78,$C8,$92,$48,$48 ;
 $4B60 DEFB $42,$02,$23,$80,$00,$00,$00,$00,$3F,$E0,$00,$03,$E4,$2A,$AA,$AA,$AA,$AA,$A8,$2F,$80,$00,$00,$80,$00,$00,$00,$01,$C7,$8A,$49,$42 ;
 $4B80 DEFB $E7,$0F,$18,$03,$80,$00,$00,$00,$0E,$3E,$FE,$1E,$0A,$F7,$FF,$FF,$FF,$FF,$DF,$40,$F0,$FF,$F8,$E0,$00,$00,$00,$70,$0C,$03,$67,$EF ;
 $4BA0 DEFB $3C,$63,$80,$60,$1E,$00,$1A,$FF,$9C,$AA,$AA,$AA,$AA,$BF,$FF,$FF,$FF,$FD,$F9,$55,$55,$55,$54,$73,$FE,$B0,$00,$06,$00,$70,$00,$71 ;
 $4BC0 DEFB $00,$00,$07,$00,$03,$55,$49,$AA,$AA,$AA,$AA,$AA,$AA,$5F,$FF,$FF,$FF,$FF,$FA,$55,$55,$55,$55,$55,$4B,$25,$55,$80,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$09,$55,$BF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$AB,$BF,$FF,$FF,$FF,$F5,$55,$55,$55,$55,$54,$BF,$FF,$FB,$55,$20,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$07,$C0,$00,$04,$00,$4E,$07,$30,$00,$00,$00,$00,$00,$06,$60,$03,$00,$00,$00,$00,$07,$E0,$E0,$40,$08,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$30,$00,$88,$02,$30,$F8,$1C,$00,$00,$00,$00,$00,$00,$60,$00,$30,$06,$00,$00,$00,$00,$00,$0C,$00,$3E,$18,$92,$00,$80,$00,$00 ;
 $4C40 DEFB $00,$50,$24,$8C,$78,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$00,$00,$00,$1C,$68,$92,$01,$02 ;
 $4C60 DEFB $52,$52,$C7,$F8,$00,$00,$00,$00,$07,$80,$00,$3C,$15,$55,$55,$55,$55,$55,$55,$20,$78,$00,$00,$00,$00,$00,$00,$03,$81,$C6,$49,$40 ;
 $4C80 DEFB $52,$3C,$1C,$03,$00,$00,$00,$00,$31,$F7,$F1,$E1,$52,$FF,$FF,$FF,$FB,$FF,$DF,$4A,$0F,$1F,$EF,$18,$00,$00,$00,$60,$0C,$03,$71,$4A ;
 $4CA0 DEFB $78,$61,$C0,$60,$38,$00,$21,$7E,$61,$55,$55,$55,$54,$BF,$FF,$FF,$FF,$FF,$FD,$2A,$AA,$AA,$AA,$8C,$FD,$08,$00,$06,$00,$30,$00,$E0 ;
 $4CC0 DEFB $00,$00,$03,$80,$04,$AA,$37,$D5,$55,$55,$55,$55,$55,$5F,$FF,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$AA,$AA,$97,$D8,$AA,$40,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$32,$A2,$7F,$FF,$FD,$55,$55,$55,$55,$55,$2D,$7F,$FF,$FF,$DF,$EA,$AA,$AA,$AA,$AA,$A9,$7F,$7F,$FC,$8A,$98,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$0F,$00,$00,$20,$88,$30,$3E,$C0,$00,$00,$00,$00,$00,$1C,$60,$03,$00,$00,$00,$00,$00,$8C,$18,$40,$40,$10,$08,$00,$00,$00 ;
 $4D20 DEFB $00,$60,$00,$00,$90,$C3,$C0,$0C,$00,$00,$00,$00,$00,$00,$60,$00,$30,$06,$00,$00,$00,$00,$00,$1C,$00,$07,$A6,$92,$48,$80,$48,$40 ;
 $4D40 DEFB $52,$10,$00,$B0,$E0,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$00,$00,$00,$0F,$18,$92,$41,$00 ;
 $4D60 DEFB $57,$7B,$0F,$FE,$00,$00,$00,$00,$00,$00,$03,$C3,$B4,$AA,$AA,$AA,$AA,$AA,$AA,$AF,$87,$80,$00,$00,$00,$00,$00,$03,$00,$E1,$49,$4A ;
 $4D80 DEFB $F4,$70,$0C,$07,$00,$00,$00,$00,$CF,$FF,$0E,$0A,$A9,$7F,$FF,$FF,$FF,$FD,$EE,$95,$50,$E1,$FF,$E6,$00,$10,$00,$E0,$0C,$03,$38,$FF ;
 $4DA0 DEFB $E0,$00,$E0,$70,$70,$00,$D5,$79,$8A,$AA,$AA,$AA,$AA,$BF,$FF,$FF,$FF,$F7,$FD,$55,$55,$55,$55,$53,$3D,$56,$00,$07,$00,$30,$01,$CC ;
 $4DC0 DEFB $00,$00,$01,$80,$09,$54,$CF,$D2,$AA,$AA,$AA,$AA,$AA,$5F,$FF,$FF,$FF,$FF,$FA,$55,$55,$55,$55,$55,$57,$E6,$55,$20,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$45,$4D,$FF,$FF,$FD,$2A,$AA,$AA,$AA,$AA,$96,$FF,$FF,$FF,$FF,$E9,$55,$55,$55,$55,$55,$7F,$FF,$FF,$65,$44,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$3C,$00,$90,$00,$01,$C1,$FF,$E0,$00,$00,$00,$00,$00,$FC,$60,$03,$00,$00,$00,$00,$00,$7F,$07,$42,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $01,$80,$00,$88,$93,$0F,$00,$0C,$03,$C0,$00,$00,$00,$00,$60,$00,$18,$0C,$00,$00,$00,$00,$00,$18,$00,$01,$B1,$90,$40,$00,$00,$00 ;
 $4E40 DEFB $10,$02,$24,$C3,$C0,$00,$00,$00,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$E0,$00,$00,$00,$01,$84,$90,$48,$0A ;
 $4E60 DEFB $00,$12,$3F,$07,$00,$00,$00,$00,$00,$00,$1C,$3F,$B5,$55,$40,$00,$00,$05,$55,$2F,$F8,$70,$00,$00,$00,$00,$00,$07,$00,$38,$DD,$08 ;
 $4E80 DEFB $58,$F8,$00,$0E,$00,$00,$00,$07,$3F,$FC,$F1,$55,$55,$7F,$FF,$FF,$FF,$FE,$6E,$AA,$AA,$1E,$7E,$F9,$C0,$10,$01,$C0,$7C,$07,$1C,$4A ;
 $4EA0 DEFB $C0,$00,$70,$39,$E0,$03,$2A,$A6,$55,$55,$55,$55,$54,$BF,$FF,$FF,$FF,$FF,$DD,$2A,$AA,$AA,$AA,$A8,$CA,$A9,$80,$03,$00,$70,$00,$87 ;
 $4EC0 DEFB $00,$00,$00,$00,$32,$A9,$3F,$E9,$55,$55,$55,$55,$55,$5F,$FF,$FD,$FF,$FF,$F4,$AA,$AA,$AA,$AA,$AA,$AF,$F9,$2A,$98,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$AA,$93,$FF,$FF,$FE,$95,$55,$55,$55,$55,$56,$FF,$FF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$FF,$FF,$FF,$92,$AA,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$78,$00,$00,$20,$86,$0F,$FF,$80,$00,$00,$00,$00,$0F,$F0,$60,$03,$00,$00,$00,$00,$00,$FE,$E0,$C2,$40,$92,$00,$00,$00,$00 ;
 $4F20 DEFB $02,$00,$00,$08,$8D,$BC,$00,$0E,$1F,$F0,$00,$00,$00,$00,$60,$00,$1C,$1C,$00,$00,$00,$00,$00,$18,$00,$00,$70,$72,$08,$12,$08,$08 ;
 $4F40 DEFB $02,$42,$25,$8F,$00,$00,$00,$00,$00,$0E,$00,$00,$08,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$C0,$00,$00,$00,$07,$E3,$92,$48,$08 ;
 $4F60 DEFB $12,$5C,$76,$03,$80,$00,$00,$00,$00,$01,$E3,$FF,$CA,$80,$1F,$FF,$FF,$F0,$02,$5F,$FF,$8F,$00,$00,$00,$00,$00,$0E,$01,$FC,$49,$4A ;
 $4F80 DEFB $F1,$FC,$00,$1C,$00,$00,$08,$18,$FE,$E3,$0A,$AA,$A9,$7F,$7F,$FF,$FF,$FF,$B6,$95,$55,$41,$8F,$EE,$30,$20,$01,$81,$FE,$06,$0F,$3F ;
 $4FA0 DEFB $80,$00,$38,$1F,$80,$04,$54,$98,$AA,$AA,$AA,$AA,$AA,$BF,$FF,$EF,$FF,$FF,$E5,$55,$55,$55,$55,$55,$32,$54,$40,$03,$80,$60,$00,$03 ;
 $4FC0 DEFB $00,$00,$00,$00,$45,$56,$FF,$EA,$AA,$AA,$AA,$AA,$AA,$AF,$FF,$FF,$FF,$FF,$F5,$55,$55,$55,$55,$55,$27,$FE,$D5,$44,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$01,$55,$2F,$FF,$FF,$FE,$AA,$AA,$AA,$AA,$AA,$91,$FF,$FF,$FF,$FF,$E9,$55,$55,$55,$55,$52,$FF,$EF,$FF,$E9,$55,$00,$00,$00 ;
 $5000 DEFB $00,$00,$02,$AA,$5F,$FF,$FF,$FF,$55,$55,$55,$55,$55,$56,$FB,$FF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$A5,$FF,$FF,$FF,$F4,$AA,$80,$00,$00 ;
 $5020 DEFB $00,$02,$A8,$BF,$FF,$7F,$FF,$FF,$F5,$55,$55,$55,$55,$0B,$FC,$00,$00,$3F,$E0,$AA,$AA,$AA,$AA,$5F,$FF,$FF,$FF,$FF,$FA,$2A,$80,$00 ;
 $5040 DEFB $02,$FE,$A8,$BF,$FF,$FF,$FF,$FF,$CF,$55,$19,$FF,$FF,$C0,$E8,$03,$00,$17,$03,$FF,$FF,$30,$A5,$FF,$FF,$FF,$FF,$FF,$FA,$2A,$FE,$80 ;
 $5060 DEFB $BF,$4A,$AA,$A8,$BF,$FF,$FF,$FF,$C8,$AA,$CE,$15,$52,$FD,$7F,$E8,$5F,$DE,$BF,$4A,$A8,$E6,$AA,$27,$9F,$FF,$FF,$FA,$2A,$AA,$A5,$FA ;
 $5080 DEFB $D2,$AA,$AA,$AA,$A8,$BF,$FF,$4A,$AB,$7F,$AF,$55,$00,$95,$4F,$DF,$AF,$FA,$A9,$01,$FF,$EB,$FD,$AA,$A5,$F9,$7A,$2A,$AA,$AA,$AA,$97 ;
 $50A0 DEFB $AA,$AA,$AA,$AA,$AA,$A8,$AA,$AB,$FF,$FF,$F9,$E2,$FF,$D5,$2E,$E3,$1D,$F4,$AB,$FF,$C5,$5F,$FF,$FF,$AA,$AA,$2A,$AA,$AA,$AA,$AA,$AA ;
 $50C0 DEFB $AA,$AA,$AA,$AA,$AA,$5F,$D0,$BF,$AF,$FF,$FF,$93,$FF,$94,$FF,$F8,$2F,$FE,$A9,$FF,$C9,$FF,$FF,$FF,$FA,$17,$F4,$AA,$AA,$AA,$AA,$AA ;
 $50E0 DEFB $AA,$AA,$AA,$AA,$97,$F4,$AA,$A8,$BF,$FF,$FF,$FD,$55,$55,$1E,$7C,$F9,$E2,$AA,$AA,$BF,$FF,$FF,$EA,$2A,$AA,$5F,$D2,$AA,$AA,$AA,$AA ;
 $5100 DEFB $00,$00,$05,$55,$BF,$BF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$97,$77,$FF,$FF,$FF,$E9,$55,$55,$55,$55,$4B,$FF,$FF,$FF,$FB,$55,$40,$00,$00 ;
 $5120 DEFB $00,$05,$53,$7F,$FF,$FF,$FF,$FF,$FA,$AA,$AA,$AA,$A8,$7E,$02,$AA,$AA,$80,$3E,$15,$55,$55,$54,$BF,$FF,$FF,$FF,$FF,$FD,$95,$40,$00 ;
 $5140 DEFB $05,$FD,$54,$5F,$FF,$FF,$FF,$FF,$FF,$A8,$E7,$FF,$FC,$3A,$32,$BB,$2B,$CC,$5C,$3F,$FF,$CE,$4B,$FF,$FF,$FF,$FF,$FF,$F4,$55,$7F,$40 ;
 $5160 DEFB $7E,$95,$55,$54,$5F,$FF,$FF,$FF,$B5,$52,$30,$AA,$A5,$FE,$BF,$E7,$9F,$FD,$7F,$A5,$55,$18,$95,$5B,$7F,$FF,$FF,$F4,$55,$55,$52,$FD ;
 $5180 DEFB $A5,$55,$55,$55,$54,$5F,$FC,$95,$44,$FF,$AF,$AA,$01,$2A,$5F,$D8,$4F,$FA,$54,$80,$FF,$EB,$FE,$45,$52,$76,$F4,$55,$55,$55,$55,$4B ;
 $51A0 DEFB $55,$55,$55,$55,$55,$55,$55,$17,$FF,$FF,$EA,$1F,$FF,$CA,$AD,$F3,$3E,$75,$53,$FF,$F0,$3F,$FF,$FF,$D1,$55,$55,$55,$55,$55,$55,$55 ;
 $51C0 DEFB $55,$55,$55,$55,$54,$BF,$A4,$5F,$DF,$FF,$FF,$C9,$FF,$2A,$FF,$F8,$57,$FE,$54,$FF,$93,$FF,$FF,$FF,$F4,$4B,$FA,$55,$55,$55,$55,$55 ;
 $51E0 DEFB $55,$55,$55,$55,$2F,$E9,$55,$54,$5F,$FF,$FB,$FD,$2A,$AA,$A1,$EC,$FE,$15,$55,$55,$7F,$FF,$FF,$F4,$55,$55,$2F,$E9,$55,$55,$55,$55 ;
 $5200 DEFB $00,$00,$0A,$AA,$7F,$FF,$FF,$FF,$A5,$55,$55,$55,$55,$57,$97,$FF,$FF,$FF,$D2,$AA,$AA,$AA,$AA,$AB,$FF,$FF,$FF,$FC,$AA,$A0,$00,$00 ;
 $5220 DEFB $00,$0B,$A4,$FF,$FF,$FF,$FF,$FF,$FA,$55,$55,$55,$07,$85,$55,$55,$55,$55,$21,$E0,$AA,$AA,$AA,$BF,$FF,$FF,$FF,$FF,$FE,$4B,$A0,$00 ;
 $5240 DEFB $0B,$FA,$AA,$2F,$FF,$FF,$FF,$FF,$FF,$23,$1F,$FF,$C3,$C5,$B7,$58,$55,$ED,$A3,$C3,$FF,$F1,$8B,$FF,$FF,$FF,$FF,$EF,$E8,$AA,$BF,$A0 ;
 $5260 DEFB $FD,$2A,$AA,$AA,$2F,$FF,$DF,$7E,$4A,$A9,$C5,$00,$4B,$7E,$BF,$EF,$1F,$FD,$7E,$D2,$00,$A7,$2A,$A4,$FD,$FF,$FF,$E8,$AA,$AA,$A9,$7E ;
 $5280 DEFB $4A,$AA,$AA,$AA,$AA,$2F,$FB,$2A,$9B,$FE,$CE,$D5,$02,$55,$5F,$50,$2F,$FA,$AA,$C0,$FF,$E7,$FF,$B2,$A9,$AE,$E8,$AA,$AA,$AA,$AA,$A5 ;
 $52A0 DEFB $AA,$AA,$AA,$AA,$AA,$AA,$AA,$67,$FF,$FE,$FD,$93,$FF,$D5,$53,$F3,$3F,$AA,$AB,$FF,$C9,$7F,$FF,$FF,$EC,$AA,$AA,$AA,$AA,$AA,$AA,$AA ;
 $52C0 DEFB $AA,$AA,$AA,$AA,$A9,$7F,$AA,$2F,$BF,$FF,$FF,$E8,$FE,$54,$FF,$F8,$2F,$FE,$AA,$7F,$17,$EF,$FE,$F7,$E8,$AB,$FD,$2A,$AA,$AA,$AA,$AA ;
 $52E0 DEFB $AA,$AA,$AA,$AA,$5F,$D2,$AA,$AA,$2F,$FF,$FF,$FE,$95,$55,$55,$FC,$FF,$AA,$AA,$A9,$7F,$FF,$7F,$E8,$AA,$AA,$97,$F4,$AA,$AA,$AA,$AA ;
 $5300 DEFB $00,$00,$15,$55,$BF,$FF,$FF,$FF,$D2,$AA,$AA,$AA,$AA,$AB,$E3,$FF,$FF,$FF,$D5,$55,$55,$55,$55,$57,$FF,$FF,$FF,$FF,$55,$50,$00,$00 ;
 $5320 DEFB $00,$17,$DB,$FF,$FF,$FF,$FF,$FF,$FD,$2A,$AA,$A8,$78,$74,$AA,$AA,$AA,$2A,$AE,$1E,$15,$55,$55,$7F,$FF,$FF,$FF,$FF,$FF,$B7,$D0,$00 ;
 $5340 DEFB $0B,$F5,$55,$17,$FF,$FF,$FF,$FF,$F6,$DC,$FF,$FE,$3C,$09,$D6,$E6,$AF,$EB,$90,$3C,$7F,$FE,$77,$FF,$FF,$FF,$FF,$FF,$D1,$55,$5F,$A0 ;
 $5360 DEFB $FA,$55,$55,$55,$17,$FF,$FF,$FD,$95,$53,$2A,$6A,$1F,$FC,$BF,$DF,$CF,$FD,$3F,$F8,$FE,$51,$95,$53,$7F,$FF,$EF,$D1,$55,$55,$54,$BF ;
 $5380 DEFB $55,$55,$55,$55,$55,$17,$F4,$55,$27,$FF,$C7,$AA,$05,$2A,$5F,$C3,$0F,$FA,$54,$E0,$7F,$D7,$FF,$C9,$54,$4F,$51,$55,$55,$55,$55,$55 ;
 $53A0 DEFB $55,$55,$55,$55,$55,$55,$D4,$9B,$FF,$FF,$FD,$2B,$FF,$CA,$8F,$F3,$1F,$C9,$53,$FF,$D4,$7F,$FF,$FF,$F2,$57,$55,$55,$55,$55,$55,$55 ;
 $53C0 DEFB $55,$55,$55,$55,$52,$FF,$55,$17,$BF,$FF,$FF,$F4,$38,$AA,$FF,$F0,$17,$FE,$55,$1C,$2F,$FF,$FF,$7F,$D1,$55,$FE,$95,$55,$55,$55,$55 ;
 $53E0 DEFB $55,$55,$55,$55,$5F,$A5,$55,$55,$17,$FF,$FE,$FE,$AA,$AA,$A5,$EC,$DF,$55,$55,$52,$FF,$FF,$FF,$D1,$55,$55,$4B,$F5,$55,$55,$55,$55 ;
 $5400 DEFB $00,$08,$2A,$AB,$BF,$FF,$FF,$FF,$D5,$55,$55,$55,$55,$4B,$FB,$FF,$FF,$FF,$D2,$AA,$AA,$AA,$AA,$97,$FF,$FF,$FF,$FF,$AA,$A8,$20,$00 ;
 $5420 DEFB $00,$2F,$DB,$FF,$FF,$FF,$FF,$FE,$FD,$55,$55,$43,$87,$F5,$51,$54,$55,$55,$2F,$E1,$C2,$AA,$A9,$7F,$FF,$FF,$FF,$FF,$FF,$B7,$E8,$00 ;
 $5440 DEFB $17,$EA,$AA,$8B,$FF,$FF,$FF,$FF,$FF,$B3,$FF,$F1,$C1,$16,$CF,$B0,$3D,$F3,$68,$83,$8F,$FF,$9B,$FF,$FF,$DF,$FF,$FF,$A2,$AA,$AF,$D0 ;
 $5460 DEFB $F4,$AA,$AA,$AA,$8B,$FF,$FF,$B2,$2A,$A4,$95,$D5,$43,$F8,$BF,$DF,$AF,$FD,$1F,$C7,$FF,$AA,$4A,$A8,$9F,$FF,$FF,$A2,$AA,$AA,$AA,$5F ;
 $5480 DEFB $AA,$AA,$AA,$AA,$AA,$8B,$EA,$AA,$5F,$FF,$E1,$F4,$0A,$95,$2F,$C3,$0F,$F4,$A9,$F0,$3F,$8F,$FF,$F4,$AA,$AF,$A2,$AA,$AA,$AA,$AA,$AA ;
 $54A0 DEFB $AA,$AA,$AA,$AA,$AA,$AB,$E9,$7D,$DF,$FF,$FE,$57,$FF,$D5,$5F,$F3,$3F,$F2,$AB,$FF,$EA,$FF,$FF,$FF,$FD,$2F,$AA,$AA,$AA,$AA,$AA,$AA ;
 $54C0 DEFB $AA,$AA,$AA,$AA,$A5,$FE,$AA,$8B,$6F,$FF,$FF,$F5,$45,$54,$FF,$EC,$CB,$FE,$AA,$A2,$AF,$FF,$FF,$BB,$A2,$AA,$FF,$4A,$AA,$AA,$AA,$AA ;
 $54E0 DEFB $AA,$AA,$AA,$AA,$BF,$AA,$AA,$AA,$8B,$FF,$FF,$FF,$55,$55,$55,$FC,$DE,$4A,$AA,$AA,$FF,$FF,$FF,$A2,$AA,$AA,$AB,$FA,$AA,$AA,$AA,$AA ;
 $5500 DEFB $00,$04,$55,$57,$C3,$FF,$FF,$FF,$EA,$AA,$AA,$AA,$AA,$AB,$FD,$FF,$FF,$FF,$D5,$55,$55,$55,$55,$2F,$FF,$FF,$FF,$FF,$D5,$54,$40,$00 ;
 $5520 DEFB $00,$5F,$A5,$FF,$FF,$FF,$FF,$FF,$9E,$AA,$AA,$1C,$7F,$FA,$A6,$AB,$2A,$EA,$5F,$FE,$38,$55,$52,$FF,$FF,$FF,$FF,$FF,$FF,$4B,$F4,$00 ;
 $5540 DEFB $2F,$D5,$55,$45,$FF,$FF,$FF,$FF,$FE,$4B,$FF,$CE,$2A,$67,$6F,$E7,$17,$F6,$E6,$54,$73,$FF,$A4,$FF,$FF,$FF,$FF,$FF,$45,$55,$57,$E8 ;
 $5560 DEFB $F5,$55,$55,$55,$45,$FF,$FB,$AD,$55,$1A,$AB,$AA,$A1,$F2,$BF,$DF,$4F,$FD,$4F,$8F,$FF,$D2,$B1,$55,$6F,$FF,$FF,$45,$55,$55,$55,$5F ;
 $5580 DEFB $55,$55,$55,$55,$55,$45,$D5,$55,$BF,$FD,$E2,$38,$15,$2A,$AF,$C3,$0F,$F5,$55,$FC,$1C,$0F,$FD,$FB,$55,$57,$45,$55,$55,$55,$55,$55 ;
 $55A0 DEFB $55,$55,$55,$55,$55,$57,$F6,$FD,$FF,$FF,$FE,$27,$FF,$CA,$BF,$F3,$1F,$F9,$53,$FF,$E4,$FF,$FF,$FF,$FE,$DF,$D5,$55,$55,$55,$55,$55 ;
 $55C0 DEFB $55,$55,$55,$55,$55,$FD,$55,$45,$7F,$FF,$FF,$FA,$AA,$AA,$FF,$EF,$D7,$FE,$55,$55,$5F,$FF,$FF,$B7,$45,$55,$7F,$55,$55,$55,$55,$55 ;
 $55E0 DEFB $55,$55,$55,$55,$7F,$55,$55,$55,$45,$FF,$FF,$FF,$4A,$AA,$A5,$FC,$E9,$55,$55,$55,$FF,$FF,$FF,$45,$55,$55,$55,$FD,$55,$55,$55,$55 ;
 $5600 DEFB $00,$02,$AA,$AF,$DD,$FF,$FF,$FF,$E9,$55,$55,$55,$55,$4B,$F8,$00,$00,$3F,$D2,$AA,$AA,$AA,$AA,$AF,$FF,$FF,$FF,$FF,$EA,$AA,$80,$00 ;
 $5620 DEFB $00,$BF,$42,$FF,$7F,$FF,$FF,$FF,$EE,$95,$51,$E3,$FF,$FA,$4E,$03,$00,$75,$5F,$FF,$C7,$2A,$AA,$FF,$FF,$FF,$FF,$FF,$FE,$A5,$FA,$00 ;
 $5640 DEFB $5F,$AA,$AA,$A2,$FF,$FF,$FF,$FF,$F9,$AB,$FE,$31,$54,$BB,$5F,$68,$5B,$7A,$DD,$2A,$8C,$FF,$AB,$3F,$EF,$FF,$FF,$7E,$8A,$AA,$AB,$F4 ;
 $5660 DEFB $EA,$AA,$AA,$AA,$A2,$FF,$FF,$D2,$AA,$67,$57,$55,$40,$E5,$57,$DF,$AF,$FA,$A7,$07,$FF,$E5,$CC,$AA,$97,$FE,$FA,$8A,$AA,$AA,$AA,$AF ;
 $5680 DEFB $2A,$AA,$AA,$AA,$AA,$A2,$AA,$AA,$7F,$FF,$F7,$E0,$2B,$95,$2D,$C3,$0F,$F4,$A9,$FE,$05,$4F,$EF,$FC,$AA,$AA,$8A,$AA,$AA,$AA,$AA,$A9 ;
 $56A0 DEFB $AA,$AA,$AA,$AA,$AA,$AF,$F6,$FF,$FF,$FF,$FF,$57,$FF,$D5,$7F,$FB,$2F,$FC,$AB,$FF,$EA,$FF,$FF,$FE,$FE,$DF,$EA,$AA,$AA,$AA,$AA,$AA ;
 $56C0 DEFB $AA,$AA,$AA,$AA,$AB,$FA,$AA,$A2,$7F,$FF,$FF,$FA,$55,$54,$FF,$DC,$EB,$FC,$AA,$AA,$5F,$FF,$FF,$AE,$8A,$AA,$BF,$AA,$AA,$AA,$AA,$AA ;
 $56E0 DEFB $AA,$AA,$AA,$A9,$7E,$AA,$AA,$AA,$A2,$FF,$FF,$FF,$A5,$55,$55,$FC,$F7,$4A,$AA,$A5,$FF,$FF,$FE,$8A,$AA,$AA,$AA,$FD,$2A,$AA,$AA,$AA ;
 $5700 DEFB $00,$01,$55,$5F,$EF,$FF,$FF,$FF,$F4,$AA,$AA,$AA,$AA,$A8,$07,$FF,$FF,$C0,$25,$55,$55,$55,$55,$5F,$FF,$FF,$FF,$FF,$F5,$55,$00,$00 ;
 $5720 DEFB $01,$7F,$51,$7F,$FF,$FF,$FF,$FF,$F1,$4A,$A6,$1F,$FF,$FA,$1C,$7B,$2F,$B8,$5F,$FF,$F8,$C5,$55,$FF,$FF,$FF,$FF,$FF,$FD,$15,$FD,$00 ;
 $5740 DEFB $5F,$55,$55,$51,$7F,$FF,$FF,$FF,$F6,$55,$F1,$CA,$A9,$DD,$BF,$A7,$9D,$FD,$BB,$95,$53,$1F,$54,$DF,$EF,$FF,$FF,$FD,$15,$55,$55,$F4 ;
 $5760 DEFB $D5,$55,$55,$55,$51,$7F,$F7,$A5,$54,$9C,$4D,$AA,$80,$CA,$5F,$DE,$CF,$FA,$53,$03,$FF,$E5,$F2,$55,$4B,$FF,$6D,$15,$55,$55,$55,$57 ;
 $5780 DEFB $55,$55,$55,$55,$55,$51,$55,$55,$FF,$FF,$F7,$E1,$5F,$AA,$AF,$23,$13,$F5,$55,$FF,$82,$AF,$F7,$FF,$55,$55,$15,$55,$55,$55,$55,$54 ;
 $57A0 DEFB $55,$55,$55,$55,$55,$2F,$E9,$7F,$6F,$FF,$FF,$2B,$FF,$AA,$7F,$FB,$5F,$FD,$55,$FF,$D4,$FF,$FF,$FF,$FD,$2F,$E9,$55,$55,$55,$55,$55 ;
 $57C0 DEFB $55,$55,$55,$55,$57,$F5,$55,$51,$7F,$FF,$FF,$FA,$AA,$AA,$7F,$BC,$F5,$F9,$55,$54,$BF,$FF,$FF,$DD,$15,$55,$5F,$D5,$55,$55,$55,$55 ;
 $57E0 DEFB $55,$55,$55,$52,$FE,$95,$55,$55,$51,$7F,$FF,$FF,$AA,$AA,$AA,$FF,$B7,$55,$55,$4B,$FF,$FF,$FD,$15,$55,$55,$52,$FE,$95,$55,$55,$55 ; }
 $5800 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$42,$47,$42,$42,$42,$42,$47,$47 ; {Attributes.
 $5820 DEFB $07,$04,$04,$04,$04,$04,$04,$04,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$42,$57,$42,$57,$57,$57,$57,$42,$42 ;
 $5840 DEFB $07,$04,$04,$44,$45,$45,$45,$45,$47,$47,$47,$79,$79,$79,$79,$79,$79,$79,$79,$79,$79,$47,$47,$42,$57,$57,$57,$57,$57,$57,$57,$42 ;
 $5860 DEFB $07,$07,$47,$47,$45,$45,$45,$45,$07,$47,$47,$79,$79,$79,$79,$79,$79,$79,$79,$79,$79,$47,$47,$42,$57,$57,$57,$57,$57,$57,$57,$42 ;
 $5880 DEFB $07,$07,$47,$47,$45,$45,$45,$45,$47,$47,$47,$79,$79,$79,$79,$79,$79,$79,$79,$79,$79,$47,$47,$42,$6A,$6A,$6A,$6A,$6A,$6A,$6A,$42 ;
 $58A0 DEFB $07,$07,$07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$68,$68,$68,$68,$68,$68,$68,$47 ;
 $58C0 DEFB $07,$07,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$07 ;
 $58E0 DEFB $07,$07,$07,$47,$47,$47,$07,$47,$47,$45,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$07,$05,$05,$05,$07,$07,$07,$07 ;
 $5900 DEFB $07,$47,$47,$47,$45,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$07,$07,$07 ;
 $5920 DEFB $47,$47,$47,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;
 $5940 DEFB $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;
 $5960 DEFB $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;
 $5980 DEFB $05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$05 ;
 $59A0 DEFB $05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05,$05 ;
 $59C0 DEFB $05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05,$05,$05,$05,$05 ;
 $59E0 DEFB $05,$05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05 ;
 $5A00 DEFB $05,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$05 ;
 $5A20 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5A40 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5A60 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5A80 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5AA0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5AC0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $5AE0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ; }
 $5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C00 DEFB $FF,$00,$00,$00,$0D,$01,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$00,$00
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$00,$FC,$5F,$00
 $5C40 DEFB $00,$00,$01,$00,$FF,$01,$00,$06
 $5C48 DEFB $38,$00,$00,$2A,$5D,$00,$00,$B6
 $5C50 DEFB $5C,$BB,$5C,$CB,$5C,$2A,$5D,$CA
 $5C58 DEFB $5C,$2B,$5D,$2E,$5D,$29,$5D,$85
 $5C60 DEFB $5D,$30,$5D,$30,$5D,$30,$5D,$2D
 $5C68 DEFB $92,$5C,$00,$02,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$00,$00
 $5C78 DEFB $04,$00,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$00,$40,$E0,$50
 $5C88 DEFB $21,$18,$21,$17,$03,$38,$00,$38
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$FF,$5F,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$52,$00,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$01,$5B,$00,$FD
 $5CD0 DEFB $32,$34,$35,$37,$35,$0E,$00,$00
 $5CD8 DEFB $FF,$5F,$00,$3A,$F4,$32,$33,$37
 $5CE0 DEFB $33,$39,$0E,$00,$00,$BB,$5C,$00
 $5CE8 DEFB $2C,$38,$32,$0E,$00,$00,$52,$00
 $5CF0 DEFB $00,$3A,$F4,$32,$33,$37,$34,$30
 $5CF8 DEFB $0E,$00,$00,$BC,$5C,$00,$2C,$30
 $5D00 DEFB $0E,$00,$00,$00,$00,$00,$3A,$EF
 $5D08 DEFB $22,$22,$AF,$31,$36,$33,$38,$34
 $5D10 DEFB $0E,$00,$00,$00,$40,$00,$3A,$EF
 $5D18 DEFB $22,$22,$AF,$3A,$F9,$C0,$33,$36
 $5D20 DEFB $32,$31,$30,$0E,$00,$00,$72,$8D
 $5D28 DEFB $00,$0D,$80,$EF,$22,$22,$0D,$80
 $5D30 DEFB $00,$00,$72,$8D,$00,$20,$20,$20
 $5D38 DEFB $20,$20,$20,$00,$00,$00,$00,$00
 $5D40 DEFB $00,$03,$31,$38,$30,$20,$20,$20
 $5D48 DEFB $20,$20,$20,$20,$C4,$9F,$00,$60
 $5D50 DEFB $00,$80,$00,$00,$00,$00,$00,$00
 $5D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE0 DEFB $48,$96,$B8,$95,$95,$91,$58,$27
 $5FE8 DEFB $2B,$2D,$65,$33,$00,$00,$ED,$10
 $5FF0 DEFB $0D,$00,$09,$00,$85,$1C,$10,$1C
 $5FF8 DEFB $52,$1B,$76,$1B,$03,$13,$00,$3E

; Graphics: Dart Board
;
; Used by the routine at #R$A7A5.
; #PUSHS #UDGTABLE
; { =h Play Area }
; { #SIM(start=$A7A5,stop=$A7D0)#SCR$02(dart-board) }
; UDGTABLE# #POPS
; #PUSHS #SIM(start=$9195,stop=$919E)
@label=DartBoard
b$6000 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ; {Pixels.
 $6020 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$0F,$F1,$FF,$FF,$FE,$DF,$7F,$FF,$C7,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $6040 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$07,$CF,$FF,$FF,$BF,$FF,$FF,$FF,$FF,$FF,$F7,$FF,$F9,$F0,$00,$00,$00,$00,$00 ;
 $6060 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$3E,$DF,$BF,$FF,$FF,$C3,$C7,$FF,$FF,$F1,$E1,$FF,$FF,$EE,$3B,$BE,$00,$00,$00,$00 ;
 $6080 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$3D,$FF,$F7,$FF,$9F,$83,$1F,$FE,$00,$00,$3F,$FC,$60,$FC,$FF,$FF,$FF,$DE,$00,$00,$00 ;
 $60A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$1E,$FF,$FF,$FC,$FF,$98,$0F,$FF,$FF,$80,$00,$FF,$FF,$F8,$0C,$FF,$9F,$FF,$FF,$BC,$00,$00 ;
 $60C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$03,$DF,$1E,$FC,$81,$A0,$00,$00,$FF,$FF,$C0,$01,$FF,$FF,$80,$00,$02,$C0,$9F,$FC,$FD,$E0,$00 ;
 $60E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$3B,$FF,$FF,$A0,$BF,$FF,$80,$01,$98,$03,$E0,$03,$E0,$0C,$C0,$00,$FF,$FE,$82,$FF,$FF,$EE,$00 ;
 $6100 DEFB $18,$00,$00,$00,$00,$00,$00,$30,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07 ;
 $6120 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$7F,$80,$FF,$FF,$FD,$BF,$BF,$FF,$F8,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $6140 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$1F,$BF,$FF,$FF,$BF,$FF,$FF,$FF,$FF,$FF,$F7,$FF,$F0,$FC,$00,$00,$00,$00,$00 ;
 $6160 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$7D,$DF,$7F,$FF,$FE,$3C,$07,$FF,$FF,$F0,$1E,$3F,$FF,$ED,$C7,$DF,$00,$00,$00,$00 ;
 $6180 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$7B,$FF,$FB,$FE,$7F,$9C,$7F,$FE,$00,$00,$3F,$FF,$1C,$FF,$3F,$FF,$FF,$EF,$00,$00,$00 ;
 $61A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$1D,$1F,$FF,$F9,$FF,$20,$0F,$FF,$FF,$80,$00,$FF,$FF,$F8,$02,$7F,$CF,$FF,$FF,$DC,$00,$00 ;
 $61C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$03,$BF,$FD,$FD,$02,$40,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$01,$20,$5F,$FC,$FE,$E0,$00 ;
 $61E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$7B,$FF,$FF,$41,$3F,$FF,$C0,$02,$78,$1C,$3F,$FE,$1C,$0F,$20,$01,$FF,$FE,$41,$7F,$FF,$EF,$00 ;
 $6200 DEFB $20,$00,$00,$00,$00,$00,$00,$08,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$03 ;
 $6220 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$01,$FE,$4F,$FF,$FF,$F3,$BF,$BF,$FF,$F1,$3F,$C0,$00,$00,$00,$00,$00,$00 ;
 $6240 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$3E,$7F,$FF,$EF,$7F,$FF,$FF,$FF,$FF,$FF,$F7,$FF,$ED,$3E,$00,$00,$00,$00,$00 ;
 $6260 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$F8,$FE,$FF,$FF,$F1,$C0,$07,$FF,$FF,$F0,$01,$C7,$FF,$DB,$F7,$EF,$80,$00,$00,$00 ;
 $6280 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$F7,$FF,$FF,$FC,$FF,$E3,$FF,$FF,$00,$00,$7F,$FF,$E3,$FF,$9F,$FF,$FF,$F7,$80,$00,$00 ;
 $62A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$3C,$E7,$FF,$F3,$FE,$C0,$07,$FF,$FF,$80,$00,$FF,$FF,$F0,$01,$BF,$E7,$FF,$F0,$DE,$00,$00 ;
 $62C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$07,$7F,$FB,$FA,$04,$E0,$00,$00,$7F,$FF,$C0,$01,$FF,$FF,$00,$00,$03,$90,$2F,$F3,$7F,$70,$00 ;
 $62E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$77,$FF,$FE,$41,$7F,$FF,$E0,$0C,$FC,$E3,$E0,$03,$E3,$9F,$98,$03,$FF,$FF,$41,$3F,$FF,$F7,$00 ;
 $6300 DEFB $40,$00,$00,$00,$00,$00,$00,$04,$80,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$01 ;
 $6320 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$07,$F1,$BF,$FF,$FF,$CF,$BF,$BF,$FF,$CD,$C7,$F0,$00,$00,$00,$00,$00,$00 ;
 $6340 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$FD,$FF,$FF,$F0,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$FF,$FD,$DF,$80,$00,$00,$00,$00 ;
 $6360 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$01,$E3,$7D,$FF,$FF,$C6,$00,$07,$FF,$FF,$F0,$00,$31,$FF,$FB,$F7,$F3,$C0,$00,$00,$00 ;
 $6380 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$01,$EF,$FF,$FF,$F3,$FF,$CF,$FF,$FF,$00,$00,$7F,$FF,$F9,$FF,$E7,$FF,$FF,$FB,$C0,$00,$00 ;
 $63A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$79,$F3,$FF,$E7,$F9,$00,$07,$FF,$FF,$80,$00,$FF,$FF,$F0,$00,$4F,$F3,$FF,$EF,$0F,$00,$00 ;
 $63C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$0F,$7F,$FF,$F2,$09,$F0,$00,$00,$7F,$F8,$7F,$FF,$0F,$FF,$00,$00,$07,$C8,$27,$EF,$7F,$78,$00 ;
 $63E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$77,$FF,$FE,$82,$FF,$FF,$F0,$13,$FF,$1F,$F0,$07,$FC,$7F,$E4,$07,$FF,$FF,$A0,$BF,$FF,$F7,$00 ;
 $6400 DEFB $40,$00,$00,$00,$00,$00,$00,$04,$80,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FE,$00,$00,$3F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$01 ;
 $6420 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$1F,$CF,$BF,$FF,$FF,$BF,$DF,$7F,$FF,$FD,$F9,$FC,$00,$00,$00,$00,$00,$00 ;
 $6440 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$01,$F3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB,$C7,$C0,$00,$00,$00,$00 ;
 $6460 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$03,$DB,$BD,$FB,$FF,$38,$00,$3F,$00,$00,$7E,$00,$0E,$7F,$FB,$F7,$FD,$E0,$00,$00,$00 ;
 $6480 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$01,$EF,$FF,$FF,$E7,$FF,$3F,$FF,$FF,$00,$00,$7F,$FF,$FE,$7F,$F3,$FF,$FF,$FB,$C0,$00,$00 ;
 $64A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$75,$F5,$FF,$CF,$F2,$00,$03,$FF,$FF,$80,$00,$FF,$FF,$E0,$00,$27,$F9,$FF,$EF,$E7,$00,$00 ;
 $64C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$0E,$FF,$FF,$E4,$13,$F8,$00,$00,$3F,$C7,$FF,$FF,$F1,$FE,$00,$00,$0F,$E4,$13,$FF,$FF,$B8,$00 ;
 $64E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$EF,$FF,$FD,$04,$FF,$FF,$F8,$27,$FE,$7F,$F0,$07,$FF,$3F,$F2,$0F,$FF,$FF,$90,$5F,$FF,$FB,$80 ;
 $6500 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$01,$E3,$F1,$C0,$7F,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6520 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$3F,$3F,$D8,$FF,$FF,$BF,$DF,$7F,$FF,$FB,$FE,$7E,$00,$00,$00,$00,$00,$00 ;
 $6540 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$03,$E0,$FF,$FF,$FF,$FF,$FF,$00,$00,$7F,$FF,$FF,$FF,$FB,$B3,$E0,$00,$00,$00,$00 ;
 $6560 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$07,$BB,$DD,$E7,$FC,$C0,$03,$C2,$FF,$FF,$A1,$E0,$01,$9F,$FD,$EF,$FE,$F0,$00,$00,$00 ;
 $6580 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$03,$DF,$FF,$FF,$CF,$FC,$FF,$FF,$FF,$00,$00,$7F,$FF,$FF,$9F,$F9,$FF,$FF,$FD,$E0,$00,$00 ;
 $65A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$F5,$F5,$FF,$97,$E4,$00,$03,$FF,$FF,$80,$00,$FF,$FF,$E0,$00,$13,$F4,$FF,$F7,$E7,$80,$00 ;
 $65C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$1E,$FF,$FF,$E8,$27,$FC,$00,$00,$3E,$38,$3F,$FE,$0E,$3E,$00,$00,$1F,$F2,$0B,$FF,$FF,$BC,$00 ;
 $65E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$EF,$FF,$FD,$05,$FF,$FF,$FC,$4F,$F3,$FF,$F0,$07,$FF,$E7,$F9,$1F,$FF,$FF,$D0,$5F,$FF,$FB,$80 ;
 $6600 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$E0,$FF,$DD,$EE,$FF,$83,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6620 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$FC,$FF,$E7,$7F,$FF,$BF,$EE,$FF,$FF,$FB,$FF,$9F,$80,$00,$00,$00,$00,$00 ;
 $6640 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$07,$8F,$7F,$FF,$FF,$FF,$C0,$FF,$FF,$81,$FF,$FF,$FF,$F7,$78,$F0,$00,$00,$00,$00 ;
 $6660 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$0F,$7F,$DE,$DF,$F3,$00,$1C,$3F,$00,$00,$7E,$1C,$00,$67,$FE,$1F,$FF,$78,$00,$00,$00 ;
 $6680 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$07,$BF,$FF,$FF,$3F,$F3,$1F,$FF,$FF,$00,$00,$7F,$FF,$FC,$67,$FE,$7F,$FF,$FE,$F0,$00,$00 ;
 $66A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$01,$ED,$F6,$FF,$23,$C8,$00,$01,$FF,$FF,$80,$00,$FF,$FF,$C0,$00,$09,$E2,$7F,$FB,$DB,$C0,$00 ;
 $66C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$1D,$FF,$FF,$D0,$2F,$FE,$00,$00,$19,$C0,$3F,$FE,$01,$CC,$00,$00,$3F,$FA,$05,$FF,$FF,$DC,$00 ;
 $66E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$EF,$FF,$FA,$0B,$FF,$FF,$FE,$9F,$E7,$FF,$F0,$07,$FF,$F3,$FC,$BF,$FF,$FF,$E8,$2F,$FF,$CB,$C0 ;
 $6700 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$03,$FE,$1F,$FF,$BE,$DF,$7F,$FC,$3F,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $6720 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$03,$F3,$FF,$FF,$BF,$FF,$C0,$F1,$FF,$FF,$FB,$FF,$E7,$E0,$00,$00,$00,$00,$00 ;
 $6740 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$1F,$6F,$BF,$FF,$FF,$F8,$3F,$FF,$FF,$FE,$0F,$FF,$FF,$F7,$7B,$7C,$00,$00,$00,$00 ;
 $6760 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$1E,$FF,$EF,$3F,$CF,$00,$E3,$FE,$00,$00,$3F,$E3,$80,$79,$FF,$FF,$FF,$BC,$00,$00,$00 ;
 $6780 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$0F,$7F,$FF,$FE,$7F,$E4,$1F,$FF,$FF,$00,$00,$7F,$FF,$FC,$13,$FF,$3F,$FF,$FF,$78,$00,$00 ;
 $67A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$01,$DE,$EE,$FE,$41,$90,$00,$01,$FF,$FF,$C0,$01,$FF,$FF,$C0,$00,$04,$C1,$3F,$FB,$3D,$C0,$00 ;
 $67C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$3D,$FF,$FF,$90,$5F,$FF,$00,$00,$76,$00,$3F,$FE,$00,$37,$00,$00,$7F,$FD,$04,$FF,$FF,$DE,$00 ;
 $67E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$DF,$FF,$FB,$0B,$FF,$FF,$FF,$3F,$99,$FF,$F0,$07,$FF,$CC,$FE,$7F,$FF,$FF,$E8,$6F,$FF,$F5,$C0 ;
 $6800 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$DF,$FF,$F7,$D7,$FF,$FF,$FE,$FF,$20,$FF,$F0,$07,$FF,$82,$7F,$BF,$FF,$FF,$F5,$F7,$FF,$F9,$C0 ;
 $6820 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$FB,$7F,$BF,$20,$00,$FF,$A1,$3F,$80,$0F,$FC,$1F,$F8,$00,$FE,$42,$FF,$80,$02,$7E,$FE,$FB,$38 ;
 $6840 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FE,$FD,$00,$00,$0B,$E4,$FF,$FF,$80,$FE,$3F,$80,$FF,$FF,$93,$E8,$00,$00,$5F,$BF,$FF,$EE ;
 $6860 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FE,$2F,$A0,$00,$00,$FF,$A3,$E2,$FF,$80,$00,$02,$FA,$3F,$FF,$F4,$2F,$FF,$F7 ;
 $6880 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FF,$FE,$87,$F0,$BF,$FF,$FF,$FF,$45,$FF,$FF,$F4,$2F,$7E,$E7 ;
 $68A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FE,$2F,$A0,$00,$00,$FF,$A3,$E2,$FF,$80,$00,$02,$FA,$3F,$FF,$F4,$2F,$FF,$F7 ;
 $68C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FE,$FD,$00,$00,$0B,$E4,$FF,$FF,$80,$FE,$3F,$80,$FF,$FF,$93,$E8,$00,$00,$5F,$BF,$FF,$EE ;
 $68E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$B9,$EF,$BF,$20,$00,$FF,$A1,$3F,$80,$0F,$FC,$1F,$F8,$00,$FE,$42,$FF,$80,$02,$7E,$FE,$FF,$38 ;
 $6900 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$A7,$DF,$F7,$F7,$FF,$FF,$FC,$FE,$40,$FF,$F8,$0F,$FF,$81,$3F,$9F,$FF,$FF,$F7,$F7,$FF,$F2,$E0 ;
 $6920 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$FC,$FF,$BF,$40,$00,$3F,$42,$7F,$C0,$0F,$FC,$1F,$F8,$01,$FF,$21,$7E,$00,$01,$7E,$FE,$F9,$38 ;
 $6940 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FE,$FD,$00,$00,$0B,$E8,$3F,$FF,$C0,$FE,$3F,$81,$FF,$FE,$0B,$E8,$00,$00,$5F,$BF,$FF,$EE ;
 $6960 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FF,$FF,$A0,$00,$00,$3F,$CC,$19,$FE,$00,$00,$02,$FF,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6980 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FF,$FE,$87,$F0,$BF,$FF,$FF,$FF,$45,$FF,$FF,$F4,$2F,$7E,$E7 ;
 $69A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FD,$0B,$FF,$00,$2F,$A0,$00,$03,$FF,$18,$0C,$7F,$E0,$00,$02,$FA,$00,$7F,$E8,$5F,$FF,$F7 ;
 $69C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FE,$FD,$00,$00,$0B,$F7,$FF,$FF,$01,$FE,$3F,$C0,$7F,$FF,$F7,$E8,$00,$00,$5F,$BF,$FF,$DC ;
 $69E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$7D,$EF,$BF,$A0,$03,$FF,$90,$BF,$00,$1F,$F8,$0F,$FC,$00,$7E,$84,$FF,$E0,$02,$FE,$FF,$7F,$38 ;
 $6A00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$99,$DF,$EF,$EF,$FF,$FF,$F9,$39,$80,$7F,$F8,$0F,$FF,$00,$CE,$4F,$FF,$FF,$FB,$FB,$FF,$8E,$E0 ;
 $6A20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$3F,$FF,$7F,$40,$00,$0F,$42,$FF,$E0,$07,$FC,$1F,$F0,$03,$FF,$A1,$78,$00,$01,$7F,$7E,$FA,$38 ;
 $6A40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$E8,$0F,$FF,$E0,$7E,$3F,$03,$FF,$F8,$0B,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6A60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FF,$D7,$E0,$00,$00,$0F,$90,$04,$F8,$00,$00,$03,$F5,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6A80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FF,$F2,$83,$E0,$A7,$FF,$FF,$FF,$45,$FF,$FF,$F4,$2F,$BD,$E7 ;
 $6AA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$0F,$C0,$00,$2F,$A0,$00,$0F,$FE,$1F,$FC,$3F,$F8,$00,$02,$FA,$00,$01,$F8,$5F,$FF,$EE ;
 $6AC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FE,$FD,$00,$00,$05,$FF,$FF,$FE,$01,$FE,$3F,$C0,$3F,$FF,$FF,$D0,$00,$00,$5F,$BF,$FF,$DC ;
 $6AE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$7C,$EF,$DF,$A0,$0F,$FF,$D0,$5E,$00,$1F,$F8,$0F,$FC,$00,$3D,$05,$FF,$F8,$02,$FD,$FF,$9E,$70 ;
 $6B00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$9E,$3F,$EF,$CB,$FF,$FF,$F2,$12,$00,$7F,$F8,$0F,$FF,$00,$24,$27,$FF,$FF,$E9,$FB,$FE,$7C,$E0 ;
 $6B20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1C,$C7,$FF,$7E,$80,$00,$03,$85,$FF,$F0,$07,$FC,$1F,$F0,$07,$FF,$D0,$E0,$00,$00,$BF,$7F,$77,$DC ;
 $6B40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$D0,$03,$FF,$F0,$7E,$3F,$07,$FF,$E0,$05,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6B60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$74,$00,$FA,$17,$FF,$FF,$D1,$7F,$80,$00,$03,$20,$02,$60,$00,$00,$FF,$45,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6B80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$74,$00,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FC,$02,$41,$C1,$20,$1F,$FF,$FF,$45,$FF,$FF,$F4,$2F,$C3,$D7 ;
 $6BA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$2F,$D0,$00,$3F,$FC,$3F,$7E,$1F,$FE,$00,$05,$FA,$00,$00,$2F,$DF,$FF,$EE ;
 $6BC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FE,$7E,$80,$00,$05,$FB,$FF,$FC,$03,$FC,$1F,$E0,$1F,$FF,$EF,$D0,$00,$00,$BF,$3F,$83,$DC ;
 $6BE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$7D,$1F,$DF,$D0,$3F,$FF,$E8,$4C,$00,$3F,$F8,$0F,$FE,$00,$19,$0B,$FF,$FE,$05,$FD,$FF,$E1,$70 ;
 $6C00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$6F,$8F,$CF,$D0,$FF,$FF,$E4,$2C,$00,$3F,$F8,$0F,$FE,$00,$1A,$13,$FF,$FF,$85,$F9,$F9,$FE,$70 ;
 $6C20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$78,$FF,$7E,$80,$00,$02,$C9,$FF,$F8,$03,$FC,$1F,$E0,$0F,$FF,$C9,$A0,$00,$00,$BF,$7F,$8F,$DC ;
 $6C40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$D0,$00,$FF,$F8,$3F,$7E,$0F,$FF,$80,$05,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6C60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$73,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$00,$01,$40,$01,$40,$00,$7F,$FF,$45,$FF,$FF,$F4,$2F,$C0,$F7 ;
 $6C80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$73,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$00,$01,$40,$01,$40,$00,$7F,$FF,$45,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6CA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$D0,$00,$FF,$F8,$3F,$7E,$0F,$FF,$80,$05,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6CC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FF,$7E,$80,$00,$02,$C9,$FF,$F8,$03,$FC,$1F,$E0,$0F,$FF,$C9,$A0,$00,$00,$BF,$7F,$7C,$DC ;
 $6CE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$3D,$FF,$CF,$D0,$FF,$FF,$E4,$2C,$00,$3F,$F8,$0F,$FE,$00,$1A,$13,$FF,$FF,$85,$F9,$FC,$FF,$70 ;
 $6D00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$6F,$B7,$DF,$D0,$3F,$FF,$E8,$4C,$00,$3F,$F8,$0F,$FE,$00,$19,$0B,$FF,$FE,$05,$FD,$FF,$FE,$70 ;
 $6D20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$7F,$3E,$7E,$80,$00,$05,$FB,$FF,$FC,$03,$FC,$1F,$E0,$1F,$FF,$EF,$D0,$00,$00,$BF,$3F,$FF,$DC ;
 $6D40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$2F,$D0,$00,$3F,$FC,$3F,$7E,$1F,$FE,$00,$05,$FA,$00,$00,$2F,$DF,$FF,$EE ;
 $6D60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$73,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FC,$02,$41,$C1,$20,$1F,$FF,$FF,$45,$FF,$FF,$F4,$2F,$BD,$37 ;
 $6D80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$73,$FF,$FA,$17,$FF,$FF,$D1,$7F,$80,$00,$03,$20,$02,$60,$00,$00,$FF,$45,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6DA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$D0,$03,$FF,$F0,$7E,$3F,$07,$FF,$E0,$05,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6DC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FF,$7E,$80,$00,$03,$85,$FF,$F0,$07,$FC,$1F,$F0,$07,$FF,$D0,$E0,$00,$00,$BF,$7E,$FF,$5C ;
 $6DE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$BB,$FF,$EF,$CB,$FF,$FF,$F2,$12,$00,$7F,$F8,$0F,$FF,$00,$24,$27,$FF,$FF,$E9,$FB,$FB,$3E,$E0 ;
 $6E00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$07,$77,$7F,$DF,$A0,$0F,$FF,$D0,$5E,$00,$1F,$F8,$0F,$FC,$00,$3D,$05,$FF,$F8,$02,$FD,$FF,$7F,$70 ;
 $6E20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$BF,$FE,$FD,$00,$00,$05,$FF,$FF,$FE,$01,$FE,$3F,$C0,$3F,$FF,$FF,$D0,$00,$00,$5F,$BF,$FF,$DC ;
 $6E40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$0F,$C0,$00,$2F,$A0,$00,$0F,$FE,$1F,$FC,$3F,$F8,$00,$02,$FA,$00,$01,$F8,$5F,$FF,$EE ;
 $6E60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$75,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FF,$F2,$83,$E0,$A7,$FF,$FF,$FF,$45,$FF,$FF,$F4,$2F,$7D,$D7 ;
 $6E80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$75,$FF,$FA,$17,$FF,$FF,$D7,$E0,$00,$00,$0F,$90,$04,$F8,$00,$00,$03,$F5,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6EA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FD,$FA,$00,$00,$17,$E8,$0F,$FF,$E0,$7E,$3F,$03,$FF,$F8,$0B,$F4,$00,$00,$2F,$DF,$FF,$EE ;
 $6EC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$FE,$3F,$7F,$40,$00,$0F,$42,$FF,$E0,$07,$FC,$1F,$F0,$03,$FF,$A1,$78,$00,$01,$7F,$7E,$FF,$B8 ;
 $6EE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$87,$FF,$EF,$EF,$FF,$FF,$F9,$39,$80,$7F,$F8,$0F,$FF,$00,$CE,$4F,$FF,$FF,$FB,$FB,$FB,$CE,$E0 ;
 $6F00 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$F7,$7F,$BF,$A0,$03,$FF,$90,$BF,$00,$1F,$F8,$0F,$FC,$00,$7E,$84,$FF,$E0,$02,$FE,$FE,$F7,$38 ;
 $6F20 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$1D,$FF,$FE,$FD,$00,$00,$0B,$F7,$FF,$FF,$01,$FE,$3F,$C0,$7F,$FF,$F7,$E8,$00,$00,$5F,$BF,$FF,$DC ;
 $6F40 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$77,$FF,$FD,$0B,$FF,$00,$2F,$A0,$00,$03,$FF,$18,$0C,$7F,$E0,$00,$02,$FA,$00,$7F,$E8,$5F,$FF,$F7 ;
 $6F60 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$76,$FF,$FA,$17,$FF,$FF,$D1,$7F,$FF,$FF,$FE,$87,$F0,$BF,$FF,$FF,$FF,$45,$FF,$FF,$F4,$2F,$7E,$E7 ;
 $6F80 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$76,$FF,$FA,$17,$FF,$FF,$FF,$A0,$00,$00,$3F,$CC,$19,$FE,$00,$00,$02,$FF,$FF,$FF,$F4,$2F,$FF,$F7 ;
 $6FA0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$3B,$FF,$FE,$FD,$00,$00,$0B,$E8,$3F,$FF,$C0,$FE,$3F,$81,$FF,$FE,$0B,$E8,$00,$00,$5F,$BF,$FF,$EE ;
 $6FC0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$0E,$C5,$DF,$BF,$40,$00,$3F,$42,$7F,$C0,$0F,$FC,$1F,$F8,$01,$FF,$21,$7E,$00,$01,$7E,$FE,$FF,$B8 ;
 $6FE0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$03,$BF,$FF,$F7,$F7,$FF,$FF,$FC,$FE,$40,$FF,$F8,$0F,$FF,$81,$3F,$9F,$FF,$FF,$F7,$F7,$FD,$F2,$E0 ;
 $7000 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$DF,$FF,$F7,$D7,$FF,$FF,$FE,$FF,$20,$FF,$F0,$07,$FF,$82,$7F,$BF,$FF,$FF,$F5,$F7,$FF,$FD,$C0 ;
 $7020 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$3B,$FF,$FF,$A0,$BF,$FF,$80,$01,$98,$03,$E0,$03,$E0,$0C,$C0,$00,$FF,$FE,$82,$FF,$FF,$EE,$00 ;
 $7040 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$03,$DE,$F0,$FC,$81,$A0,$00,$00,$FF,$FF,$C0,$01,$FF,$FF,$80,$00,$02,$C0,$9F,$DD,$F5,$E0,$00 ;
 $7060 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$1E,$7B,$FF,$FC,$FF,$98,$0F,$FF,$FF,$80,$00,$FF,$FF,$F8,$0C,$FF,$9F,$FF,$FD,$BC,$00,$00 ;
 $7080 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$3D,$FF,$FD,$FF,$9F,$83,$1F,$FE,$00,$00,$3F,$FC,$60,$FC,$FF,$FF,$FF,$DE,$00,$00,$00 ;
 $70A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$3E,$FF,$7F,$FF,$FF,$C3,$C7,$FF,$FF,$F1,$E1,$FF,$FF,$FF,$BF,$BE,$00,$00,$00,$00 ;
 $70C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$07,$CF,$FF,$DD,$F7,$FF,$F0,$1F,$FF,$FB,$7F,$BF,$F9,$F0,$00,$00,$00,$00,$00 ;
 $70E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$0F,$F0,$1F,$FF,$F7,$EF,$FF,$FF,$C7,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $7100 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$DF,$FF,$FB,$0B,$FF,$FF,$FF,$3F,$99,$FF,$F0,$07,$FF,$CC,$FE,$7F,$FF,$FF,$E8,$6F,$FF,$FD,$C0 ;
 $7120 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$3D,$FF,$FF,$90,$5F,$FF,$00,$00,$76,$00,$3F,$FE,$00,$37,$00,$00,$7F,$FD,$04,$FF,$FF,$DE,$00 ;
 $7140 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$01,$D9,$CF,$7E,$41,$90,$00,$01,$FF,$FF,$C0,$01,$FF,$FF,$C0,$00,$04,$C1,$3F,$ED,$F5,$C0,$00 ;
 $7160 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$0F,$07,$FF,$FE,$7F,$E4,$1F,$FF,$FF,$00,$00,$7F,$FF,$FC,$13,$FF,$3F,$FF,$FE,$78,$00,$00 ;
 $7180 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$1E,$FF,$FE,$7F,$CF,$00,$E3,$FE,$00,$00,$3F,$E3,$80,$79,$FF,$1F,$FF,$BC,$00,$00,$00 ;
 $71A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$1F,$7C,$FF,$FF,$FF,$F8,$3F,$FF,$FF,$FE,$0F,$FF,$FF,$FF,$7C,$7C,$00,$00,$00,$00 ;
 $71C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$03,$F3,$FF,$DD,$FB,$FF,$FF,$EF,$FF,$FF,$BF,$BF,$E7,$E0,$00,$00,$00,$00,$00 ;
 $71E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$03,$FE,$1F,$FF,$F7,$EF,$FF,$FC,$3F,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $7200 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$01,$EF,$FF,$FA,$0B,$FF,$FF,$FE,$9F,$E7,$FF,$F0,$07,$FF,$F3,$FC,$BF,$FF,$FF,$E8,$2F,$FF,$FB,$C0 ;
 $7220 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$1D,$FF,$9F,$D0,$2F,$FE,$00,$00,$19,$C0,$3F,$FE,$01,$CC,$00,$00,$3F,$FA,$05,$FF,$FF,$DC,$00 ;
 $7240 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$01,$E7,$9F,$BF,$23,$C8,$00,$01,$FF,$FF,$80,$00,$FF,$FF,$C0,$00,$09,$E2,$7F,$F3,$F3,$C0,$00 ;
 $7260 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$07,$BF,$FF,$FF,$3F,$F3,$1F,$FF,$FF,$00,$00,$7F,$FF,$FC,$67,$FE,$7F,$FF,$FE,$F0,$00,$00 ;
 $7280 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$0F,$7F,$FF,$BF,$F3,$00,$1C,$3F,$00,$00,$7E,$1C,$00,$67,$FC,$EF,$FF,$78,$00,$00,$00 ;
 $72A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$07,$93,$FF,$FF,$FF,$FF,$C0,$FF,$FF,$81,$FF,$FF,$FF,$FF,$78,$F0,$00,$00,$00,$00 ;
 $72C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$FC,$FF,$BD,$FB,$FF,$FF,$EF,$FF,$FF,$BF,$BF,$9F,$80,$00,$00,$00,$00,$00 ;
 $72E0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$E0,$FF,$FB,$DF,$FF,$83,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7300 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$EF,$FF,$FD,$05,$FF,$FF,$FC,$4F,$F3,$FF,$F0,$07,$FF,$E7,$F9,$1F,$FF,$FF,$D0,$5F,$FF,$FB,$80 ;
 $7320 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$1E,$FF,$EF,$E8,$27,$FC,$00,$00,$3E,$38,$3F,$FE,$0E,$3E,$00,$00,$1F,$F2,$0B,$FB,$FF,$BC,$00 ;
 $7340 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$F7,$67,$BF,$97,$E4,$00,$03,$FF,$FF,$80,$00,$FF,$FF,$E0,$00,$13,$F4,$FE,$7F,$E7,$80,$00 ;
 $7360 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$03,$DF,$FF,$FF,$CF,$FC,$FF,$FF,$FF,$00,$00,$7F,$FF,$FF,$9F,$F9,$FF,$FF,$FD,$E0,$00,$00 ;
 $7380 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$07,$BF,$FF,$CF,$FC,$C0,$03,$C2,$FF,$FF,$A1,$E0,$01,$9F,$FD,$F7,$FE,$F0,$00,$00,$00 ;
 $73A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$03,$E7,$FF,$FF,$9F,$FF,$FF,$00,$00,$7F,$FF,$FE,$3F,$FF,$B3,$E0,$00,$00,$00,$00 ;
 $73C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$3F,$3F,$BE,$FB,$FF,$FF,$DF,$FF,$FF,$BF,$BE,$7E,$00,$00,$00,$00,$00,$00 ;
 $73E0 DEFB $40,$00,$00,$00,$00,$00,$00,$04,$80,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$01,$FC,$3F,$C0,$7F,$F8,$00,$00,$00,$00,$00,$00,$00,$01 ;
 $7400 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$EF,$FF,$FD,$04,$FF,$FF,$F8,$27,$FE,$7F,$F0,$07,$FF,$3F,$F2,$0F,$FF,$FF,$90,$5F,$FF,$FB,$80 ;
 $7420 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$0E,$FF,$F7,$E4,$13,$F8,$00,$00,$3F,$C7,$FF,$FF,$F1,$FE,$00,$00,$0F,$E4,$13,$F7,$FF,$B8,$00 ;
 $7440 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$76,$FB,$FF,$CF,$F2,$00,$03,$FF,$FF,$80,$00,$FF,$FF,$E0,$00,$27,$F9,$FD,$BF,$E7,$00,$00 ;
 $7460 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$01,$EF,$FF,$FF,$E7,$FF,$3F,$FF,$FF,$00,$00,$7F,$FF,$FE,$7F,$F3,$FF,$FF,$FB,$C0,$00,$00 ;
 $7480 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$03,$DF,$FF,$F7,$FF,$38,$00,$3F,$00,$00,$7E,$00,$0E,$7F,$FB,$F7,$FD,$E0,$00,$00,$00 ;
 $74A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$01,$F3,$FF,$FE,$6F,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$DF,$FF,$87,$C0,$00,$00,$00,$00 ;
 $74C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$1F,$CF,$BF,$07,$FF,$FF,$3F,$FF,$FF,$DF,$79,$FC,$00,$00,$00,$00,$00,$00 ;
 $74E0 DEFB $40,$00,$00,$00,$00,$00,$00,$04,$80,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FE,$00,$00,$3F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$01 ;
 $7500 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$77,$FF,$FE,$82,$FF,$FF,$F0,$13,$FF,$1F,$F0,$07,$FC,$7F,$E4,$07,$FF,$FF,$A0,$BF,$FF,$F7,$00 ;
 $7520 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$0F,$7F,$E7,$F2,$09,$F0,$00,$00,$7F,$F8,$7F,$FF,$0F,$FF,$00,$00,$07,$C8,$27,$EF,$FF,$78,$00 ;
 $7540 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$7A,$FD,$FF,$E7,$F9,$00,$07,$FF,$FF,$80,$00,$FF,$FF,$F0,$00,$4F,$F3,$FD,$DE,$CF,$00,$00 ;
 $7560 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$01,$EF,$FF,$FF,$F3,$FF,$CF,$FF,$FF,$00,$00,$7F,$FF,$F9,$FF,$E7,$FF,$FF,$FB,$C0,$00,$00 ;
 $7580 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$01,$E7,$FF,$F7,$FF,$C6,$00,$07,$FF,$FF,$F0,$00,$31,$FF,$FB,$F7,$F3,$C0,$00,$00,$00 ;
 $75A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$FD,$FF,$FF,$EF,$FF,$FF,$FF,$FF,$FF,$FF,$E7,$DF,$FF,$DF,$80,$00,$00,$00,$00 ;
 $75C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$07,$F1,$7F,$F7,$FF,$FF,$DF,$FF,$FF,$DF,$47,$F0,$00,$00,$00,$00,$00,$00 ;
 $75E0 DEFB $20,$00,$00,$00,$00,$00,$00,$08,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$03 ;
 $7600 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$77,$FF,$FE,$41,$7F,$FF,$E0,$0C,$FC,$E3,$E0,$03,$E3,$9F,$98,$03,$FF,$FF,$41,$3F,$FF,$F7,$00 ;
 $7620 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$07,$7F,$DF,$FA,$04,$E0,$00,$00,$7F,$FF,$C0,$01,$FF,$FF,$00,$00,$03,$90,$2F,$EF,$1F,$70,$00 ;
 $7640 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$3C,$FD,$FF,$F3,$FE,$C0,$07,$FF,$FF,$80,$00,$FF,$FF,$F0,$01,$BF,$E7,$FF,$E7,$1E,$00,$00 ;
 $7660 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$F7,$FF,$FF,$FC,$FF,$E3,$FF,$FF,$00,$00,$7F,$FF,$E3,$FF,$9F,$FF,$FF,$F7,$80,$00,$00 ;
 $7680 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$FB,$FF,$EF,$FF,$F1,$C0,$07,$FF,$FF,$F0,$01,$C7,$FF,$FF,$CF,$EF,$80,$00,$00,$00 ;
 $76A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$3E,$7F,$FF,$EF,$0F,$FF,$FF,$FF,$FF,$FC,$FF,$DF,$FF,$3E,$00,$00,$00,$00,$00 ;
 $76C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$01,$FE,$7B,$F7,$FF,$FF,$EF,$FF,$FF,$EF,$3F,$C0,$00,$00,$00,$00,$00,$00 ;
 $76E0 DEFB $18,$00,$00,$00,$00,$00,$00,$30,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$07 ;
 $7700 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$7B,$FF,$FF,$41,$3F,$FF,$C0,$02,$78,$1C,$3F,$FE,$1C,$0F,$20,$01,$FF,$FE,$41,$7F,$FF,$EF,$00 ;
 $7720 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$03,$BF,$3F,$FD,$02,$40,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$01,$20,$5F,$DE,$EE,$E0,$00 ;
 $7740 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$1C,$FD,$FF,$F9,$FF,$20,$0F,$FF,$FF,$80,$00,$FF,$FF,$F8,$02,$7F,$CF,$FF,$FB,$DC,$00,$00 ;
 $7760 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$7B,$FF,$FF,$FE,$7F,$9C,$7F,$FE,$00,$00,$3F,$FF,$1C,$FF,$3F,$FF,$FF,$EF,$00,$00,$00 ;
 $7780 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$7D,$FF,$9F,$FF,$FE,$3C,$07,$FF,$FF,$F0,$1E,$3F,$FF,$FF,$BF,$DF,$00,$00,$00,$00 ;
 $77A0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$1F,$BF,$FF,$DE,$F7,$FF,$FF,$FF,$FF,$FB,$7F,$DF,$FE,$FC,$00,$00,$00,$00,$00 ;
 $77C0 DEFB $80,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$7F,$8D,$EF,$FF,$FF,$EF,$FF,$FF,$E8,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $77E0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F ; }

; Data block at 7800
b$7800 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7808 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7810 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7818 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7820 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7828 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7830 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7840 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7848 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7850 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7858 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7860 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7868 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7870 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7878 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7880 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7888 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7890 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7898 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7900 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7908 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7910 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7918 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7920 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7928 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7930 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7938 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7940 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7948 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7950 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7960 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7968 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7970 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7978 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7980 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7988 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7990 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7998 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at 7B00
b$7B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C80 DEFB $00,$00,$00,$00,$00,$00,$00

; Data block at 7C87
b$7C87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CFF DEFB $00

; Graphics: Hand
;
; Graphic data, arranged as.
; .
; Graphic data, arranged as:
;
; .
;
; Frame #N$01:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($7D00-$7E81-$01-$38)(hand-1) }
; UDGTABLE#
@label=Graphics_Hand_01
b$7D00 DEFB $00,$00,$00,$00,$00,$00,$00
 $7D07 DEFB $00,$00,$0F,$00,$00,$00,$00
 $7D0E DEFB $00,$00,$30,$80,$00,$00,$00
 $7D15 DEFB $00,$00,$43,$40,$00,$00,$00
 $7D1C DEFB $00,$00,$F0,$20,$00,$00,$00
 $7D23 DEFB $00,$03,$08,$20,$00,$00,$00
 $7D2A DEFB $00,$24,$34,$10,$00,$00,$00
 $7D31 DEFB $00,$38,$04,$1E,$00,$00,$00
 $7D38 DEFB $00,$60,$02,$15,$00,$00,$00
 $7D3F DEFB $00,$A4,$02,$08,$80,$00,$00
 $7D46 DEFB $00,$E4,$02,$0C,$80,$00,$00
 $7D4D DEFB $00,$B4,$02,$0A,$40,$00,$00
 $7D54 DEFB $00,$7E,$01,$04,$40,$00,$00
 $7D5B DEFB $00,$7E,$01,$06,$20,$00,$00
 $7D62 DEFB $00,$FA,$01,$85,$38,$00,$00
 $7D69 DEFB $3F,$FF,$E1,$02,$14,$00,$00
 $7D70 DEFB $00,$FA,$00,$81,$0A,$00,$00
 $7D77 DEFB $07,$F4,$00,$01,$89,$00,$00
 $7D7E DEFB $18,$34,$00,$81,$04,$80,$00
 $7D85 DEFB $20,$3C,$40,$00,$82,$80,$00
 $7D8C DEFB $3C,$2C,$20,$20,$82,$40,$00
 $7D93 DEFB $22,$2C,$40,$50,$A0,$20,$00
 $7D9A DEFB $19,$26,$20,$20,$92,$20,$00
 $7DA1 DEFB $07,$06,$50,$10,$A0,$A0,$00
 $7DA8 DEFB $01,$06,$28,$28,$10,$50,$00
 $7DAF DEFB $00,$82,$10,$10,$80,$90,$00
 $7DB6 DEFB $00,$C3,$08,$08,$00,$D0,$00
 $7DBD DEFB $00,$93,$00,$00,$40,$90,$00
 $7DC4 DEFB $00,$61,$00,$00,$40,$D0,$00
 $7DCB DEFB $00,$41,$02,$00,$00,$90,$00
 $7DD2 DEFB $00,$22,$00,$00,$00,$D0,$00
 $7DD9 DEFB $00,$22,$00,$00,$40,$90,$00
 $7DE0 DEFB $00,$22,$00,$00,$41,$48,$00
 $7DE7 DEFB $00,$20,$00,$00,$41,$88,$00
 $7DEE DEFB $00,$20,$00,$80,$01,$48,$00
 $7DF5 DEFB $00,$40,$00,$00,$01,$88,$00
 $7DFC DEFB $00,$44,$00,$00,$21,$08,$00
 $7E03 DEFB $00,$42,$00,$40,$20,$08,$00
 $7E0A DEFB $00,$44,$00,$20,$22,$08,$00
 $7E11 DEFB $00,$42,$00,$40,$00,$08,$00
 $7E18 DEFB $00,$20,$00,$60,$02,$08,$00
 $7E1F DEFB $00,$20,$00,$30,$00,$10,$00
 $7E26 DEFB $00,$20,$00,$28,$00,$30,$00
 $7E2D DEFB $00,$10,$00,$10,$00,$50,$00
 $7E34 DEFB $00,$10,$00,$08,$00,$30,$00
 $7E3B DEFB $00,$08,$00,$04,$00,$50,$00
 $7E42 DEFB $00,$08,$80,$00,$00,$A0,$00
 $7E49 DEFB $00,$04,$50,$00,$00,$60,$00
 $7E50 DEFB $00,$04,$38,$00,$00,$A0,$00
 $7E57 DEFB $00,$02,$14,$00,$00,$60,$00
 $7E5E DEFB $00,$01,$8C,$1F,$F8,$10,$00
 $7E65 DEFB $00,$00,$41,$E0,$07,$90,$00
 $7E6C DEFB $00,$00,$26,$00,$00,$70,$00
 $7E73 DEFB $00,$00,$28,$00,$00,$00,$00
 $7E7A DEFB $00,$00,$30,$00,$00,$00,$00
 $7E81 DEFB $00,$00,$00,$00,$00,$00,$00
; Frame #N$02:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($7E88-$8009-$01-$38)(hand-2) }
; UDGTABLE#
@label=Graphics_Hand_02
 $7E88 DEFB $00,$00,$00,$00,$00,$00,$00
 $7E8F DEFB $00,$00,$00,$00,$00,$00,$00
 $7E96 DEFB $00,$00,$00,$00,$00,$00,$00
 $7E9D DEFB $00,$00,$00,$00,$00,$00,$00
 $7EA4 DEFB $00,$03,$C0,$00,$00,$00,$00
 $7EAB DEFB $00,$2C,$38,$00,$00,$00,$00
 $7EB2 DEFB $00,$30,$07,$80,$00,$00,$00
 $7EB9 DEFB $00,$3F,$81,$E0,$00,$00,$00
 $7EC0 DEFB $00,$60,$72,$58,$00,$00,$00
 $7EC7 DEFB $00,$80,$0C,$E4,$00,$00,$00
 $7ECE DEFB $00,$80,$42,$12,$00,$00,$00
 $7ED5 DEFB $00,$A0,$9E,$69,$00,$00,$00
 $7EDC DEFB $00,$F0,$01,$08,$80,$00,$00
 $7EE3 DEFB $00,$AC,$47,$04,$40,$00,$00
 $7EEA DEFB $00,$F6,$01,$04,$60,$00,$00
 $7EF1 DEFB $00,$FE,$00,$82,$38,$00,$00
 $7EF8 DEFB $00,$FA,$00,$82,$14,$00,$00
 $7EFF DEFB $15,$FD,$40,$81,$0A,$00,$00
 $7F06 DEFB $2A,$FA,$A0,$41,$09,$00,$00
 $7F0D DEFB $1F,$FF,$C0,$40,$84,$80,$00
 $7F14 DEFB $21,$72,$00,$40,$84,$80,$00
 $7F1B DEFB $20,$AE,$00,$40,$42,$40,$00
 $7F22 DEFB $20,$34,$00,$20,$42,$40,$00
 $7F29 DEFB $10,$2C,$00,$20,$22,$20,$00
 $7F30 DEFB $0C,$24,$00,$10,$00,$20,$00
 $7F37 DEFB $03,$0A,$00,$10,$11,$20,$00
 $7F3E DEFB $00,$86,$00,$04,$10,$10,$00
 $7F45 DEFB $01,$02,$08,$0A,$00,$10,$00
 $7F4C DEFB $01,$06,$00,$05,$00,$10,$00
 $7F53 DEFB $00,$82,$08,$06,$10,$10,$00
 $7F5A DEFB $00,$85,$04,$05,$00,$10,$00
 $7F61 DEFB $00,$83,$0A,$02,$11,$10,$00
 $7F68 DEFB $00,$41,$05,$40,$21,$10,$00
 $7F6F DEFB $00,$43,$02,$00,$31,$90,$00
 $7F76 DEFB $00,$41,$00,$40,$21,$08,$00
 $7F7D DEFB $00,$40,$00,$00,$10,$88,$00
 $7F84 DEFB $00,$C2,$01,$00,$21,$08,$00
 $7F8B DEFB $00,$A2,$01,$40,$01,$08,$00
 $7F92 DEFB $00,$C0,$00,$80,$22,$08,$00
 $7F99 DEFB $00,$A1,$00,$40,$01,$08,$00
 $7FA0 DEFB $00,$52,$80,$20,$02,$08,$00
 $7FA7 DEFB $00,$61,$00,$10,$04,$08,$00
 $7FAE DEFB $00,$30,$80,$20,$22,$10,$00
 $7FB5 DEFB $00,$29,$40,$10,$04,$10,$00
 $7FBC DEFB $00,$10,$A0,$00,$00,$10,$00
 $7FC3 DEFB $00,$08,$40,$10,$00,$10,$00
 $7FCA DEFB $00,$08,$20,$00,$08,$20,$00
 $7FD1 DEFB $00,$05,$10,$00,$00,$60,$00
 $7FD8 DEFB $00,$02,$80,$00,$02,$C0,$00
 $7FDF DEFB $00,$01,$50,$00,$05,$40,$00
 $7FE6 DEFB $00,$00,$AA,$00,$0A,$80,$00
 $7FED DEFB $00,$00,$55,$00,$07,$00,$00
 $7FF4 DEFB $00,$00,$3A,$FF,$FC,$00,$00
 $7FFB DEFB $00,$00,$0F,$00,$00,$00,$00
 $8002 DEFB $00,$00,$00,$00,$00,$00,$00
 $8009 DEFB $00,$00,$00,$00,$00,$00,$00
; Frame #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8010-$8191-$01-$38)(hand-3) }
; UDGTABLE#
@label=Graphics_Hand_03
 $8010 DEFB $00,$00,$00,$00,$00,$00,$00
 $8017 DEFB $00,$00,$00,$00,$00,$00,$00
 $801E DEFB $00,$00,$00,$00,$00,$00,$00
 $8025 DEFB $00,$00,$00,$00,$00,$00,$00
 $802C DEFB $00,$20,$00,$00,$00,$00,$00
 $8033 DEFB $00,$20,$00,$00,$00,$00,$00
 $803A DEFB $00,$20,$00,$00,$00,$00,$00
 $8041 DEFB $00,$20,$00,$00,$00,$00,$00
 $8048 DEFB $00,$27,$60,$00,$00,$00,$00
 $804F DEFB $00,$28,$98,$00,$00,$00,$00
 $8056 DEFB $00,$77,$57,$80,$00,$00,$00
 $805D DEFB $00,$94,$23,$60,$00,$00,$00
 $8064 DEFB $00,$90,$10,$98,$00,$00,$00
 $806B DEFB $00,$90,$69,$C4,$00,$00,$00
 $8072 DEFB $00,$90,$8A,$22,$00,$00,$00
 $8079 DEFB $00,$98,$34,$D1,$00,$00,$00
 $8080 DEFB $00,$88,$04,$10,$80,$00,$00
 $8087 DEFB $00,$9C,$04,$08,$40,$00,$00
 $808E DEFB $00,$8E,$02,$04,$70,$00,$00
 $8095 DEFB $00,$FD,$03,$04,$2C,$00,$00
 $809C DEFB $00,$FA,$02,$82,$12,$00,$00
 $80A3 DEFB $07,$FB,$03,$02,$09,$00,$00
 $80AA DEFB $18,$FA,$01,$82,$08,$80,$00
 $80B1 DEFB $20,$FD,$01,$01,$04,$80,$00
 $80B8 DEFB $20,$FE,$01,$81,$04,$40,$00
 $80BF DEFB $20,$FD,$01,$41,$82,$20,$00
 $80C6 DEFB $34,$FA,$81,$80,$C2,$20,$00
 $80CD DEFB $1A,$FD,$01,$40,$A2,$10,$00
 $80D4 DEFB $07,$DE,$00,$80,$C0,$10,$00
 $80DB DEFB $1E,$FB,$C0,$C0,$61,$08,$00
 $80E2 DEFB $35,$DD,$60,$80,$50,$88,$00
 $80E9 DEFB $6F,$FF,$B0,$00,$21,$48,$00
 $80F0 DEFB $38,$D9,$E0,$90,$20,$88,$00
 $80F7 DEFB $00,$71,$80,$28,$00,$48,$00
 $80FE DEFB $00,$41,$00,$10,$00,$88,$00
 $8105 DEFB $00,$20,$80,$28,$20,$08,$00
 $810C DEFB $00,$20,$40,$14,$40,$08,$00
 $8113 DEFB $00,$40,$80,$08,$40,$08,$00
 $811A DEFB $00,$60,$40,$10,$40,$10,$00
 $8121 DEFB $00,$50,$A0,$00,$01,$10,$00
 $8128 DEFB $00,$60,$40,$10,$80,$10,$00
 $812F DEFB $00,$30,$A0,$10,$01,$10,$00
 $8136 DEFB $00,$28,$50,$00,$02,$20,$00
 $813D DEFB $00,$34,$20,$00,$04,$60,$00
 $8144 DEFB $00,$18,$50,$20,$04,$A0,$00
 $814B DEFB $00,$14,$28,$20,$08,$40,$00
 $8152 DEFB $00,$1A,$10,$20,$00,$C0,$00
 $8159 DEFB $00,$0D,$00,$00,$11,$80,$00
 $8160 DEFB $00,$06,$80,$00,$22,$80,$00
 $8167 DEFB $00,$05,$00,$00,$05,$00,$00
 $816E DEFB $00,$02,$80,$00,$4A,$00,$00
 $8175 DEFB $00,$01,$50,$00,$06,$00,$00
 $817C DEFB $00,$00,$A8,$00,$0C,$00,$00
 $8183 DEFB $00,$00,$75,$00,$70,$00,$00
 $818A DEFB $00,$00,$0F,$FF,$80,$00,$00
 $8191 DEFB $00,$00,$00,$00,$00,$00,$00
; Frame #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8198-$8319-$01-$38)(hand-4) }
; UDGTABLE#
@label=Graphics_Hand_04
 $8198 DEFB $00,$00,$00,$00,$00,$00,$00
 $819F DEFB $00,$20,$00,$00,$00,$00,$00
 $81A6 DEFB $00,$20,$00,$00,$00,$00,$00
 $81AD DEFB $00,$20,$00,$00,$00,$00,$00
 $81B4 DEFB $00,$20,$00,$00,$00,$00,$00
 $81BB DEFB $00,$20,$00,$00,$00,$00,$00
 $81C2 DEFB $00,$20,$00,$00,$00,$00,$00
 $81C9 DEFB $00,$20,$00,$00,$00,$00,$00
 $81D0 DEFB $00,$70,$00,$00,$00,$00,$00
 $81D7 DEFB $00,$88,$E0,$00,$00,$00,$00
 $81DE DEFB $00,$9B,$BC,$00,$00,$00,$00
 $81E5 DEFB $00,$8C,$43,$00,$00,$00,$00
 $81EC DEFB $00,$98,$3C,$E0,$00,$00,$00
 $81F3 DEFB $00,$89,$09,$18,$00,$00,$00
 $81FA DEFB $00,$99,$16,$06,$00,$00,$00
 $8201 DEFB $00,$8C,$E1,$81,$80,$00,$00
 $8208 DEFB $00,$9F,$04,$60,$40,$00,$00
 $820F DEFB $00,$B0,$80,$13,$30,$00,$00
 $8216 DEFB $00,$A8,$40,$08,$58,$00,$00
 $821D DEFB $00,$A9,$C0,$34,$94,$00,$00
 $8224 DEFB $00,$A6,$28,$42,$0B,$00,$00
 $822B DEFB $00,$E0,$34,$1A,$04,$80,$00
 $8232 DEFB $00,$E0,$9A,$81,$04,$40,$00
 $8239 DEFB $07,$F0,$0D,$41,$02,$40,$00
 $8240 DEFB $18,$F0,$0B,$80,$80,$20,$00
 $8247 DEFB $20,$F8,$05,$C0,$C1,$20,$00
 $824E DEFB $40,$F8,$02,$80,$A0,$90,$00
 $8255 DEFB $40,$F8,$02,$C0,$50,$10,$00
 $825C DEFB $50,$FC,$02,$80,$68,$90,$00
 $8263 DEFB $6A,$DD,$01,$C0,$10,$08,$00
 $826A DEFB $3D,$FA,$B9,$C0,$28,$08,$00
 $8271 DEFB $03,$DF,$41,$50,$00,$08,$00
 $8278 DEFB $1E,$FB,$81,$80,$00,$08,$00
 $827F DEFB $35,$DD,$61,$10,$00,$08,$00
 $8286 DEFB $6A,$FA,$B0,$08,$04,$08,$00
 $828D DEFB $57,$FF,$50,$15,$00,$08,$00
 $8294 DEFB $38,$72,$F8,$0A,$04,$10,$00
 $829B DEFB $00,$25,$14,$04,$08,$10,$00
 $82A2 DEFB $00,$26,$88,$02,$04,$10,$00
 $82A9 DEFB $00,$37,$40,$00,$08,$10,$00
 $82B0 DEFB $00,$26,$80,$02,$04,$20,$00
 $82B7 DEFB $00,$33,$40,$02,$08,$60,$00
 $82BE DEFB $00,$1B,$A0,$00,$00,$A0,$00
 $82C5 DEFB $00,$15,$D0,$02,$08,$40,$00
 $82CC DEFB $00,$0A,$6A,$00,$10,$C0,$00
 $82D3 DEFB $00,$0D,$15,$00,$01,$80,$00
 $82DA DEFB $00,$06,$02,$00,$12,$80,$00
 $82E1 DEFB $00,$05,$01,$00,$01,$00,$00
 $82E8 DEFB $00,$02,$80,$00,$03,$00,$00
 $82EF DEFB $00,$01,$40,$00,$02,$00,$00
 $82F6 DEFB $00,$00,$E8,$00,$0C,$00,$00
 $82FD DEFB $00,$00,$34,$00,$30,$00,$00
 $8304 DEFB $00,$00,$1A,$03,$C0,$00,$00
 $830B DEFB $00,$00,$07,$FC,$00,$00,$00
 $8312 DEFB $00,$00,$00,$00,$00,$00,$00
 $8319 DEFB $00,$00,$00,$00,$00,$00,$00

; Graphics: Hand Mask
;
; Graphic data, arranged as.
;
; .
;
; Mask #N$01:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8320-$84A1-$01-$38)(hand-mask-1) }
; UDGTABLE#
@label=Graphics_HandMask_01
b$8320 DEFB $FF,$FF,$E0,$7F,$FF,$FF,$FF
 $8327 DEFB $FF,$FF,$80,$3F,$FF,$FF,$FF
 $832E DEFB $FF,$FF,$00,$1F,$FF,$FF,$FF
 $8335 DEFB $FF,$FE,$00,$0F,$FF,$FF,$FF
 $833C DEFB $FF,$F8,$00,$0F,$FF,$FF,$FF
 $8343 DEFB $FF,$80,$00,$07,$FF,$FF,$FF
 $834A DEFB $FF,$80,$00,$00,$FF,$FF,$FF
 $8351 DEFB $FF,$00,$00,$00,$7F,$FF,$FF
 $8358 DEFB $FE,$00,$00,$00,$3F,$FF,$FF
 $835F DEFB $FE,$00,$00,$00,$3F,$FF,$FF
 $8366 DEFB $FE,$00,$00,$00,$1F,$FF,$FF
 $836D DEFB $FE,$00,$00,$00,$1F,$FF,$FF
 $8374 DEFB $FE,$00,$00,$00,$0F,$FF,$FF
 $837B DEFB $FE,$00,$00,$00,$03,$FF,$FF
 $8382 DEFB $80,$04,$00,$00,$01,$FF,$FF
 $8389 DEFB $80,$00,$00,$00,$00,$FF,$FF
 $8390 DEFB $80,$04,$00,$00,$00,$7F,$FF
 $8397 DEFB $C0,$08,$00,$00,$00,$3F,$FF
 $839E DEFB $80,$08,$00,$00,$00,$3F,$FF
 $83A5 DEFB $80,$00,$00,$00,$00,$1F,$FF
 $83AC DEFB $80,$00,$00,$00,$00,$0F,$FF
 $83B3 DEFB $80,$00,$00,$00,$00,$0F,$FF
 $83BA DEFB $80,$00,$00,$00,$00,$0F,$FF
 $83C1 DEFB $C0,$00,$00,$00,$00,$07,$FF
 $83C8 DEFB $F0,$00,$00,$00,$00,$07,$FF
 $83CF DEFB $FC,$00,$00,$00,$00,$07,$FF
 $83D6 DEFB $FE,$00,$00,$00,$00,$07,$FF
 $83DD DEFB $FE,$00,$00,$00,$00,$07,$FF
 $83E4 DEFB $FE,$00,$00,$00,$00,$07,$FF
 $83EB DEFB $FF,$00,$00,$00,$00,$07,$FF
 $83F2 DEFB $FF,$00,$00,$00,$00,$07,$FF
 $83F9 DEFB $FF,$80,$00,$00,$00,$03,$FF
 $8400 DEFB $FF,$80,$00,$00,$00,$03,$FF
 $8407 DEFB $FF,$80,$00,$00,$00,$03,$FF
 $840E DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8415 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $841C DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8423 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $842A DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8431 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8438 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $843F DEFB $FF,$80,$00,$00,$00,$03,$FF
 $8446 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $844D DEFB $FF,$80,$00,$00,$00,$07,$FF
 $8454 DEFB $FF,$C0,$00,$00,$00,$07,$FF
 $845B DEFB $FF,$C0,$00,$00,$00,$07,$FF
 $8462 DEFB $FF,$E0,$00,$00,$00,$07,$FF
 $8469 DEFB $FF,$E0,$00,$00,$00,$0F,$FF
 $8470 DEFB $FF,$F0,$00,$00,$00,$0F,$FF
 $8477 DEFB $FF,$F0,$00,$00,$00,$07,$FF
 $847E DEFB $FF,$F8,$00,$00,$00,$07,$FF
 $8485 DEFB $FF,$FC,$00,$00,$00,$07,$FF
 $848C DEFB $FF,$FF,$00,$0F,$F0,$07,$FF
 $8493 DEFB $FF,$FF,$80,$FF,$FF,$07,$FF
 $849A DEFB $FF,$FF,$83,$FF,$FF,$FF,$FF
 $84A1 DEFB $FF,$FF,$87,$FF,$FF,$FF,$FF
; Mask #N$02:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($84A8-$8629-$01-$38)(hand-mask-2) }
; UDGTABLE#
@label=Graphics_HandMask_02
 $84A8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $84AF DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $84B6 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $84BD DEFB $FF,$F8,$1F,$FF,$FF,$FF,$FF
 $84C4 DEFB $FF,$80,$03,$FF,$FF,$FF,$FF
 $84CB DEFB $FF,$80,$00,$3F,$FF,$FF,$FF
 $84D2 DEFB $FF,$80,$00,$0F,$FF,$FF,$FF
 $84D9 DEFB $FF,$00,$00,$03,$FF,$FF,$FF
 $84E0 DEFB $FE,$00,$00,$01,$FF,$FF,$FF
 $84E7 DEFB $FE,$00,$00,$00,$FF,$FF,$FF
 $84EE DEFB $FE,$00,$00,$00,$7F,$FF,$FF
 $84F5 DEFB $FE,$00,$00,$00,$3F,$FF,$FF
 $84FC DEFB $FE,$00,$00,$00,$1F,$FF,$FF
 $8503 DEFB $FE,$00,$00,$00,$0F,$FF,$FF
 $850A DEFB $FE,$00,$00,$00,$03,$FF,$FF
 $8511 DEFB $FE,$00,$00,$00,$01,$FF,$FF
 $8518 DEFB $C0,$00,$00,$00,$00,$FF,$FF
 $851F DEFB $80,$00,$00,$00,$00,$7F,$FF
 $8526 DEFB $80,$00,$00,$00,$00,$3F,$FF
 $852D DEFB $80,$00,$00,$00,$00,$3F,$FF
 $8534 DEFB $80,$0C,$00,$00,$00,$1F,$FF
 $853B DEFB $80,$00,$00,$00,$00,$1F,$FF
 $8542 DEFB $80,$00,$00,$00,$00,$0F,$FF
 $8549 DEFB $80,$00,$00,$00,$00,$0F,$FF
 $8550 DEFB $C0,$00,$00,$00,$00,$0F,$FF
 $8557 DEFB $E0,$00,$00,$00,$00,$07,$FF
 $855E DEFB $F8,$00,$00,$00,$00,$07,$FF
 $8565 DEFB $FC,$00,$00,$00,$00,$07,$FF
 $856C DEFB $FC,$00,$00,$00,$00,$07,$FF
 $8573 DEFB $FC,$00,$00,$00,$00,$07,$FF
 $857A DEFB $FE,$00,$00,$00,$00,$07,$FF
 $8581 DEFB $FE,$00,$00,$00,$00,$07,$FF
 $8588 DEFB $FE,$00,$00,$00,$00,$07,$FF
 $858F DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8596 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $859D DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85A4 DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85AB DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85B2 DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85B9 DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85C0 DEFB $FE,$00,$00,$00,$00,$03,$FF
 $85C7 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $85CE DEFB $FF,$00,$00,$00,$00,$03,$FF
 $85D5 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $85DC DEFB $FF,$80,$00,$00,$00,$07,$FF
 $85E3 DEFB $FF,$C0,$00,$00,$00,$07,$FF
 $85EA DEFB $FF,$E0,$00,$00,$00,$07,$FF
 $85F1 DEFB $FF,$E0,$00,$00,$00,$0F,$FF
 $85F8 DEFB $FF,$F0,$00,$00,$00,$0F,$FF
 $85FF DEFB $FF,$F8,$00,$00,$00,$1F,$FF
 $8606 DEFB $FF,$FC,$00,$00,$00,$1F,$FF
 $860D DEFB $FF,$FE,$00,$00,$00,$3F,$FF
 $8614 DEFB $FF,$FF,$00,$00,$00,$7F,$FF
 $861B DEFB $FF,$FF,$80,$00,$01,$FF,$FF
 $8622 DEFB $FF,$FF,$E0,$7F,$FF,$FF,$FF
 $8629 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
; Mask #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8630-$87B1-$01-$38)(hand-mask-3) }
; UDGTABLE#
@label=Graphics_HandMask_03
 $8630 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $8637 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $863E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF
 $8645 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $864C DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $8653 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $865A DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $8661 DEFB $FF,$80,$0F,$FF,$FF,$FF,$FF
 $8668 DEFB $FF,$80,$03,$FF,$FF,$FF,$FF
 $866F DEFB $FF,$00,$00,$3F,$FF,$FF,$FF
 $8676 DEFB $FE,$00,$00,$0F,$FF,$FF,$FF
 $867D DEFB $FE,$00,$00,$03,$FF,$FF,$FF
 $8684 DEFB $FE,$00,$00,$01,$FF,$FF,$FF
 $868B DEFB $FE,$00,$00,$00,$FF,$FF,$FF
 $8692 DEFB $FE,$00,$00,$00,$7F,$FF,$FF
 $8699 DEFB $FE,$00,$00,$00,$3F,$FF,$FF
 $86A0 DEFB $FE,$00,$00,$00,$1F,$FF,$FF
 $86A7 DEFB $FE,$00,$00,$00,$07,$FF,$FF
 $86AE DEFB $FE,$00,$00,$00,$01,$FF,$FF
 $86B5 DEFB $FE,$00,$00,$00,$00,$FF,$FF
 $86BC DEFB $F0,$04,$00,$00,$00,$7F,$FF
 $86C3 DEFB $C0,$04,$00,$00,$00,$3F,$FF
 $86CA DEFB $80,$04,$00,$00,$00,$3F,$FF
 $86D1 DEFB $80,$00,$00,$00,$00,$1F,$FF
 $86D8 DEFB $80,$00,$00,$00,$00,$0F,$FF
 $86DF DEFB $80,$00,$00,$00,$00,$0F,$FF
 $86E6 DEFB $80,$00,$00,$00,$00,$07,$FF
 $86ED DEFB $80,$00,$00,$00,$00,$07,$FF
 $86F4 DEFB $C0,$00,$00,$00,$00,$03,$FF
 $86FB DEFB $80,$00,$00,$00,$00,$03,$FF
 $8702 DEFB $00,$00,$00,$00,$00,$03,$FF
 $8709 DEFB $00,$00,$00,$00,$00,$03,$FF
 $8710 DEFB $00,$00,$00,$00,$00,$03,$FF
 $8717 DEFB $82,$00,$00,$00,$00,$03,$FF
 $871E DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8725 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $872C DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8733 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $873A DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8741 DEFB $FF,$00,$00,$00,$00,$07,$FF
 $8748 DEFB $FF,$00,$00,$00,$00,$07,$FF
 $874F DEFB $FF,$00,$00,$00,$00,$07,$FF
 $8756 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $875D DEFB $FF,$80,$00,$00,$00,$0F,$FF
 $8764 DEFB $FF,$80,$00,$00,$00,$0F,$FF
 $876B DEFB $FF,$C0,$00,$00,$00,$0F,$FF
 $8772 DEFB $FF,$C0,$00,$00,$00,$1F,$FF
 $8779 DEFB $FF,$C0,$00,$00,$00,$1F,$FF
 $8780 DEFB $FF,$E0,$00,$00,$00,$3F,$FF
 $8787 DEFB $FF,$F0,$00,$00,$00,$3F,$FF
 $878E DEFB $FF,$F0,$00,$00,$00,$7F,$FF
 $8795 DEFB $FF,$F8,$00,$00,$00,$FF,$FF
 $879C DEFB $FF,$FC,$00,$00,$00,$FF,$FF
 $87A3 DEFB $FF,$FE,$00,$00,$01,$FF,$FF
 $87AA DEFB $FF,$FF,$00,$00,$07,$FF,$FF
 $87B1 DEFB $FF,$FF,$E0,$00,$3F,$FF,$FF
; Mask #N$04:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($87B8-$8939-$01-$38)(hand-mask-4) }
; UDGTABLE#
@label=Graphics_HandMask_04
 $87B8 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87BF DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87C6 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87CD DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87D4 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87DB DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87E2 DEFB $FF,$8F,$FF,$FF,$FF,$FF,$FF
 $87E9 DEFB $FF,$07,$FF,$FF,$FF,$FF,$FF
 $87F0 DEFB $FE,$02,$0F,$FF,$FF,$FF,$FF
 $87F7 DEFB $FE,$00,$01,$FF,$FF,$FF,$FF
 $87FE DEFB $FE,$00,$00,$7F,$FF,$FF,$FF
 $8805 DEFB $FE,$00,$00,$0F,$FF,$FF,$FF
 $880C DEFB $FE,$00,$00,$03,$FF,$FF,$FF
 $8813 DEFB $FE,$00,$00,$00,$FF,$FF,$FF
 $881A DEFB $FE,$00,$00,$00,$3F,$FF,$FF
 $8821 DEFB $FE,$00,$00,$00,$1F,$FF,$FF
 $8828 DEFB $FE,$00,$00,$00,$07,$FF,$FF
 $882F DEFB $FE,$00,$00,$00,$03,$FF,$FF
 $8836 DEFB $FE,$00,$00,$00,$01,$FF,$FF
 $883D DEFB $FE,$00,$00,$00,$00,$7F,$FF
 $8844 DEFB $FE,$00,$00,$00,$00,$3F,$FF
 $884B DEFB $FE,$00,$00,$00,$00,$1F,$FF
 $8852 DEFB $F0,$00,$00,$00,$00,$1F,$FF
 $8859 DEFB $C0,$00,$00,$00,$00,$0F,$FF
 $8860 DEFB $80,$00,$04,$00,$00,$0F,$FF
 $8867 DEFB $00,$00,$02,$00,$00,$07,$FF
 $886E DEFB $00,$00,$01,$00,$00,$07,$FF
 $8875 DEFB $00,$00,$01,$00,$00,$07,$FF
 $887C DEFB $00,$00,$01,$00,$00,$03,$FF
 $8883 DEFB $00,$00,$00,$00,$00,$03,$FF
 $888A DEFB $00,$00,$00,$00,$00,$03,$FF
 $8891 DEFB $80,$00,$00,$00,$00,$03,$FF
 $8898 DEFB $80,$00,$00,$00,$00,$03,$FF
 $889F DEFB $00,$00,$00,$00,$00,$03,$FF
 $88A6 DEFB $00,$00,$00,$00,$00,$03,$FF
 $88AD DEFB $00,$00,$00,$00,$00,$03,$FF
 $88B4 DEFB $00,$00,$00,$00,$00,$03,$FF
 $88BB DEFB $83,$00,$00,$00,$00,$07,$FF
 $88C2 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $88C9 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $88D0 DEFB $FF,$80,$00,$00,$00,$07,$FF
 $88D7 DEFB $FF,$80,$00,$00,$00,$0F,$FF
 $88DE DEFB $FF,$80,$00,$00,$00,$0F,$FF
 $88E5 DEFB $FF,$C0,$00,$00,$00,$0F,$FF
 $88EC DEFB $FF,$C0,$00,$00,$00,$1F,$FF
 $88F3 DEFB $FF,$E0,$00,$00,$00,$1F,$FF
 $88FA DEFB $FF,$E0,$00,$00,$00,$3F,$FF
 $8901 DEFB $FF,$F0,$00,$00,$00,$3F,$FF
 $8908 DEFB $FF,$F0,$00,$00,$00,$7F,$FF
 $890F DEFB $FF,$F8,$00,$00,$00,$7F,$FF
 $8916 DEFB $FF,$FC,$00,$00,$00,$FF,$FF
 $891D DEFB $FF,$FE,$00,$00,$01,$FF,$FF
 $8924 DEFB $FF,$FF,$80,$00,$07,$FF,$FF
 $892B DEFB $FF,$FF,$C0,$00,$1F,$FF,$FF
 $8932 DEFB $FF,$FF,$F0,$01,$FF,$FF,$FF
 $8939 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF

; Graphics: Hand (No Dart)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8940-$8AC1-$01-$38)(hand-no-dart) }
; UDGTABLE#
@label=Graphics_HandNoDart
b$8940 DEFB $00,$00,$00,$00,$00,$00,$00
 $8947 DEFB $00,$0F,$C0,$00,$00,$00,$00
 $894E DEFB $00,$14,$79,$E0,$00,$00,$00
 $8955 DEFB $00,$13,$86,$18,$00,$00,$00
 $895C DEFB $00,$10,$09,$84,$00,$00,$00
 $8963 DEFB $00,$08,$0E,$9B,$80,$00,$00
 $896A DEFB $00,$06,$80,$82,$40,$00,$00
 $8971 DEFB $00,$03,$43,$C1,$20,$00,$00
 $8978 DEFB $00,$00,$A0,$41,$18,$00,$00
 $897F DEFB $00,$01,$40,$61,$16,$00,$00
 $8986 DEFB $00,$01,$60,$50,$89,$80,$00
 $898D DEFB $00,$00,$C0,$60,$88,$40,$00
 $8994 DEFB $00,$00,$40,$50,$C4,$A0,$00
 $899B DEFB $00,$00,$40,$60,$86,$50,$00
 $89A2 DEFB $00,$00,$40,$50,$45,$10,$00
 $89A9 DEFB $00,$00,$40,$60,$42,$08,$00
 $89B0 DEFB $00,$00,$40,$50,$63,$08,$00
 $89B7 DEFB $00,$00,$81,$A8,$42,$88,$00
 $89BE DEFB $00,$00,$80,$20,$61,$04,$00
 $89C5 DEFB $00,$00,$88,$40,$41,$84,$00
 $89CC DEFB $00,$01,$10,$14,$21,$44,$00
 $89D3 DEFB $00,$01,$08,$08,$20,$84,$00
 $89DA DEFB $00,$01,$10,$04,$21,$12,$00
 $89E1 DEFB $3E,$01,$08,$08,$00,$22,$00
 $89E8 DEFB $41,$81,$14,$04,$10,$32,$00
 $89EF DEFB $70,$41,$08,$02,$10,$22,$00
 $89F6 DEFB $48,$20,$84,$04,$10,$62,$00
 $89FD DEFB $24,$10,$80,$00,$00,$22,$00
 $8A04 DEFB $14,$08,$80,$00,$10,$42,$00
 $8A0B DEFB $08,$08,$81,$00,$00,$24,$00
 $8A12 DEFB $09,$04,$80,$00,$10,$44,$00
 $8A19 DEFB $0A,$05,$00,$00,$10,$A4,$00
 $8A20 DEFB $04,$05,$00,$00,$10,$C4,$00
 $8A27 DEFB $03,$03,$00,$00,$00,$A4,$00
 $8A2E DEFB $02,$03,$00,$40,$00,$44,$00
 $8A35 DEFB $01,$01,$00,$00,$00,$84,$00
 $8A3C DEFB $01,$03,$80,$00,$10,$84,$00
 $8A43 DEFB $01,$01,$00,$20,$10,$04,$00
 $8A4A DEFB $01,$02,$80,$10,$11,$04,$00
 $8A51 DEFB $00,$A1,$00,$20,$00,$24,$00
 $8A58 DEFB $00,$90,$80,$30,$01,$08,$00
 $8A5F DEFB $00,$88,$00,$18,$00,$28,$00
 $8A66 DEFB $00,$54,$00,$14,$00,$48,$00
 $8A6D DEFB $00,$48,$00,$08,$00,$A8,$00
 $8A74 DEFB $00,$24,$00,$04,$00,$68,$00
 $8A7B DEFB $00,$10,$00,$02,$00,$A8,$00
 $8A82 DEFB $00,$08,$40,$00,$01,$48,$00
 $8A89 DEFB $00,$04,$20,$00,$00,$C8,$00
 $8A90 DEFB $00,$04,$54,$00,$00,$50,$00
 $8A97 DEFB $00,$02,$38,$00,$00,$10,$00
 $8A9E DEFB $00,$01,$14,$0F,$FC,$10,$00
 $8AA5 DEFB $00,$00,$C8,$F0,$03,$C8,$00
 $8AAC DEFB $00,$00,$23,$00,$00,$38,$00
 $8AB3 DEFB $00,$00,$14,$00,$00,$00,$00
 $8ABA DEFB $00,$00,$18,$00,$00,$00,$00
 $8AC1 DEFB $00,$00,$00,$00,$00,$00,$00
; Mask:
; #UDGTABLE(default)
; { #UDGARRAY$07,attr=$70,scale=$04,step=$07($8AC8-$8C49-$01-$38)(hand-mask-no-dart) }
; UDGTABLE#
@label=Graphics_HandMaskNoDart
 $8AC8 DEFB $FF,$E0,$1F,$FF,$FF,$FF,$FF
 $8ACF DEFB $FF,$C0,$00,$0F,$FF,$FF,$FF
 $8AD6 DEFB $FF,$C0,$00,$03,$FF,$FF,$FF
 $8ADD DEFB $FF,$C0,$00,$01,$FF,$FF,$FF
 $8AE4 DEFB $FF,$C0,$00,$00,$7F,$FF,$FF
 $8AEB DEFB $FF,$C0,$00,$00,$1F,$FF,$FF
 $8AF2 DEFB $FF,$E0,$00,$00,$0F,$FF,$FF
 $8AF9 DEFB $FF,$F0,$00,$00,$03,$FF,$FF
 $8B00 DEFB $FF,$F8,$00,$00,$00,$FF,$FF
 $8B07 DEFB $FF,$FC,$00,$00,$00,$3F,$FF
 $8B0E DEFB $FF,$FC,$00,$00,$00,$1F,$FF
 $8B15 DEFB $FF,$FC,$00,$00,$00,$0F,$FF
 $8B1C DEFB $FF,$FE,$00,$00,$00,$07,$FF
 $8B23 DEFB $FF,$FF,$00,$00,$00,$07,$FF
 $8B2A DEFB $FF,$FF,$00,$00,$00,$03,$FF
 $8B31 DEFB $FF,$FF,$00,$00,$00,$03,$FF
 $8B38 DEFB $FF,$FE,$00,$00,$00,$03,$FF
 $8B3F DEFB $FF,$FE,$00,$00,$00,$01,$FF
 $8B46 DEFB $FF,$FE,$00,$00,$00,$01,$FF
 $8B4D DEFB $FF,$FC,$00,$00,$00,$01,$FF
 $8B54 DEFB $FF,$FC,$00,$00,$00,$01,$FF
 $8B5B DEFB $FF,$FC,$00,$00,$00,$00,$FF
 $8B62 DEFB $80,$FC,$00,$00,$00,$00,$FF
 $8B69 DEFB $00,$3C,$00,$00,$00,$00,$FF
 $8B70 DEFB $00,$1C,$00,$00,$00,$00,$FF
 $8B77 DEFB $00,$0C,$00,$00,$00,$00,$FF
 $8B7E DEFB $00,$04,$00,$00,$00,$00,$FF
 $8B85 DEFB $00,$02,$00,$00,$00,$00,$FF
 $8B8C DEFB $80,$02,$00,$00,$00,$00,$FF
 $8B93 DEFB $C0,$00,$00,$00,$00,$00,$FF
 $8B9A DEFB $E0,$00,$00,$00,$00,$01,$FF
 $8BA1 DEFB $E0,$00,$00,$00,$00,$01,$FF
 $8BA8 DEFB $E0,$00,$00,$00,$00,$01,$FF
 $8BAF DEFB $F0,$00,$00,$00,$00,$01,$FF
 $8BB6 DEFB $F8,$00,$00,$00,$00,$01,$FF
 $8BBD DEFB $F8,$00,$00,$00,$00,$01,$FF
 $8BC4 DEFB $FC,$00,$00,$00,$00,$01,$FF
 $8BCB DEFB $FC,$00,$00,$00,$00,$01,$FF
 $8BD2 DEFB $FC,$00,$00,$00,$00,$01,$FF
 $8BD9 DEFB $FC,$00,$00,$00,$00,$01,$FF
 $8BE0 DEFB $FE,$00,$00,$00,$00,$01,$FF
 $8BE7 DEFB $FE,$00,$00,$00,$00,$03,$FF
 $8BEE DEFB $FE,$00,$00,$00,$00,$03,$FF
 $8BF5 DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8BFC DEFB $FF,$00,$00,$00,$00,$03,$FF
 $8C03 DEFB $FF,$80,$00,$00,$00,$03,$FF
 $8C0A DEFB $FF,$C0,$00,$00,$00,$03,$FF
 $8C11 DEFB $FF,$E0,$00,$00,$00,$03,$FF
 $8C18 DEFB $FF,$F0,$00,$00,$00,$03,$FF
 $8C1F DEFB $FF,$F0,$00,$00,$00,$07,$FF
 $8C26 DEFB $FF,$F8,$00,$00,$00,$03,$FF
 $8C2D DEFB $FF,$FC,$00,$00,$00,$03,$FF
 $8C34 DEFB $FF,$FE,$00,$07,$F8,$03,$FF
 $8C3B DEFB $FF,$FF,$80,$7F,$FF,$83,$FF
 $8C42 DEFB $FF,$FF,$C1,$FF,$FF,$FF,$FF
 $8C49 DEFB $FF,$FF,$C3,$FF,$FF,$FF,$FF

; Graphics: Thrown Dart
;
; Graphic data, arranged as:
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$70,scale=$04,step=$03($8C50-$8CDC-$01-$18)(thrown-dart) }
; UDGTABLE#
@label=Graphics_ThrownDart
b$8C50 DEFB $01,$00,$00
 $8C53 DEFB $01,$00,$00
 $8C56 DEFB $01,$00,$00
 $8C59 DEFB $01,$00,$00
 $8C5C DEFB $01,$00,$00
 $8C5F DEFB $03,$80,$00
 $8C62 DEFB $07,$C0,$00
 $8C65 DEFB $FF,$FE,$00
 $8C68 DEFB $07,$C0,$00
 $8C6B DEFB $03,$80,$00
 $8C6E DEFB $01,$00,$00
 $8C71 DEFB $01,$00,$00
 $8C74 DEFB $01,$00,$00
 $8C77 DEFB $01,$00,$00
 $8C7A DEFB $01,$00,$00
 $8C7D DEFB $00,$00,$00
 $8C80 DEFB $00,$00,$00
 $8C83 DEFB $00,$00,$00
 $8C86 DEFB $01,$00,$00
 $8C89 DEFB $01,$00,$00
 $8C8C DEFB $01,$00,$00
 $8C8F DEFB $01,$00,$00
 $8C92 DEFB $03,$80,$00
 $8C95 DEFB $3F,$F8,$00
 $8C98 DEFB $03,$80,$00
 $8C9B DEFB $01,$00,$00
 $8C9E DEFB $01,$00,$00
 $8CA1 DEFB $01,$00,$00
 $8CA4 DEFB $01,$00,$00
 $8CA7 DEFB $00,$00,$00
 $8CAA DEFB $00,$00,$00
 $8CAD DEFB $00,$00,$00
 $8CB0 DEFB $00,$00,$00
 $8CB3 DEFB $00,$00,$00
 $8CB6 DEFB $00,$00,$00
 $8CB9 DEFB $01,$00,$00
 $8CBC DEFB $01,$00,$00
 $8CBF DEFB $01,$00,$00
 $8CC2 DEFB $03,$80,$00
 $8CC5 DEFB $1F,$F0,$00
 $8CC8 DEFB $03,$80,$00
 $8CCB DEFB $01,$00,$00
 $8CCE DEFB $01,$00,$00
 $8CD1 DEFB $01,$00,$00
 $8CD4 DEFB $00,$00,$00
 $8CD7 DEFB $00,$00,$00
 $8CDA DEFB $00,$00,$00
 $8CDD DEFB $00,$00,$00
; Mask:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$70,scale=$04,step=$03($8CE0-$8D6D-$01-$18)(mask-thrown-dart) }
; UDGTABLE#
@label=Graphics_Mask_ThrownDart
 $8CE0 DEFB $FC,$7F,$FF
 $8CE3 DEFB $FC,$7F,$FF
 $8CE6 DEFB $FC,$7F,$FF
 $8CE9 DEFB $FC,$7F,$FF
 $8CEC DEFB $F8,$3F,$FF
 $8CEF DEFB $F0,$1F,$FF
 $8CF2 DEFB $00,$00,$FF
 $8CF5 DEFB $00,$00,$FF
 $8CF8 DEFB $00,$00,$FF
 $8CFB DEFB $F0,$1F,$FF
 $8CFE DEFB $F8,$3F,$FF
 $8D01 DEFB $FC,$7F,$FF
 $8D04 DEFB $FC,$7F,$FF
 $8D07 DEFB $FC,$7F,$FF
 $8D0A DEFB $FC,$7F,$FF
 $8D0D DEFB $FC,$7F,$FF
 $8D10 DEFB $FF,$FF,$FF
 $8D13 DEFB $FC,$7F,$FF
 $8D16 DEFB $FC,$7F,$FF
 $8D19 DEFB $FC,$7F,$FF
 $8D1C DEFB $FC,$7F,$FF
 $8D1F DEFB $F8,$3F,$FF
 $8D22 DEFB $80,$03,$FF
 $8D25 DEFB $80,$03,$FF
 $8D28 DEFB $80,$03,$FF
 $8D2B DEFB $F8,$3F,$FF
 $8D2E DEFB $FC,$7F,$FF
 $8D31 DEFB $FC,$7F,$FF
 $8D34 DEFB $FC,$7F,$FF
 $8D37 DEFB $FC,$7F,$FF
 $8D3A DEFB $FF,$FF,$FF
 $8D3D DEFB $FF,$FF,$FF
 $8D40 DEFB $FF,$FF,$FF
 $8D43 DEFB $FF,$FF,$FF
 $8D46 DEFB $FC,$7F,$FF
 $8D49 DEFB $FC,$7F,$FF
 $8D4C DEFB $FC,$7F,$FF
 $8D4F DEFB $F8,$3F,$FF
 $8D52 DEFB $C0,$07,$FF
 $8D55 DEFB $C0,$07,$FF
 $8D58 DEFB $C0,$07,$FF
 $8D5B DEFB $F8,$3F,$FF
 $8D5E DEFB $FC,$7F,$FF
 $8D61 DEFB $FC,$7F,$FF
 $8D64 DEFB $FC,$7F,$FF
 $8D67 DEFB $FF,$FF,$FF
 $8D6A DEFB $FF,$FF,$FF
 $8D6D DEFB $FF,$FF,$FF

; Unused
u$8D70 DEFB $00,$00

; Game Entry Point Alias
@label=GameEntryPointAlias
c$8D72 JP $9183      ; Jump to #R$9183.

; Custom Font
@label=CustomFont
b$8D75 DEFS $80
 $8DF5 DEFB $7C,$8E,$8E,$8E,$8E,$8E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8DFD DEFB $78,$38,$38,$38,$38,$38,$38,$00 ; #UDG(#PC,attr=$47)
 $8E05 DEFB $7C,$FE,$8E,$0E,$3C,$60,$FE,$00 ; #UDG(#PC,attr=$47)
 $8E0D DEFB $7C,$8E,$0E,$3C,$0E,$8E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E15 DEFB $3C,$5C,$9C,$9C,$9C,$FE,$1C,$00 ; #UDG(#PC,attr=$47)
 $8E1D DEFB $FE,$80,$BC,$FE,$0E,$8E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E25 DEFB $3C,$60,$FC,$FE,$E6,$E6,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E2D DEFB $7E,$FE,$06,$08,$30,$70,$70,$00 ; #UDG(#PC,attr=$47)
 $8E35 DEFB $7C,$CE,$CE,$7C,$CE,$CE,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E3D DEFB $7C,$FE,$CE,$CE,$7E,$0E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E45 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$47)
 $8E4D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$47)
 $8E55 DEFB $00,$00,$00,$00,$00,$00,$C0,$C0 ; #UDG(#PC,attr=$47)
 $8E5D DEFB $38,$44,$BA,$AA,$B2,$AA,$44,$38 ; #UDG(#PC,attr=$47)
 $8E65 DEFB $3C,$42,$99,$A1,$A1,$99,$42,$3C ; #UDG(#PC,attr=$47)
 $8E6D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$47)
 $8E75 DEFB $00,$00,$00,$FC,$FC,$00,$00,$00 ; #UDG(#PC,attr=$47)
 $8E7D DEFB $7C,$8E,$8E,$FE,$8E,$8E,$8E,$00 ; #UDG(#PC,attr=$47)
 $8E85 DEFB $7C,$E2,$E2,$FC,$E2,$E2,$FC,$00 ; #UDG(#PC,attr=$47)
 $8E8D DEFB $7C,$E2,$E0,$E0,$E0,$E2,$7C,$00 ; #UDG(#PC,attr=$47)
 $8E95 DEFB $7C,$E2,$E2,$E2,$E2,$E2,$FC,$00 ; #UDG(#PC,attr=$47)
 $8E9D DEFB $7E,$E0,$E0,$FE,$E0,$E0,$FE,$00 ; #UDG(#PC,attr=$47)
 $8EA5 DEFB $7E,$E0,$E0,$FE,$E0,$E0,$E0,$00 ; #UDG(#PC,attr=$47)
 $8EAD DEFB $7C,$E6,$E0,$EE,$E2,$E2,$7C,$00 ; #UDG(#PC,attr=$47)
 $8EB5 DEFB $62,$E2,$E2,$FE,$E2,$E2,$E2,$00 ; #UDG(#PC,attr=$47)
 $8EBD DEFB $18,$38,$38,$38,$38,$38,$38,$00 ; #UDG(#PC,attr=$47)
 $8EC5 DEFB $06,$0E,$0E,$0E,$0E,$8E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8ECD DEFB $62,$E4,$E8,$F0,$E8,$E4,$E2,$00 ; #UDG(#PC,attr=$47)
 $8ED5 DEFB $60,$E0,$E0,$E0,$E0,$E0,$FE,$00 ; #UDG(#PC,attr=$47)
 $8EDD DEFB $7C,$FE,$EA,$EA,$EA,$EA,$EA,$00 ; #UDG(#PC,attr=$47)
 $8EE5 DEFB $72,$F2,$FA,$EE,$E6,$E6,$E2,$00 ; #UDG(#PC,attr=$47)
 $8EED DEFB $7C,$E2,$E2,$E2,$E2,$E2,$7C,$00 ; #UDG(#PC,attr=$47)
 $8EF5 DEFB $7C,$E2,$E2,$E2,$FC,$E0,$E0,$00 ; #UDG(#PC,attr=$47)
 $8EFD DEFB $7C,$E2,$E2,$E2,$EA,$E6,$7E,$00 ; #UDG(#PC,attr=$47)
 $8F05 DEFB $7C,$E2,$E2,$FC,$E2,$E2,$E2,$00 ; #UDG(#PC,attr=$47)
 $8F0D DEFB $7C,$E2,$E0,$7C,$0E,$8E,$7C,$00 ; #UDG(#PC,attr=$47)
 $8F15 DEFB $FE,$38,$38,$38,$38,$38,$38,$00 ; #UDG(#PC,attr=$47)
 $8F1D DEFB $62,$E2,$E2,$E2,$E2,$E2,$7C,$00 ; #UDG(#PC,attr=$47)
 $8F25 DEFB $62,$E2,$E2,$E2,$E6,$FC,$78,$00 ; #UDG(#PC,attr=$47)
 $8F2D DEFB $6A,$EA,$EA,$EA,$EA,$EA,$7C,$00 ; #UDG(#PC,attr=$47)
 $8F35 DEFB $C6,$EE,$7C,$38,$7C,$EE,$C6,$00 ; #UDG(#PC,attr=$47)
 $8F3D DEFB $E2,$E2,$E2,$7C,$38,$38,$38,$00 ; #UDG(#PC,attr=$47)
 $8F45 DEFB $FE,$0E,$0C,$38,$70,$F0,$FE,$00 ; #UDG(#PC,attr=$47)
 $8F4D DEFB $18,$38,$38,$38,$38,$00,$38,$00 ; #UDG(#PC,attr=$47)
 $8F55 DEFB $C0,$00,$C0,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$47)
 $8F5D DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$47)

; Data block at 8F65
b$8F65 DEFB $20
 $8F66 DEFB $07
 $8F67 DEFB $01,$06,$02
 $8F6A DEFB $05,$02,$04
 $8F6D DEFB $03,$03,$04
 $8F70 DEFB $03,$05,$02
 $8F73 DEFB $06,$02,$07
 $8F76 DEFB $02,$08,$02
 $8F79 DEFB $09,$02,$0A
 $8F7C DEFB $03,$0C,$03
 $8F7F DEFB $0D,$04,$0E
 $8F82 DEFB $05,$0E,$06
 $8F85 DEFB $0F,$07,$0F
 $8F88 DEFB $08,$0E,$09
 $8F8B DEFB $0E,$0A,$0D
 $8F8E DEFB $0B,$0C,$0B
 $8F91 DEFB $0B,$0C,$0A
 $8F94 DEFB $0C,$09,$0C
 $8F97 DEFB $08,$0C,$07
 $8F9A DEFB $0C,$06,$0C
 $8F9D DEFB $05,$0B,$04
 $8FA0 DEFB $0B,$03,$0A
 $8FA3 DEFB $02,$09,$01

; Data block at 8FA6
b$8FA6 DEFB $0F
 $8FA7 DEFB $07
 $8FA8 DEFB $02,$08,$01,$08,$02,$08,$03,$08
 $8FB0 DEFB $04,$08,$05,$07,$06,$07,$07,$07
 $8FB8 DEFB $08,$07,$09,$07,$0A,$06,$0B,$06
 $8FC0 DEFB $0C,$06,$0D,$06,$0E

; Data block at 8FC5
b$8FC5 DEFB $1D,$02,$04,$02,$03,$03,$02,$04
 $8FCD DEFB $01,$05,$01,$06,$01,$07,$01,$08
 $8FD5 DEFB $01,$0A,$02,$0B,$03,$0B,$04,$0B
 $8FDD DEFB $05,$0A,$06,$09,$07,$08,$08,$07
 $8FE5 DEFB $09,$06,$0A,$05,$0B,$04,$0C,$03
 $8FED DEFB $0D,$03,$0E,$04,$0E,$05,$0E,$06
 $8FF5 DEFB $0E,$07,$0E,$09,$0D,$0A,$0D,$0B
 $8FFD DEFB $0D,$0C,$0D

; Data block at 9000
b$9000 DEFB $1D,$02,$04,$02,$03,$03,$02,$04
 $9008 DEFB $01,$05,$01,$06,$01,$07,$01,$08
 $9010 DEFB $01,$0A,$02,$0B,$03,$0B,$04,$0B
 $9018 DEFB $05,$0A,$06,$09,$07,$0B,$08,$0C
 $9020 DEFB $09,$0C,$0A,$0C,$0B,$0C,$0C,$0B
 $9028 DEFB $0D,$0A,$0E,$09,$0E,$08,$0E,$07
 $9030 DEFB $0E,$06,$0E,$05,$0E,$04,$0E,$03
 $9038 DEFB $0D,$02,$0C

; Data block at 903B
b$903B DEFB $17,$08,$01,$07,$03,$06,$05,$05
 $9043 DEFB $07,$04,$09,$03,$0B,$03,$0B,$04
 $904B DEFB $0B,$05,$0B,$06,$0B,$07,$0B,$08
 $9053 DEFB $0B,$09,$0A,$0A,$0A,$0B,$0A,$0C
 $905B DEFB $0A,$0D,$0A,$0A,$07,$09,$09,$09
 $9063 DEFB $0A,$08,$0B,$08,$0C,$07,$0E

; Data block at 906A
b$906A DEFB $1E,$0B,$01,$0A,$01,$09,$01,$08
 $9072 DEFB $01,$07,$01,$06,$01,$05,$01,$04
 $907A DEFB $02,$03,$03,$02,$04,$02,$05,$03
 $9082 DEFB $05,$04,$05,$06,$05,$07,$05,$08
 $908A DEFB $05,$09,$05,$0B,$06,$0C,$08,$0C
 $9092 DEFB $09,$0C,$0A,$0C,$0B,$0B,$0D,$09
 $909A DEFB $0E,$08,$0E,$07,$0E,$06,$0E,$05
 $90A2 DEFB $0E,$03,$0D,$02,$0C

; Data block at 90A7
b$90A7 DEFB $18,$08,$01,$07,$01,$06,$01,$04
 $90AF DEFB $02,$03,$04,$02,$06,$02,$07,$02
 $90B7 DEFB $09,$02,$0A,$03,$0C,$04,$0D,$05
 $90BF DEFB $0E,$06,$0E,$07,$0E,$08,$0E,$09
 $90C7 DEFB $0D,$0A,$0C,$0B,$0A,$0A,$08,$09
 $90CF DEFB $07,$07,$06,$06,$06,$04,$07,$03
 $90D7 DEFB $08

; Data block at 90D8
b$90D8 DEFB $14,$03,$01,$04,$01,$06,$02,$07
 $90E0 DEFB $02,$08,$02,$0A,$01,$0B,$01,$0C
 $90E8 DEFB $01,$0B,$03,$0B,$04,$0A,$05,$0A
 $90F0 DEFB $06,$09,$07,$09,$08,$08,$09,$08
 $90F8 DEFB $0A,$07,$0B,$07,$0C,$06,$0D,$06
 $9100 DEFB $0E

; Data block at 9101
b$9101 DEFB $24,$08,$01,$07,$01,$06,$01,$05
 $9109 DEFB $01,$04,$02,$03,$03,$03,$04,$04
 $9111 DEFB $05,$05,$06,$06,$07,$07,$07,$08
 $9119 DEFB $07,$09,$08,$0A,$08,$0B,$09,$0C
 $9121 DEFB $0B,$0C,$0C,$0B,$0D,$09,$0E,$08
 $9129 DEFB $0E,$07,$0E,$06,$0E,$05,$0E,$03
 $9131 DEFB $0D,$02,$0C,$02,$0B,$03,$09,$04
 $9139 DEFB $09,$06,$07,$07,$07,$08,$07,$0A
 $9141 DEFB $05,$0B,$04,$0B,$03,$0A,$02,$09
 $9149 DEFB $01

; Data block at 914A
b$914A DEFB $1C,$09,$02,$07,$01,$06,$01,$05
 $9152 DEFB $01,$04,$02,$03,$03,$03,$04,$03
 $915A DEFB $05,$04,$06,$05,$07,$06,$07,$07
 $9162 DEFB $07,$08,$07,$09,$06,$0A,$05,$0A
 $916A DEFB $04,$0B,$02,$0B,$01,$0B,$01,$0B
 $9172 DEFB $02,$0A,$04,$0A,$05,$09,$07,$09
 $917A DEFB $08,$08,$0A,$08,$0B,$07,$0D,$07
 $9182 DEFB $0E

; Game Entry Point
;
; Used by the routine at #R$8D72.
@label=GameEntryPoint
c$9183 XOR A         ; {Write #N$00 to; #LIST
 $9184 LD ($99F5),A  ; { *#R$99F5 }
 $9187 LD ($99F6),A  ; { *#R$99F6 }
                     ; LIST#}
 $918A DI            ; Disable interrupts.
 $918B EXX           ; Switch to the shadow registers.
 $918C PUSH HL       ; Stash #REGhl on the stack.
 $918D EXX           ; Switch back to the normal registers.
 $918E LD ($F827),SP ; Write #REGsp to *#R$F827.
 $9192 CALL $95A9    ; Call #R$95A9.
; Clear the screen buffer.
 $9195 CALL $964C    ; Call #R$964C.
 $9198 DEFB $01      ; #R$98CC.
 $9199 DEFB $00      ; #R$97D5(CLEAR SCREEN).
 $919A DEFB $1A      ; {#R$98A8.
 $919B DEFW $8D75    ; }
 $919D DEFB $FF      ; Terminator.
 $919E JP $933F      ; Jump to #R$933F.

; Print Score
;
; Used by the routine at #R$9A86.
@label=Print_Score
c$91A1 CALL $964C       ; Call #R$964C.
 $91A4 DEFB $16,$00,$00 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $91A7 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $91A9 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
@label=Messaging_Score
 $91AB DEFM "SC:000000" ; #FONT#(:(#STR(#PC,$04,$09)))$8D75,attr=$47(score)
 $91B4 DEFB $FF         ; Terminator.
 $91B5 RET              ; Return.

; Set Attribute Buffer INK: WHITE
;
; Used by the routines at #R$933F and #R$94F8.
;
; .
;
; For administration pages.
@label=SetAttributeBuffer_WhiteInk
c$91B6 LD HL,$5800   ; #REGhl=#N$5800 (attribute buffer location).
 $91B9 LD DE,$5801   ; #REGde=#N$5801 (attribute buffer location).
 $91BC LD BC,$02FF   ; #REGbc=#N$02FF.
 $91BF LD (HL),$47   ; Write #COLOUR$47 to *#REGhl.
 $91C1 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $91C2 LDIR          ; Copy another #N$02FF bytes from *#N$5800 to the end of the
                     ; attribute buffer.
 $91C4 RET           ; Return.

; Print Key
;
; Used by the routine at #R$9569.
@label=Print_Key
c$91C5 PUSH AF       ; Stash #REGaf on the stack.
 $91C6 CALL $964C    ; Call #R$964C.
 $91C9 DEFM $07      ;
 $91CA DEFB $FF      ; Terminator.
 $91CB POP AF        ; Restore #REGaf from the stack.
 $91CC CP $0D        ; {Jump to #R$91F3 if #REGa is equal to #N$0D.
 $91CE JR Z,$91F3    ; }
 $91D0 CP $20        ; {Jump to #R$91FE if #REGa is equal to #N$20.
 $91D2 JR Z,$91FE    ; }
 $91D4 CP $04        ; {Jump to #R$9209 if #REGa is greater than #N$04.
 $91D6 JP NC,$9209   ; }
 $91D9 CP $01        ; {Jump to #R$91E9 if #REGa is equal to #N$01.
 $91DB JR Z,$91E9    ; }
; Continue on to #R$91DD.

; Print "Symbol Shift"
@label=Print_SymbolShift
c$91DD CALL $964C     ; Call #R$964C.
 $91E0 DEFM "SYB SH " ; #FONT#(:(#STR#(#PC),$0B($b==$FF)))$8D75,attr=$47(symbol-shift).
 $91E7 DEFB $FF       ; Terminator.
 $91E8 RET            ; Return.

; Print "Caps Lock"
;
; Used by the routine at #R$91C5.
@label=Print_CapsLock
c$91E9 CALL $964C    ; Call #R$964C.
 $91EC DEFM "CAPS "  ; #FONT#(:(#STR#(#PC),$0B($b==$FF)))$8D75,attr=$47(caps-lock).
 $91F1 DEFB $FF      ; Terminator.
 $91F2 RET           ; Return.

; Print "Enter"
;
; Used by the routine at #R$91C5.
@label=Print_Enter
c$91F3 CALL $964C    ; Call #R$964C.
 $91F6 DEFM "ENTER " ; #FONT#(:(#STR#(#PC),$0B($b==$FF)))$8D75,attr=$47(enter).
 $91FC DEFB $FF      ; Terminator.
 $91FD RET           ; Return.

; Print "Space"
;
; Used by the routine at #R$91C5.
@label=Print_Space
c$91FE CALL $964C    ; Call #R$964C.
 $9201 DEFM "SPACE " ; #FONT#(:(#STR#(#PC),$0B($b==$FF)))$8D75,attr=$47(space).
 $9207 DEFB $FF      ; Terminator.
 $9208 RET           ; Return.

; Print " " (Space)
;
; Used by the routine at #R$91C5.
@label=Print_ASCII_Space
c$9209 CALL $9736    ; Call #R$9736.
 $920C LD A,$20      ; #REGa=ASCII space character (#N$20).
 $920E JP $9736      ; Jump to #R$9736.

; Routine at 9211
c$9211 CALL $965F    ; Call #R$965F.
 $9214 OR A          ; {Jump to #R$9211 if #REGa is zero.
 $9215 JR Z,$9211    ; }
 $9217 RET           ; Return.

; Messaging: Header/ Footer
;
; Used by the routines at #R$933F and #R$94F8.
;
; .
;
; #PUSHS #SIM(start=$9218,stop=$9252)
; #UDGTABLE(default)
;   { #SCR$01(header-footer) }
; UDGTABLE# #POPS
@label=Messaging_HeaderFooter
c$9218 CALL $964C                    ; Call #R$9736.
 $921B DEFB $16,$01,$05              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
 $921E DEFM "ONE HUNDRED AND EIGHTY" ; #FONT#(:(#STR(#PC,$04,$16)))$8D75,attr=$47(one-hundred-and-eighty).
 $9234 DEFB $16,$17,$05              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
 $9237 DEFM ">"                      ; #FONT#(:(#STR#(#PC,$02,$01)))$8D75,attr=$47(copyright).
 $9238 DEFB $16,$17,$06              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
 $923B DEFM "1986 MASTERTRONIC LTD." ; #FONT#(:(#STR#(#PC),$0B($b==$FF)))$8D75,attr=$47(mastertronic).
 $9251 DEFB $FF                      ; Terminator.
 $9252 RET                           ; Return.

; Reveal Dartboard
;
; Used by the routine at #R$933F.
;
; DE Dart pointer co-ordinates
;
; Creates a "zipper" transition effect that reveals the dartboard from
; the selected menu item expanding both upwards and downwards simultaneously.
; .
; The zipper trails behind the dartboard pointer.
@label=RevealDartboard
c$9253 DEC E         ; Move one position left to start the reveal.
 $9254 LD ($9AB9),DE ; Store this position to *#R$9AB9.
 $9258 INC D         ; Move one position down.
 $9259 LD ($9ABB),DE ; Store this position to *#R$9ABB.
; Process the upper half of the reveal.
@label=RevealDartboard_Loop
*$925D LD DE,($9AB9) ; #REGde=*#R$9AB9.
 $9261 LD A,E        ; {Jump to #R$92A6 if #REGe becomes negative (if it's gone past the
 $9262 AND A         ; left edge).
 $9263 JP M,$92A6    ; }
 $9266 PUSH DE       ; Stash the upper position on the stack.
 $9267 LD A,D        ; {Jump to #R$927C if #REGd becomes negative (if it's gone past the
 $9268 AND A         ; top of the screen).
 $9269 JP M,$927C    ; }
; Set up the right-shifting mask for the upper reveal.
; .
; Self-modifying code;
@label=RevealDartboard_ModifyMaskForUpper
 $926C LD HL,$92C7   ; {Set the mask value to #N$FF at *#R$92C6(#N$92C7).
 $926F LD (HL),$FF   ; }
@label=RevealDartboard_ModifyToShiftRight
 $9271 LD HL,$92CD   ; {#HTML(Write <code>SRL #REGc</code> (#N$CB+#N$39) to
 $9274 LD (HL),$CB   ; *#R$92CD.)
 $9276 INC HL        ;
 $9277 LD (HL),$39   ; }
 $9279 CALL $92A7    ; Call #R$92A7.
@label=UpperReveal_Done
*$927C POP DE        ; Restore the original upper position from the stack.
 $927D DEC D         ; {Move up one line and left one column for the next upper reveal
 $927E DEC E         ; position.}
 $927F LD ($9AB9),DE ; Store the updated upper position at *#R$9AB9.
; Process the lower half of the reveal.
 $9283 LD DE,($9ABB) ; #REGde=*#R$9ABB.
 $9287 LD A,D        ; {Jump to #R$92A6 if #REGd is greater than or equal to #N$18 (if it's
 $9288 CP $18        ; gone past the bottom of the screen).
 $928A JR NC,$92A6   ; }
; Set up the left-shifting mask for the lower reveal.
 $928C PUSH DE       ; Stash the lower position on the stack.
; Self-modifying code;
@label=RevealDartboard_ModifyMaskForLower
 $928D LD HL,$92C7   ; {Set the mask value to #N$01 at *#R$92C6(#N$92C7).
 $9290 LD (HL),$01   ; }
@label=RevealDartboard_ModifyToShiftLeft
 $9292 LD HL,$92CD   ; {#HTML(Write <code>SLL #REGc</code> (#N$CB+#N$31) to
 $9295 LD (HL),$CB   ; *#R$92CD.)
 $9297 INC HL        ;
 $9298 LD (HL),$31   ; }
 $929A CALL $92A7    ; Call #R$92A7.
 $929D POP DE        ; Restore the original lower position from the stack.
 $929E INC D         ; {Move down one line and left one column for the next lower reveal
 $929F DEC E         ; position.}
 $92A0 LD ($9ABB),DE ; Store the updated lower position at *#R$9ABB.
 $92A4 JR $925D      ; Jump to #R$925D.
; All finished for this frame, so return.
@label=RevealDartboard_Done
*$92A6 RET           ; Return.

; Process Single Line Zipper Reveal
;
; Used by the routine at #R$9253.
;
; DE Current reveal co-ordinates
;
; Handles the pixel manipulation for one line of the reveal effect,
; including both straight copying of already-revealed areas and masked reveal
; of transition areas.
@label=ProcessRevealLine
c$92A7 PUSH DE       ; Stash the reveal co-ordinate on the stack.
; First handle the already-revealed portion.
 $92A8 DEC E         ; Decrease #REGe by one for the check below.
; Is the X coordinate within the screen boundaries?
 $92A9 LD A,E        ; {Jump to #R$92B5 if (#N$00 <= #REGe < #N$20).
 $92AA CP $20        ;
 $92AC JR NC,$92B5   ;
 $92AE AND A         ;
 $92AF JP M,$92B5    ; }
 $92B2 CALL $92E2    ; Call #R$92E2.
@label=ProcessRevealLine_Skip
*$92B5 POP DE        ; Restore the reveal co-ordinate from the stack.
 $92B6 LD A,E        ; {Return if X is past the right-hand edge of the screen.
 $92B7 CP $20        ;
 $92B9 RET NC        ; }
 $92BA PUSH DE       ; Stash the reveal co-ordinate on the stack.
; On return from #R$A8BD #REGhl will contain the dart board graphic
; destination (i.e. #R$6000 onwards).
 $92BB CALL $A8BD    ; Call #R$A8BD.
; Set up the source and destination addresses.
 $92BE LD D,H        ; {Copy the dart board graphic location from #REGhl into
 $92BF LD E,L        ; #REGde.}
 $92C0 LD A,H        ; {#REGh-=#N$20.
 $92C1 SUB $20       ;
 $92C3 LD H,A        ; }
; Process #N$08 pixel rows with the reveal mask.
 $92C4 LD B,$08      ; Set a counter in #REGb for the number of pixels rows to
                     ; process.
; Mask value; altered to either- #N$01 at #R$928D, or #N$FF at #R$926C.
@label=Reveal_MaskValue
 $92C6 LD C,$FF      ; Set the initial mask value.
@label=RevealDartboard_MaskLoop
*$92C8 LD A,(DE)     ; Get the dartboard graphic byte.
 $92C9 OR C          ; Apply the reveal mask.
 $92CA LD (HL),A     ; Write the result to the screen.
 $92CB INC H         ; Move to the next screen line.
 $92CC INC D         ; Move to the next dartboard graphic line.
; Shift command. Altered to either;
; .
; #HTML(<code>SLL C</code> at #R$9292.)
; .
; #HTML(<code>SRL C</code> at #R$9271.)
@label=Reveal_ShiftCommand
 $92CD SRL C         ; Shift the mask value.
 $92CF DJNZ $92C8    ; Decrease the pixel row counter by one and loop back to #R$92C8
                     ; until all #N$08 lines have been processed.
; Work out which attribute byte to apply.
 $92D1 POP HL        ; Restore the original reveal co-ordinate from the stack.
 $92D2 LD A,L        ; {Is the co-ordinate in the menu or dartboard area?
 $92D3 CP $08        ; }
; Default with the dartboard attribute value.
 $92D5 LD A,$70      ; #REGa=#COLOUR$70.
 $92D7 JR NC,$92DB   ; Jump to #R$92DB if the X co-ordinate is greater than or equal to
                     ; #N$08.
; The X co-ordinate was less than #N$08 so use the menu attribute value.
 $92D9 LD A,$00      ; #REGa=#COLOUR$00.
; Stash the attribute byte temporarily as #R$A862 needs the #REGa
; register.
@label=RevealDartboard_SetAttribute
*$92DB EX AF,AF'     ; Temporarily switch the attribute byte with the shadow #REGaf
                     ; register.
; #R$A862 converts given co-ordinates into an attribute buffer location
; (into #REGhl).
 $92DC CALL $A862    ; Call #R$A862.
 $92DF EX AF,AF'     ; Restore the attribute byte back from the shadow #REGaf
                     ; register.
 $92E0 LD (HL),A     ; Write the colour attribute byte to the attribute buffer.
 $92E1 RET           ; Return.

; Copy Reveal Line
;
; Used by the routine at #R$92A7.
;
; DE Screen position
@label=CopyRevealLine
c$92E2 PUSH DE       ; Stash the screen position on the stack.
; On return from #R$A8BD #REGhl will contain the dart board graphic
; destination (i.e. #R$6000 onwards).
 $92E3 CALL $A8BD    ; Call #R$A8BD.
; Set up the source and destination addresses.
 $92E6 LD D,H        ; {Copy the dart board graphic location from #REGhl into
 $92E7 LD E,L        ; #REGde.}
 $92E8 LD A,H        ; {#REGh-=#N$20.
 $92E9 SUB $20       ;
 $92EB LD H,A        ; }
; Copy #N$08 pixel rows that make up one character cell of the dartboard.
 $92EC LD B,$08      ; Set a counter in #REGb for the number of pixels rows to
                     ; process.
@label=CopyRevealLine_Loop
*$92EE LD A,(DE)     ; {Copy a byte of the dartboard graphic to the screen
 $92EF LD (HL),A     ; buffer.}
 $92F0 INC H         ; Move to the next screen line.
 $92F1 INC D         ; Move to the next dartboard graphic line.
 $92F2 DJNZ $92EE    ; Decrease counter by one and loop back to #R$92EE until
                     ; counter is zero.
; Work out which attribute byte to apply.
 $92F4 POP HL        ; Restore the screen position from the stack.
 $92F5 LD A,L        ; {Is the co-ordinate in the menu or dartboard area?
 $92F6 CP $08        ; }
; Default with the dartboard attribute value.
 $92F8 LD A,$70      ; #REGa=#COLOUR$70.
 $92FA JR NC,$92FE   ; Jump to #R$92FE if the X co-ordinate is greater than or
                     ; equal to #N$08.
; The X co-ordinate was less than #N$08 so use the menu attribute value.
 $92FC LD A,$47      ; #REGa=#COLOUR$47.
@label=RevealLine_SetAttribute
*$92FE EX AF,AF'     ; Temporarily switch the #REGaf register with the shadow #REGaf
                     ; register.
; On return from #R$A862 #REGhl will contain the attribute buffer
; location.
 $92FF CALL $A862    ; Call #R$A862.
 $9302 EX AF,AF'     ; Restore the #REGaf register from the shadow #REGaf
                     ; register.
 $9303 LD (HL),A     ; Write the colour attribute byte to *#REGhl.
 $9304 RET           ; Return.

; Main Menu: Print Dart Pointer
;
; Used by the routine at #R$933F.
;
; DE The co-ordinates of the dart
@label=MainMenu_PrintDartPointer
c$9305 LD A,E        ; {Return if #REGe is greater than #N$20.
 $9306 CP $20        ;
 $9308 RET NC        ; }
 $9309 PUSH DE       ; Stash #REGde on the stack.
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $930A CALL $A8AE    ; Call #R$A8AE.
 $930D POP DE        ; Restore #REGde from the stack.
 $930E LD A,$20      ; #REGa=#N$20.
 $9310 SUB E         ; #REGa-=#REGe.
 $9311 CP $06        ; {Jump to #R$9317 if #REGa is greater than or equal to
 $9313 JR NC,$9317   ; #N$06.}
 $9315 JR $9319      ; Jump to #R$9319.
*$9317 LD A,$06      ; #REGa=#N$06.
*$9319 LD DE,$AF73   ; #REGde=#R$AF73.
 $931C LD B,$0B      ; #REGb=#N$0B.
*$931E PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $931F PUSH HL       ; }
 $9320 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9321 LD B,$00      ; #REGb=#N$00.
 $9323 LD C,A        ; #REGc=#REGa.
 $9324 LDIR          ; LDIR.
 $9326 CP $06        ; {Jump to #R$9334 if #REGa is equal to #N$06.
 $9328 JR Z,$9334    ; }
 $932A PUSH AF       ; Stash #REGaf on the stack.
 $932B LD C,A        ; #REGc=#REGa.
 $932C LD A,$06      ; #REGa=#N$06.
 $932E SUB C         ; #REGa-=#REGc.
 $932F LD B,$00      ; #REGb=#N$00.
 $9331 LD C,A        ; #REGc=#REGa.
 $9332 POP AF        ; Restore #REGaf from the stack.
 $9333 ADD HL,BC     ; #REGhl+=#REGbc.
*$9334 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9335 POP HL        ; Restore #REGhl from the stack.
 $9336 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $9337 CALL $A8CC    ; Call #R$A8CC.
 $933A EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $933B POP BC        ; Restore #REGbc from the stack.
 $933C DJNZ $931E    ; Decrease counter by one and loop back to #R$931E until
                     ; counter is zero.
 $933E RET           ; Return.

; Main Menu
;
; Used by the routines at #R$9183, #R$A15C, #R$A272, #R$A8F8 and #R$B16B.
;
; .
;
; #PUSHS #POKES$91C1,$00#SIM(start=$933F,stop=$93F4)
; #UDGTABLE(default)
;   { #SCR$02(main-menu) }
; UDGTABLE# #POPS
@label=MainMenu
c$933F XOR A                      ; {Write #N$00 to; #LIST
 $9340 LD ($9B2B),A               ; { *#R$9B2B }
 $9343 LD ($9AB7),A               ; { *#R$9AB7 }
                                  ; LIST#}
 $9346 CALL $CB1E                 ; Call #R$CB1E.
; Zero the displayed score.
 $9349 LD HL,$91AE                ; #REGhl=#R$91AB(#N$91AE).
 $934C LD DE,$91AF                ; #REGde=#R$91AB(#N$91AF).
 $934F LD BC,$0005                ; #REGbc=#N($0005,$04,$04).
 $9352 LD (HL),$30                ; Write "#CHR$30" to the first digit in
                                  ; #R$91AB.
 $9354 LDIR                       ; Copy the zero to the next five digits.
; Print the menu options.
; .
; #PUSHS #POKES$91C1,$00#SIM(start=$9356,stop=$93CB)
; #UDGTABLE(default)
;   { #SCR$02(main-menu-1) }
; UDGTABLE# #POPS
; Note; the bright white doesn't happen until later.
 $9356 CALL $964C                 ; Call #R$964C.
 $9359 DEFB $00                   ; #R$97D5(CLEAR SCREEN).
 $935A DEFB $10,$00               ; INK: #INK(#PEEK(#PC+$01)).
 $935C DEFB $11,$00               ; PAPER: #INK(#PEEK(#PC+$01)).
 $935E DEFB $16,$05,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $9361 DEFM "1 KEYBOARD"          ; #FONT#(:(#STR(#PC,$04,$0A)))$8D75,attr=$47(1-keyboard)
 $936B DEFB $16,$07,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $936E DEFM "2 KEMPSTON JOYSTICK" ; #FONT#(:(#STR(#PC,$04,$13)))$8D75,attr=$47(2-kempston-joystick)
 $9381 DEFB $16,$09,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $9384 DEFM "3 INTERFACE TWO "    ; #FONT#(:(#STR(#PC,$04,$10)))$8D75,attr=$47(3-interface-two)
 $9394 DEFB $16,$0B,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $9397 DEFM "4 CURSOR JOYSTICK "  ; #FONT#(:(#STR(#PC,$04,$12)))$8D75,attr=$47(4-cursor-joystick)
 $93A9 DEFB $16,$0D,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $93AC DEFM "5 REDEFINE KEYS"     ; #FONT#(:(#STR(#PC,$04,$0F)))$8D75,attr=$47(5-redefine-keys)
 $93BB DEFB $16,$12,$07           ; PRINT AT: #N(#PEEK(#PC+$01)),
                                  ; #N(#PEEK(#PC+$02)).
 $93BE DEFM "0 START GAME"        ; #FONT#(:(#STR(#PC,$04,$0C)))$8D75,attr=$47(0-start-game)
 $93CA DEFB $FF                   ; Terminator.
; Display the header and footer messaging.
; .
; #PUSHS #POKES$91C1,$00#SIM(start=$9356,stop=$93CE)
; #UDGTABLE(default)
;   { #SCR$02(main-menu-2) }
; UDGTABLE# #POPS
 $93CB CALL $9218                 ; Call #R$9218.
; Set the bright white colouring.
; .
; #PUSHS #POKES$91C1,$00#SIM(start=$9356,stop=$93D1)
; #UDGTABLE(default)
;   { #SCR$02(main-menu-3) }
; UDGTABLE# #POPS
 $93CE CALL $91B6                 ; Call #R$91B6.
; Now begin setting up the dart pointer.
 $93D1 LD HL,$0501                ; Set the initial position of the dart
                                  ; pointer to #REGhl (#N$0501).
 $93D4 LD B,$04                   ; Set a counter in #REGb for the width of the
                                  ; dart pointer.
; Clear the attributes of all possible positions of the dart pointer.
@label=ClearDartPointerAttributePositions
*$93D6 PUSH BC                    ; {Stash the dart width counter and dart
 $93D7 PUSH HL                    ; co-ordinates on the stack.}
 $93D8 CALL $94B8                 ; Call #R$94B8.
 $93DB POP HL                     ; Restore the dart co-ordinates from the
                                  ; stack.
 $93DC INC H                      ; {Move down two rows (the height of the dart
 $93DD INC H                      ; pointer).}
 $93DE POP BC                     ; Restore the dart width counter from the
                                  ; stack.
 $93DF DJNZ $93D6                 ; Decrease the dart width counter by one and loop back to #R$93D6
                                  ; until the counter is zero.
; Initialise the dart pointer.
 $93E1 LD DE,$0500                ; Set the initial position of the dart
                                  ; pointer to #REGde (#N$0500).
 $93E4 LD B,$04                   ; Set a counter in #REGb for the width of the
                                  ; dart pointer.
@label=DrawDartPointer_Loop
*$93E6 PUSH BC                    ; {Stash the dart width counter and dart
 $93E7 PUSH DE                    ; co-ordinates on the stack.}
 $93E8 CALL $9305                 ; Call #R$9305.
 $93EB POP DE                     ; {Restore the dart co-ordinates and dart
 $93EC POP BC                     ; width counter from the stack.}
 $93ED INC D                      ; {Increment #REGd by two.
 $93EE INC D                      ; }
 $93EF DJNZ $93E6                 ; Decrease the dart width counter by one and loop back to #R$93E6
                                  ; until the counter is zero.
@label=ColourDartPointerAttributes_Loop
*$93F1 CALL $944E                 ; Call #R$944E.
 $93F4 CALL $965F                 ; Call #R$965F.
 $93F7 PUSH AF                    ; Stash #REGaf on the stack.
 $93F8 POP AF                     ; Restore #REGaf from the stack.
 $93F9 JR Z,$93F1                 ; Jump to #R$93F1 if #REGd is equal to #N$04.
; Has the player hit "Start Game"?
 $93FB CP $30                     ; {Jump to #R$9429 if "0" was not pressed
 $93FD JR NZ,$9429                ; (ASCII #N$30 is "0").}
; A game was started...
 $93FF CALL $9942                 ; Call #R$9942.
; Consolidate the selected configs.
 $9402 LD A,($99F6)               ; {Write *#R$99F6 to *#R$99F5.
 $9405 LD ($99F5),A               ; }
; Then play an absolutely stunning reveal animation!
; #PUSHS #POKES$91C1,$00#SIM(start=$933F,stop=$93F4)
; #POKES$9412,$00 #SIM(start=$9402,stop=$9410)
; #FOR$00,$3E||x|
;   #SIM(start=$9410,stop=$9424)#SCR$02(*reveal-dartboard-x)
; ||
; #UDGTABLE { #UDGARRAY#(#ANIMATE$03,$3E(reveal-dartboard)) }
; UDGTABLE# #POPS
; .
; First calculate the co-ordinates of the selected menu item.
 $9408 ADD A,A                    ; {The menu items are spaced two rows apart, so double the value in
 $9409 ADD A,$05                  ; #REGa and also they start five rows from the top of the screen so add that
 $940B LD D,A                     ; too and store the result in #REGd.}
 $940C LD E,$01                   ; The dart graphic is indented by one column
                                  ; - store this in #REGe.
; Initialise the animation counter.
 $940E LD B,$3E                   ; Set a counter in #REGb of the number of loops to complete the
                                  ; animation (#N$3E).
; The main animation loop. Each iteration reveals one more column of the
; transition.
@label=RevealDartboard_AnimationLoop
*$9410 PUSH BC                    ; {Stash the reveal loop counter and dart pointer co-ordinates on the
 $9411 PUSH DE                    ; stack.}
; Synchronise with the screen refresh so the animation is smooth.
 $9412 HALT                       ; Halt operation (suspend CPU until the next
                                  ; interrupt).
 $9413 CALL $9305                 ; Call #R$9305.
 $9416 POP HL                     ; Restore the dart pointer co-ordinates from
                                  ; the stack into #REGhl.
 $9417 PUSH HL                    ; But keep a copy on the stack for later.
 $9418 INC L                      ; Move the dart pointer right one position.
; Draw the dart pointer at the new position.
 $9419 CALL $9457                 ; Call #R$9457.
; Process one step of the reveal.
 $941C POP DE                     ; Restore the dart pointer co-ordinates from
                                  ; the stack into #REGde.
 $941D PUSH DE                    ; But keep a copy on the stack for later.
 $941E CALL $9253                 ; Call #R$9253.
 $9421 POP DE                     ; Restore the dart pointer co-ordinates from
                                  ; the stack.
 $9422 INC E                      ; Move the dart pointer right one position.
 $9423 POP BC                     ; Restore the reveal loop counter from the
                                  ; stack.
 $9424 DJNZ $9410                 ; Decrease the reveal loop counter by one and loop back to #R$9410
                                  ; until the dartboard is fully revealed.
; The reveal animation is now complete!
 $9426 JP $94E6                   ; Jump to #R$94E6.
@label=MainMenu_Next
*$9429 CP $36                     ; {Jump to #R$93F1 if #REGa is greater than
 $942B JP NC,$93F1                ; (ASCII #N$36 is "6").}
 $942E CP $30                     ; {Jump to #R$93F1 if #REGa is less than
 $9430 JP C,$93F1                 ; (ASCII #N$30 is "0").}
 $9433 SUB $31                    ; #REGa-=#N$31.
 $9435 PUSH AF                    ; Stash #REGaf on the stack.
 $9436 CALL $94AF                 ; Call #R$94AF.
 $9439 CALL $9942                 ; Call #R$9942.
 $943C POP AF                     ; Restore #REGaf from the stack.
 $943D LD ($99F6),A               ; Write #REGa to *#R$99F6.
 $9440 CP $04                     ; {Jump to #R$93F1 if #REGa is not equal to
 $9442 JP NZ,$93F1                ; #N$04.}
 $9445 CALL $94F8                 ; Call #R$94F8.
 $9448 CALL $94D3                 ; Call #R$94D3.
 $944B JP $933F                   ; Jump to #R$933F.

; Main Menu: Colour Dart Pointer
;
; Used by the routine at #R$933F.
;
; .
;
; #PUSHS #SIM(start=$9195,stop=$919E)#SIM(start=$93D1,stop=$94AE)
; #UDGTABLE(default)
; { #SCR$04{$04,$A0,$C0,$2C}(dart-pointer-colour) }
; UDGTABLE# #POPS
@label=MainMenu_ColourDartPointer
c$944E LD A,($99F6)  ; Fetch *#R$99F6 and store it in #REGa.
 $9451 ADD A,A       ; Double the value as the entries have spacing between
                     ; them.
 $9452 ADD A,$05     ; Add #N$05, as the entries start five rows from the top of the
                     ; screen.
 $9454 LD H,A        ; Store the result in #REGh as the Y co-ordinate.
 $9455 LD L,$01      ; Store #N$01 in #REGl as the X co-ordinate.
; This entry point is used by the routine at #R$933F.
@label=PrintDartPointer
*$9457 LD A,L        ; {Return if #REGl is greater than #N$20.
 $9458 CP $20        ;
 $945A RET NC        ; }
 $945B PUSH HL       ; Stash the dart attribute co-ordinates on the stack.
; First colour the flight.
; .
; Convert the co-ordinates to an actual attribute buffer memory location.
 $945C CALL $A862    ; Call #R$A862.
 $945F LD B,$45      ; Set the flight colour of #COLOUR$45 in #REGb.
 $9461 LD DE,$0020   ; Set one row length of #N($0020,$04,$04) in #REGde.
 $9464 LD (HL),B     ; Write #COLOUR$45 to the attribute buffer pointer.
 $9465 ADD HL,DE     ; Move down one row.
 $9466 LD (HL),B     ; Write #COLOUR$45 to the attribute buffer pointer.
 $9467 POP HL        ; Restore the dart attribute co-ordinates from the stack.
 $9468 INC L         ; Move right one character block.
 $9469 LD A,L        ; {Return if #REGl is greater than #N$20.
 $946A CP $20        ;
 $946C RET NC        ; }
 $946D PUSH HL       ; Stash the dart attribute co-ordinates on the stack.
; Now the shaft.
; .
; Again, convert the co-ordinates to an actual attribute buffer memory
; location.
 $946E CALL $A862    ; Call #R$A862.
 $9471 LD B,$45      ; Set the shaft colour of #COLOUR$45 in #REGb.
 $9473 LD DE,$0020   ; Set one row length of #N($0020,$04,$04) in #REGde.
 $9476 LD (HL),B     ; Write #COLOUR$45 to the attribute buffer pointer.
 $9477 ADD HL,DE     ; Move down one row.
 $9478 LD (HL),B     ; Write #COLOUR$45 to the attribute buffer pointer.
 $9479 POP HL        ; Restore the dart attribute co-ordinates from the stack.
 $947A INC L         ; Move right one character block.
 $947B LD A,L        ; {Return if #REGl is greater than #N$20.
 $947C CP $20        ;
 $947E RET NC        ; }
 $947F PUSH HL       ; Stash the dart attribute co-ordinates on the stack.
; Move onto the barrel.
; .
; Convert the co-ordinates to an actual attribute buffer memory
; location.
 $9480 CALL $A862    ; Call #R$A862.
 $9483 LD B,$46      ; Set the barrel colour of #COLOUR$46 in #REGb.
 $9485 LD DE,$0020   ; Set one row length of #N($0020,$04,$04) in #REGde.
 $9488 LD (HL),B     ; Write #COLOUR$46 to the attribute buffer pointer.
 $9489 ADD HL,DE     ; Move down one row.
 $948A LD (HL),B     ; Write #COLOUR$46 to the attribute buffer pointer.
 $948B POP HL        ; Restore the dart attribute co-ordinates from the stack.
 $948C INC L         ; Move right one character block.
 $948D LD A,L        ; {Return if #REGl is greater than #N$20.
 $948E CP $20        ;
 $9490 RET NC        ; }
 $9491 PUSH HL       ; Stash the dart attribute co-ordinates on the stack.
; Continue on with the barrel.
; .
; Convert the co-ordinates to an actual attribute buffer memory
; location.
 $9492 CALL $A862    ; Call #R$A862.
 $9495 LD B,$46      ; Set the barrel colour of #COLOUR$46 in #REGb.
 $9497 LD DE,$0020   ; Set one row length of #N($0020,$04,$04) in #REGde.
 $949A LD (HL),B     ; Write #COLOUR$46 to the attribute buffer pointer.
 $949B ADD HL,DE     ; Move down one row.
 $949C LD (HL),B     ; Write #COLOUR$46 to the attribute buffer pointer.
 $949D POP HL        ; Restore the dart attribute co-ordinates from the stack.
 $949E INC L         ; Move right one character block.
 $949F LD A,L        ; {Return if #REGl is greater than #N$20.
 $94A0 CP $20        ;
 $94A2 RET NC        ; }
; Lastly, colour the point.
; .
; Convert the co-ordinates to an actual attribute buffer memory
; location.
 $94A3 CALL $A862    ; Call #R$A862.
 $94A6 LD B,$47      ; Set the barrel colour of #COLOUR$47 in #REGb.
 $94A8 LD DE,$0020   ; Set one row length of #N($0020,$04,$04) in #REGde.
 $94AB LD (HL),B     ; Write #COLOUR$47 to the attribute buffer pointer.
 $94AC ADD HL,DE     ; Move down one row.
 $94AD LD (HL),B     ; Write #COLOUR$47 to the attribute buffer pointer.
 $94AE RET           ; Return.

; Clear Current Dart Pointer Attributes
;
; Used by the routine at #R$933F.
@label=ClearCurrentDartPointerAttributes
c$94AF LD A,($99F6)  ; Fetch *#R$99F6 and store it in #REGa.
 $94B2 ADD A,A       ; Double the value as the entries have spacing between
                     ; them.
 $94B3 ADD A,$05     ; Add #N$05, as the entries start five rows from the top of the
                     ; screen.
 $94B5 LD H,A        ; Store the result in #REGh as the Y co-ordinate.
 $94B6 LD L,$01      ; Store #N$01 in #REGl as the X co-ordinate.
; Continue on to #R$94B8.

; Clear Dart Pointer Attributes
;
; Used by the routine at #R$933F.
;
; HL The co-ordinates of the dart
@label=ClearDartPointerAttributes
c$94B8 CALL $A862    ; Call #R$A862.
 $94BB XOR A         ; {Write #COLOUR$00 to #N$04 character blocks in this
 $94BC LD (HL),A     ; attribute row.
 $94BD INC HL        ;
 $94BE LD (HL),A     ;
 $94BF INC HL        ;
 $94C0 LD (HL),A     ;
 $94C1 INC HL        ;
 $94C2 LD (HL),A     ;
 $94C3 INC HL        ;
 $94C4 LD (HL),A     ; }
; Move down one row, and back #N$04 character blocks (the width of the
; dart graphic).
 $94C5 LD DE,$001C   ; {#REGhl+=#N($001C,$04,$04).
 $94C8 ADD HL,DE     ; }
 $94C9 LD (HL),A     ; {Write #COLOUR$00 to #N$04 character blocks in this
 $94CA INC HL        ; attribute row.
 $94CB LD (HL),A     ;
 $94CC INC HL        ;
 $94CD LD (HL),A     ;
 $94CE INC HL        ;
 $94CF LD (HL),A     ;
 $94D0 INC HL        ;
 $94D1 LD (HL),A     ; }
 $94D2 RET           ; Return.

; Press Any Key To Continue
;
; Used by the routine at #R$933F.
;
; .
;
; Read from the keyboard- returns #N$00 when no keys are being pressed.
@label=Debounce_CheckKeys
c$94D3 CALL $965F    ; Call #R$965F.
 $94D6 OR A          ; {Jump back to #R$94D3 if any keys are still being
 $94D7 JR NZ,$94D3   ; pressed.}
; After the frame delay, return regardless of key presses.
 $94D9 LD B,$32      ; Set a timeout counter in #REGb of #N$32.
@label=Debounce_Loop
*$94DB HALT          ; Halt operation (suspend CPU until the next interrupt).
 $94DC XOR A         ; Reset the flags.
 $94DD IN A,($FE)    ; Read from the keyboard port.
; Mask off the unused bits.
 $94DF OR %11100000  ; Set bits 5-7.
; If no keys are being pressed, #REGa will become #N$00.
 $94E1 INC A         ; Increment the value by one.
 $94E2 RET NZ        ; Return if any key has been pressed.
 $94E3 DJNZ $94DB    ; Decrease the timeout counter by one and loop back to #R$94DB until
                     ; the timeout counter is zero.
 $94E5 RET           ; Return.

; Initialise Dartboard Menu
;
; Used by the routine at #R$933F.
@label=Initialise_DartboardMenu
c$94E6 CALL $9D33    ; Call #R$9D33.
 $94E9 XOR A         ; #REGa=#N$00.
 $94EA IN A,($FE)    ; #REGa=byte from port #N$FE.
 $94EC OR %11100000  ; Set bits 5-7.
 $94EE INC A         ; Increment #REGa by one.
 $94EF RET           ; Return.

; Back To BASIC
@label=BackToBasic
c$94F0 LD B,$32      ; Set a counter in #REGb of #N$32.
@label=BackToBasic_Loop
*$94F2 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $94F3 DJNZ $94F2    ; Decrease halt counter by one and loop back to #R$94F2 until the
                     ; counter is zero.
 $94F5 JP $0000      ; #HTML(Jump to <a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/0000.html">START</a>.)

; Messaging: Redefine Keys
;
; Used by the routine at #R$933F.
;
; .
;
; #PUSHS #SIM(start=$94F8,stop=$953A)
; #UDGTABLE(default)
;   { #SCR$02(redefine-keys) }
; UDGTABLE# #POPS
@label=Messaging_RedefineKeys
c$94F8 XOR A                ; {Write #N$00 to *#R$99F6.
 $94F9 LD ($99F6),A         ; }
 $94FC CALL $964C           ; Call #R$964C.
 $94FF DEFB $00             ; #R$97D5(CLEAR SCREEN).
 $9500 DEFB $10,$03         ; INK: #INK(#PEEK(#PC+$01)).
 $9502 DEFB $11,$00         ; PAPER: #INK(#PEEK(#PC+$01)).
 $9504 DEFB $16,$04,$0A     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9507 DEFM "REDEFINE KEYS" ; #FONT#(:(#STR(#PC,$04,$0D)))$8D75,attr=$47(redefine-keys)
 $9514 DEFB $16,$07,$0C     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9517 DEFM "UP"            ; #FONT#(:(#STR(#PC,$04,$02)))$8D75,attr=$47(up)
 $9519 DEFB $16,$09,$0C     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $951C DEFM "DOWN"          ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(down)
 $9520 DEFB $16,$0B,$0C     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9523 DEFM "LEFT"          ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(left)
 $9527 DEFB $16,$0D,$0C     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $952A DEFM "RIGHT"         ; #FONT#(:(#STR(#PC,$04,$05)))$8D75,attr=$47(right)
 $952F DEFB $16,$0F,$0C     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9532 DEFM "FIRE"          ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(fire)
 $9536 DEFB $FF             ; Terminator.
 $9537 CALL $9218           ; Call #R$9218.
 $953A CALL $91B6           ; Call #R$91B6.
; Clear down the existing user-defined key data.
 $953D LD HL,$9A60          ; #REGhl=#R$9A60.
 $9540 LD DE,$9A61          ; #REGde=#R$9A60+#N$01.
 $9543 LD BC,$000E          ; #REGbc=#N($000E,$04,$04).
 $9546 LD (HL),$00          ; Write #N$00 to *#REGhl.
 $9548 LDIR                 ; Blank the #N($000E,$04,$04) control bytes.
; Get the user-input for filling the control bytes.
; .
; Oddly, start with "UP" even though "FIRE" is first with how the bytes
; are stored.
 $954A LD IX,$9A63          ; #REGix=#R$9A63.
 $954E CALL $964C           ; Call #R$964C.
 $9551 DEFB $16,$07,$12     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $9554 DEFB $FF             ; Terminator.
 $9555 CALL $9569           ; Call #R$9569 for "UP".
 $9558 CALL $9569           ; Call #R$9569 for "DOWN".
 $955B CALL $9569           ; Call #R$9569 for "LEFT".
 $955E CALL $9569           ; Call #R$9569 for "RIGHT".
; Cycle back and collect the input for "FIRE".
 $9561 LD IX,$9A60          ; #REGix=#R$9A60.
 $9565 CALL $9569           ; Call #R$9569 for "FIRE".
 $9568 RET                  ; Return.

; Redefine Key
;
; Used by the routine at #R$94F8.
@label=RedefineKey
c$9569 CALL $9688    ; Call #R$9688.
 $956C OR A          ; {Jump to #R$9569 if #REGa is not equal to zero.
 $956D JR NZ,$9569   ; }
*$956F CALL $9688    ; Call #R$9688.
 $9572 OR A          ; {Jump to #R$956F if #REGa is zero.
 $9573 JR Z,$956F    ; }
 $9575 LD C,A        ; {Jump to #R$9580 if #REGc is less than #N$04.
 $9576 CP $04        ;
 $9578 JR C,$9580    ; }
 $957A LD A,($F864)  ; {Jump to #R$9569 if *#R$F864 is not equal to zero.
 $957D OR A          ;
 $957E JR NZ,$9569   ; }
*$9580 LD HL,$9A59   ; #REGhl=#R$9A59.
 $9583 LD B,$08      ; #REGb=#N$08.
 $9585 LD A,C        ; {Jump to #R$9569 if #REGc is equal to *#REGhl.
*$9586 CP (HL)       ;
 $9587 JR Z,$9569    ; }
 $9589 INC HL        ; {Increment #REGhl by three.
 $958A INC HL        ;
 $958B INC HL        ; }
 $958C DJNZ $9586    ; Decrease counter by one and loop back to #R$9586 until
                     ; counter is zero.
 $958E LD (IX+$00),E ; Write #REGe to *#REGix+#N$00.
 $9591 LD (IX+$01),D ; Write #REGd to *#REGix+#N$01.
 $9594 LD (IX+$02),A ; Write #REGa to *#REGix+#N$02.
 $9597 INC IX        ; {Increment #REGix by three.
 $9599 INC IX        ;
 $959B INC IX        ; }
 $959D CALL $91C5    ; Call #R$91C5.
 $95A0 LD HL,$F818   ; {Write #N$12 to *#R$F818.
 $95A3 LD (HL),$12   ; }
 $95A5 INC HL        ; {Increment *#R$F819 by two.
 $95A6 INC (HL)      ;
 $95A7 INC (HL)      ; }
 $95A8 RET           ; Return.

; Initialise Game
;
; Used by the routine at #R$9183.
@label=InitialiseGame
c$95A9 DI             ; Disable interrupts.
 $95AA LD IY,$F800    ; #REGiy=#R$F800.
 $95AE RES 7,(IY+$25) ; Reset bit 7 of *#REGiy+#N$25.
 $95B2 CALL $95D2     ; Call #R$95D2.
 $95B5 CALL $9635     ; Call #R$9635.
 $95B8 EI             ; Enable interrupts.
 $95B9 XOR A          ; {Write #N$00 to *#R$F815.
 $95BA LD ($F815),A   ; }
 $95BD RET            ; Return.

; Routine at 95BE
c$95BE XOR A         ; {Write #N$00 to *#R$F815.
 $95BF LD ($F815),A  ; }
 $95C2 DI            ; Disable interrupts.
 $95C3 LD SP,($F827) ; #REGsp=*#R$F827.
 $95C7 EXX           ; Switch to the shadow registers.
 $95C8 POP HL        ; Restore #REGhl from the stack.
 $95C9 EXX           ; Switch back to the normal registers.
 $95CA LD IY,$5C3A   ; #HTML(#REGiy=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C3A.html">ERR_NR</a>.)
 $95CE IM 1          ; Set interrupt mode #N$01.
 $95D0 EI            ; Enable interrupts.
 $95D1 RET           ; Return.

; Create Interrupt Byte Jump Table
;
; Used by the routine at #R$95A9.
@label=CreateInterruptByteJumpTable
c$95D2 LD HL,$FE00   ; #REGhl=#R$FE00.
 $95D5 LD A,H        ; {#REGi=#N$FE.
 $95D6 LD I,A        ; }
 $95D8 DEC A         ; #REGa=#N$FD.
; Write #N$FD from #R$FE00 for #N$100 bytes. All will become clear soon...
@label=CreateInterruptByteJumpTable_Loop
*$95D9 LD (HL),A     ; Write #REGa to *#REGhl.
 $95DA INC L         ; Increment #REGl by one.
 $95DB JR NZ,$95D9   ; Jump to #R$95D9 if #REGl is not equal to #N$00.
 $95DD INC H         ; Increment #REGh by one.
 $95DE LD (HL),A     ; Write #REGa to *#REGhl.
; #HTML(Write <code>JP #R$95ED</code> to *#R$FDFD)
 $95DF LD A,$C3      ; {#HTML(Write <code>JP</code> (#N$C3) to *#R$FDFD.)
 $95E1 LD ($FDFD),A  ; }
 $95E4 LD HL,$95ED   ; {Write #R$95ED to *#R$FDFD(#N$FDFE).
 $95E7 LD ($FDFE),HL ; }
 $95EA IM 2          ; Set interrupt mode #N$02.
 $95EC RET           ; Return.

; Interrupt Routine
;
; Used by the routine at #R$FDFD.
@label=InterruptRoutine
c$95ED PUSH AF       ; {Stash #REGaf, #REGbc, #REGde, #REGhl and #REGix on the
 $95EE PUSH BC       ; stack.
 $95EF PUSH DE       ;
 $95F0 PUSH HL       ;
 $95F1 PUSH IX       ; }
 $95F3 CALL $CBF7    ; Call #R$CBF7.
 $95F6 LD A,($9B2B)  ; {Jump to #R$9626 if *#R$9B2B is not zero.
 $95F9 AND A         ;
 $95FA JR Z,$9626    ; }
 $95FC LD HL,$9AB5   ; #REGhl=#R$9AB5.
 $95FF DEC (HL)      ; Decrease *#REGhl by one.
 $9600 JR NZ,$9626   ; Jump to #R$9626 if *#REGhl is not zero.
 $9602 LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
; Handle the units digit of #R$A38C.
 $9604 LD HL,$A38D   ; #REGhl=#R$A38C(#N$A38D) (2nd digit of #R$A38C).
 $9607 DEC (HL)      ; Decrease *#REGhl by one.
; Has #R$A38C(#N$A38D) just ticked down from a "0"?
 $9608 LD A,(HL)     ; {Jump to #R$9623 if *#REGhl is not equal to #N$2F
 $9609 CP $2F        ; ("#CHR$30" minus one).
 $960B JR NZ,$9623   ; }
; Replace the unit digit with a "9".
 $960D LD (HL),$39   ; Write "#CHR$39" to *#REGhl.
; Handle the tens digit of #R$A38C.
 $960F LD HL,$A38C   ; #REGhl=#R$A38C.
 $9612 DEC (HL)      ; Decrease *#REGhl by one.
; Has #R$A38C just ticked down from a "0"?
 $9613 LD A,(HL)     ; {Jump to #R$9623 if *#REGl is not equal to #N$2F
 $9614 CP $2F        ; ("#CHR$30" minus one).
 $9616 JR NZ,$9623   ; }
; This signifies that the time is now up!
 $9618 LD A,$01      ; {Write #N$01 to *#R$9B2A.
 $961A LD ($9B2A),A  ; }
 $961D DEC A         ; {Write #N$00 to *#R$9B2B.
 $961E LD ($9B2B),A  ; }
 $9621 JR $9626      ; Jump to #R$9626.
; Print the "Around The Clock" timer.
@label=InterruptDrivenTimer
*$9623 CALL $A380    ; Call #R$A380.
@label=GetControls
*$9626 CALL $99F7    ; Call #R$99F7.
 $9629 LD ($F821),A  ; Write #REGa to *#R$F821.
 $962C POP IX        ; {Restore #REGix, #REGhl, #REGde, #REGbc and #REGaf from
 $962E POP HL        ; the stack.
 $962F POP DE        ;
 $9630 POP BC        ;
 $9631 POP AF        ; }
 $9632 EI            ; Enable interrupts.
 $9633 RETI          ; Return from the interrupt routine.

; Routine at 9635
;
; Used by the routine at #R$95A9.
c$9635 LD B,$80      ; #REGb=#N$80.
 $9637 LD DE,$4000   ; #REGde=#N$4000.
 $963A LD HL,$F900   ; #REGhl=#R$F900.
*$963D LD (HL),E     ; Write #REGe to *#REGhl.
 $963E INC L         ; Increment #REGl by one.
 $963F LD (HL),D     ; Write #REGd to *#REGhl.
 $9640 INC L         ; Increment #REGl by one.
 $9641 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9642 CALL $A8CC    ; Call #R$A8CC.
 $9645 CALL $A8CC    ; Call #R$A8CC.
 $9648 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $9649 DJNZ $963D    ; Decrease counter by one and loop back to #R$963D until
                     ; counter is zero.
 $964B RET           ; Return.

; Print String
;
; Used by the routines at #R$9183, #R$91A1, #R$91C5, #R$91DD, #R$91E9, #R$91F3,
; #R$91FE, #R$9218, #R$933F, #R$94F8, #R$98B1, #R$9D42, #R$A0D6, #R$A15C,
; #R$A380, #R$A3C3, #R$A7A5, #R$A8F8, #R$A97A, #R$A9E5, #R$AA0A, #R$AAA8,
; #R$AB2E, #R$AC3D, #R$AC52, #R$AC9D, #R$ACB9, #R$ACD9, #R$ACFB, #R$AD3B,
; #R$AD5C, #R$B16B, #R$B5BA, #R$B640 and #R$B6C2.
@label=PrintString_Loop
c$964C EX (SP),HL    ; Exchange #REGhl with the address at the top of the
                     ; stack.
 $964D LD A,(HL)     ; Get character from string.
 $964E INC HL        ; Increment the string pointer by one.
 $964F EX (SP),HL    ; Update the return address on the stack.
 $9650 CP $FF        ; {Return if the terminator has been reached.
 $9652 RET Z         ; }
 $9653 CALL $9736    ; Call #R$9736.
 $9656 JR $964C      ; Jump back to #R$964C.

; Routine at 9658
c$9658 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $9659 DEC BC        ; Decrease #REGbc by one.
 $965A LD A,B        ; {Jump to #R$9658 until #REGbc is zero.
 $965B OR C          ;
 $965C JR NZ,$9658   ; }
 $965E RET           ; Return.

; Routine at 965F
;
; Used by the routines at #R$9211, #R$933F, #R$94D3 and #R$A8F8.
c$965F HALT            ; Halt operation (suspend CPU until the next interrupt).
 $9660 CALL $9688      ; Call #R$9688.
 $9663 RET Z           ; Return if #REGa is zero.
 $9664 CP (IY+$65)     ; Compare #REGa with *#REGiy+#N$65.
 $9667 JR Z,$967C      ; Jump to #R$967C if #REGbc is equal to #REGc.
 $9669 OR A            ; Set the bits from #REGa.
 $966A JR NZ,$966F     ; Jump to #R$966F if #REGbc is not equal to #REGa.
 $966C LD ($F865),A    ; Write #REGa to *#R$F865.
*$966F CP $04          ; {Jump to #R$965F if #REGa is less than #N$04.
 $9671 JR C,$965F      ; }
 $9673 LD ($F865),A    ; Write #REGa to *#R$F865.
 $9676 LD (IY+$66),$0F ; Write #N$0F to *#REGiy+#N$66.
 $967A OR A            ; Set the bits from #REGa.
 $967B RET             ; Return.
*$967C DEC (IY+$66)    ; Decrease *#REGiy+#N$66 by one.
 $967F JP P,$965F      ; Jump to #R$965F if #REGa is greater than or equal to
                       ; #REGa.
 $9682 LD (IY+$66),$01 ; Write #N$01 to *#REGiy+#N$66.
 $9686 OR A            ; Set the bits from #REGa.
 $9687 RET             ; Return.

; Routine at 9688
;
; Used by the routines at #R$9569 and #R$965F.
c$9688 PUSH BC         ; {Stash #REGbc and #REGhl on the stack.
 $9689 PUSH HL         ; }
 $968A LD HL,$F800     ; #REGhl=#R$F800.
 $968D LD E,$FE        ; #REGe=#N$FE.
*$968F LD A,E          ; #REGa=#REGe.
 $9690 IN A,($FE)      ; #REGa=byte from port #N$FE.
 $9692 OR %11100000    ; Set bits 5-7.
 $9694 CPL             ; Invert the bits in #REGa.
 $9695 LD (HL),A       ; Write #REGa to *#REGhl.
 $9696 INC HL          ; Increment #REGhl by one.
 $9697 RLC E           ; Rotate #REGe left (with carry).
 $9699 JR C,$968F      ; Jump to #R$968F if #REGhl is less than #REGa.
 $969B LD (IY+$64),$00 ; Write #N$00 to *#REGiy+#N$64.
 $969F LD HL,$F800     ; #REGhl=#R$F800.
 $96A2 BIT 0,(HL)      ; Test bit 0 of *#REGhl.
 $96A4 JR Z,$96B0      ; Jump to #R$96B0 if #REGhl is equal to #REGa.
 $96A6 SET 0,(IY+$64)  ; Set bit 0 of *#REGix+#N$64.
 $96AA RES 0,(HL)      ; Reset bit 0 of *#REGhl.
 $96AC LD E,$FE        ; #REGe=#N$FE.
 $96AE LD D,$01        ; #REGd=#N$01.
*$96B0 LD HL,$F807     ; #REGhl=#R$F807.
 $96B3 BIT 1,(HL)      ; Test bit 1 of *#REGhl.
 $96B5 JR Z,$96C1      ; Jump to #R$96C1 if #REGhl is equal to #REGa.
 $96B7 SET 1,(IY+$64)  ; Set bit 1 of *#REGix+#N$64.
 $96BB RES 1,(HL)      ; Reset bit 1 of *#REGhl.
 $96BD LD E,$7F        ; #REGe=#N$7F.
 $96BF LD D,$02        ; #REGd=#N$02.
*$96C1 PUSH IX         ; Stash #REGix on the stack.
 $96C3 LD IX,$F800     ; #REGix=#R$F800.
 $96C7 LD HL,$970D     ; #REGhl=#R$970D.
 $96CA LD B,$FE        ; #REGb=#N$FE.
*$96CC LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $96CF OR A            ; Set the bits from #REGa.
 $96D0 JR NZ,$96F0     ; Jump to #R$96F0 if #REGhl is not equal to #REGa.
 $96D2 INC IX          ; Increment #REGix by one.
 $96D4 LD A,$05        ; {#REGl+=#N$05.
 $96D6 ADD A,L         ;
 $96D7 LD L,A          ; }
 $96D8 JR NC,$96DB     ; Jump to #R$96DB if #REGhl is greater than or equal to
                       ; #REGa.
 $96DA INC H           ; Increment #REGh by one.
*$96DB RLC B           ; Rotate #REGb left (with carry).
 $96DD JR C,$96CC      ; Jump to #R$96CC if #REGh is less than #REGa.
 $96DF LD A,($F864)    ; {Compare *#R$F864 with itself for the return.
 $96E2 CP A            ; }
 $96E3 POP IX          ; {Restore #REGix, #REGhl and #REGbc from the stack.
 $96E5 POP HL          ;
 $96E6 POP BC          ; }
 $96E7 RET             ; Return.

; Data block at 96E8
b$96E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Routine at 96F0
;
; Used by the routine at #R$9688.
c$96F0 LD D,A        ; #REGd=#REGa.
 $96F1 LD E,B        ; #REGe=#REGb.
*$96F2 RR A          ; Rotate #REGa right.
 $96F4 INC HL        ; Increment #REGhl by one.
 $96F5 JR NC,$96F2   ; Jump to #R$96F2 if #REGhl is greater than or equal to
                     ; #N$00.
 $96F7 LD BC,$0028   ; #REGbc=#N($0028,$04,$04).
 $96FA LD A,($F864)  ; #REGa=*#R$F864.
 $96FD OR A          ; {Jump to #R$9707 if #REGa has even parity (P flag is
 $96FE JP PE,$9707   ; set).}
 $9701 ADD HL,BC     ; #REGhl+=#REGbc.
 $9702 SRL A         ; Shift #REGa right.
 $9704 JR Z,$9707    ; Jump to #R$9707 if #REGa is ??.
 $9706 ADD HL,BC     ; #REGhl+=#REGbc.
*$9707 LD A,(HL)     ; #REGa=*#REGhl.
 $9708 OR A          ; Set the bits from #REGa.
 $9709 POP IX        ; Restore #REGix from the stack.
 $970B POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $970C POP BC        ; }
 $970D RET           ; Return.

; Message at 970E
t$970E DEFM $00,"ZXCVASDFGQWERT1234509876POIUY",$0D,"LKJH ",$00,"MNB"

; Print Character
;
; Used by the routines at #R$9209, #R$964C, #R$9878 and #R$98CC.
;
; A Character to print
@label=PrintCharacter
c$9736 PUSH HL       ; {Stash the string pointer and the character to print on
 $9737 PUSH AF       ; the stack.}
; Check the buffer status.
 $9738 LD A,($F815)  ; {Jump to #R$9754 if *#R$F815 is empty.
 $973B AND A         ;
 $973C JR Z,$9754    ; }
; Buffer handling.
 $973E POP AF        ; #REGa=the character to print (from the stack).
 $973F PUSH AF       ; Keep a copy of the character to print on the stack.
 $9740 LD HL,($F80A) ; #REGhl=*#R$F80A.
 $9743 LD (HL),A     ; Write the character to print into the buffer.
 $9744 INC HL        ; Increment the character printing buffer pointer by one.
 $9745 LD ($F80A),HL ; Update the *#R$F80A.
; Update the buffer counter.
 $9748 LD A,($F815)  ; #REGa=*#R$F815.
 $974B DEC A         ; Decrease the buffer counter by one.
 $974C LD ($F815),A  ; Update the *#R$F815.
 $974F JR Z,$9776    ; Jump to #R$9776 if the buffer is now empty.
 $9751 POP AF        ; {Restore the character to print and the string pointer
 $9752 POP HL        ; from the stack.}
 $9753 RET           ; Return.

; Controller: Character Printing
;
; Used by the routine at #R$9736.
@label=Controller_CharacterPrinting
c$9754 POP AF        ; #REGa=the character to print (from the stack).
 $9755 PUSH AF       ; Keep a copy of the character to print on the stack.
 $9756 CP $20        ; {Jump to #R$978B if the character is a "normal" ASCII character
 $9758 JP NC,$978B   ; (#N$20 or higher).}
; Else this is a control character.
 $975B LD ($F814),A  ; Write the control code to *#R$F814.
 $975E LD HL,$9965   ; #REGhl=#R$9965.
 $9761 ADD A,L       ; {Add #REGa to #REGl.
 $9762 LD L,A        ; }
 $9763 JR NC,$9766   ; Jump to #R$9766 if there's no carry.
 $9765 INC H         ; Handle the carry.
@label=CharacterPrinting_NoCarry
*$9766 LD A,(HL)     ; {Write *#REGhl to *#R$F815.
 $9767 LD ($F815),A  ; }
 $976A AND A         ; {Jump to #R$9776 if #REGa is zero.
 $976B JR Z,$9776    ; }
; Reset the buffer pointer.
 $976D LD HL,$F80C   ; {Write #R$F80C to *#R$F80A.
 $9770 LD ($F80A),HL ; }
 $9773 POP AF        ; {Restore #REGaf and #REGhl from the stack.
 $9774 POP HL        ; }
 $9775 RET           ; Return.

; Handler: Control Code
;
; Used by the routines at #R$9736 and #R$9754.
@label=Handler_ControlCode
c$9776 LD A,($F814)  ; Retrieve *#R$F814 and store it in #REGa.
 $9779 ADD A,A       ; Multiply it by #N$02.
 $977A LD HL,$9985   ; #REGhl=#R$9985.
 $977D ADD A,L       ; {Calculate the offset.
 $977E LD L,A        ; }
 $977F JR NC,$9782   ; Jump to #R$9782 if there's no carry.
 $9781 INC H         ; Handle the carry.
@label=ControlCode_NoCarry
*$9782 LD A,(HL)     ; {Get the referenced address from the jump table.
 $9783 INC HL        ;
 $9784 LD H,(HL)     ;
 $9785 LD L,A        ; }
 $9786 PUSH HL       ; Stash the handler address on the stack.
 $9787 LD HL,$F818   ; #REGhl=#R$F818.
 $978A RET           ; Return.

; Handler: ASCII Character
;
; Used by the routine at #R$9754.
@label=Handler_ASCIICharacter
c$978B PUSH BC        ; {Stash #REGbc and #REGde on the stack.
 $978C PUSH DE        ; }
 $978D SUB $20        ; #REGa-=#N$20.
 $978F LD L,A         ; {Create an offset in #REGhl.
 $9790 LD H,$00       ; }
 $9792 ADD HL,HL      ; {#REGhl*=#N$08.
 $9793 ADD HL,HL      ;
 $9794 ADD HL,HL      ; }
 $9795 LD DE,($F81A)  ; {#REGhl+=*#R$F81A.
 $9799 ADD HL,DE      ; }
 $979A PUSH HL        ; Stash #REGhl on the stack.
 $979B LD A,($F819)   ; {Multiply *#R$F819 by #N$02 and store the result in
 $979E ADD A,A        ; #REGa.}
 $979F LD HL,$99C5    ; #REGhl=#R$99C5.
 $97A2 ADD A,L        ; {#REGl+=#REGa.
 $97A3 LD L,A         ; }
 $97A4 JR NC,$97A7    ; Jump to #R$97A7 if there's no carry.
 $97A6 INC H          ; Handle carry.
@label=ASCIICharacter_NoCarry
*$97A7 LD E,(HL)      ; #REGe=*#REGhl.
 $97A8 INC HL         ; Increment #REGhl by one.
 $97A9 LD D,(HL)      ; #REGd=*#REGhl.
 $97AA LD A,($F818)   ; #REGa=*#R$F818.
 $97AD EX DE,HL       ; Exchange the #REGde and #REGhl registers.
 $97AE ADD A,L        ; #REGa+=#REGl.
 $97AF LD L,A         ; #REGl=#REGa.
 $97B0 PUSH HL        ; {#REGde=#REGhl (using the stack).
 $97B1 POP DE         ; }
 $97B2 POP HL         ; Restore #REGhl from the stack.
 $97B3 PUSH DE        ; Stash #REGde on the stack.
 $97B4 LD B,$08       ; #REGb=#N$08.
*$97B6 LD A,(HL)      ; {Write *#REGhl to *#REGde.
 $97B7 LD (DE),A      ; }
 $97B8 INC D          ; Increment #REGd by one.
 $97B9 INC HL         ; Increment #REGhl by one.
 $97BA DJNZ $97B6     ; Decrease counter by one and loop back to #R$97B6 until
                      ; counter is zero.
 $97BC POP HL         ; Restore #REGhl from the stack.
 $97BD LD A,H         ; #REGa=#REGh.
 $97BE RRA            ; {RRA.
 $97BF RRA            ;
 $97C0 RRA            ; }
 $97C1 AND %00000011  ; Keep only bits 0-1.
 $97C3 ADD A,(IY+$1D) ; #REGa+=*#REGiy+#N$1D.
 $97C6 LD H,A         ; #REGh=#REGa.
 $97C7 LD A,($F81E)   ; #REGa=*#R$F81E.
 $97CA LD (HL),A      ; Write #REGa to *#REGhl.
 $97CB INC L          ; Increment #REGl by one.
 $97CC LD (HL),A      ; Write #REGa to *#REGhl.
 $97CD POP DE         ; {Restore #REGde and #REGbc from the stack.
 $97CE POP BC         ; }
 $97CF LD HL,$F818    ; #REGhl=#R$F818.
 $97D2 JP $9818       ; Jump to #R$9818.

; Control Code #N$00: Clear Screen
;
; Copies the attribute byte held by *#R$F81E to the address held by
; *#R$F81C #N$02FF times.
; .
; The routine then copies #N$00 to the address held by *#R$F82B, #N$17FF times.
@label=ControlCode_ClearScreen
c$97D5 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $97D6 PUSH DE       ; }
; Start with the attribute byte copy to *#R$F81C, #N$02FF times.
 $97D7 LD HL,($F81C) ; #REGhl=*#R$F81C.
 $97DA LD A,($F81E)  ; #REGa=*#R$F81E.
 $97DD LD BC,$02FF   ; #REGbc=#N$02FF.
 $97E0 CALL $97F0    ; Call #R$97F0.
; Next copy #N$00 to *#R$F82B, #N$17FF times.
 $97E3 LD HL,($F82B) ; #REGhl=*#R$F82B.
 $97E6 XOR A         ; #REGa=#N$00.
 $97E7 LD BC,$17FF   ; #REGbc=#N$17FF.
 $97EA CALL $97F0    ; Call #R$97F0.
 $97ED JP $9960      ; Jump to #R$9960.

; Helper: Copier
;
; Used by the routine at #R$97D5.
;
; HL Target address
; BC Count of times to copy
; A Value to copy
@label=Helper_Copier
c$97F0 LD D,H        ; {Copy #REGhl into #REGde.
 $97F1 LD E,L        ; }
 $97F2 INC DE        ; Increment #REGde by one.
 $97F3 LD (HL),A     ; Write #REGa to *#REGhl.
 $97F4 LDIR          ; Copy #REGa the number of times set in #REGbc.
 $97F6 RET           ; Return.

; Routine at 97F7
;
; Used by the routine at #R$9818.
c$97F7 LD A,($F817)  ; {Write *#R$F817 to *#REGhl.
 $97FA LD (HL),A     ; }

; Control Code #N$0A:
@label=ControlCode_10
c$97FB INC HL        ; Increment #REGhl by one.
 $97FC INC (HL)      ; Increment *#REGhl by one.
 $97FD LD A,(HL)     ; {Jump to #R$995D if *#REGhl is less than #N$18.
 $97FE CP $18        ;
 $9800 JP C,$995D    ; }
 $9803 DEC (HL)      ; Decrease *#REGhl by one.
 $9804 JP $995D      ; Jump to #R$995D.

; Control Code #N$0B:
@label=ControlCode_11
c$9807 INC HL        ; Increment #REGhl by one.
 $9808 DEC (HL)      ; Decrease *#REGhl by one.
 $9809 JP P,$995D    ; Jump to #R$995D if *#REGhl is greater than or equal to
                     ; #N$00.
 $980C INC (HL)      ; Increment *#REGhl by one.
 $980D JP $995D      ; Jump to #R$995D.

; Control Code #N$09:
@label=ControlCode_09
c$9810 DEC (HL)      ; Decrease *#REGhl by one.
 $9811 JP P,$995D    ; Jump to #R$995D if *#REGhl is greater than or equal to
                     ; #N$00.
 $9814 INC (HL)      ; Increment *#REGhl by one.
 $9815 JP $995D      ; Jump to #R$995D.

; Routine at 9818
;
; Used by the routine at #R$978B.
c$9818 INC (HL)      ; Increment *#REGhl by one.
 $9819 LD A,(HL)     ; {Jump to #R$995D if *#REGhl is less than #N$20.
 $981A CP $20        ;
 $981C JP C,$995D    ; }
 $981F JR $97F7      ; Jump to #R$97F7.

; Control Code #N$12: Set Bright Bit
@label=ControlCode_SetBrightBit
c$9821 LD HL,$F81E   ; Set a pointer to #R$F81E in #REGhl.
 $9824 LD A,(HL)     ; Fetch the current print attribute colour and store it in
                     ; #REGa.
 $9825 AND %10111111 ; Mask off the current BRIGHT bit.
 $9827 LD (HL),A     ; Write the value back to *#R$F81E.
 $9828 LD A,($F80C)  ; Fetch the new BRIGHT value from *#R$F80C.
 $982B CP $02        ; {Jump to #R$9957 if the new BRIGHT value is invalid (#N$02 or
 $982D JP NC,$9957   ; higher), valid values are either #N$00 or #N$01.}
 $9830 RRCA          ; {Shift the value into bit 6 so it applies for BRIGHT.
 $9831 RRCA          ; }
 $9832 OR (HL)       ; Set the new BRIGHT value with the current print attribute colour
                     ; held by *#REGhl.
 $9833 LD (HL),A     ; Write the updated value back to *#R$F81E.
 $9834 JP $995D      ; Jump to #R$995D.

; Control Code #N$10: Set Ink Colour
@label=ControlCode_SetInkColour
c$9837 LD HL,$F81E   ; Set a pointer to #R$F81E in #REGhl.
 $983A LD A,(HL)     ; Fetch the current print attribute colour and store it in
                     ; #REGa.
 $983B AND %11111000 ; Mask off the current INK bits.
 $983D LD (HL),A     ; Write the value back to *#R$F81E.
 $983E LD A,($F80C)  ; Fetch the new INK colour from *#R$F80C.
 $9841 CP $08        ; {Jump to #R$9957 if the new INK colour is invalid (#N$08 or higher),
 $9843 JP NC,$9957   ; valid ink values are between #N$00-#N$07.}
 $9846 OR (HL)       ; Set the new INK value with the current print attribute colour held
                     ; by *#REGhl.
 $9847 LD (HL),A     ; Write the updated value back to *#R$F81E.
 $9848 JP $995D      ; Jump to #R$995D.

; Control Code #N$11: Set Paper Colour
@label=ControlCode_SetPaperColour
c$984B LD HL,$F81E   ; Set a pointer to #R$F81E in #REGhl.
 $984E LD A,(HL)     ; Fetch the current print attribute colour and store it in
                     ; #REGa.
 $984F AND %11000111 ; Mask off the current PAPER bits.
 $9851 LD (HL),A     ; Write the value back to *#R$F81E.
 $9852 LD A,($F80C)  ; Fetch the new PAPER colour from *#R$F80C.
 $9855 CP $08        ; {Jump to #R$9957 if the new PAPER colour is invalid (#N$08 or
 $9857 JP NC,$9957   ; higher), valid ink values are between #N$00-#N$07.}
 $985A ADD A,A       ; {Shift the colour value into bits 3-5 so it applies for
 $985B ADD A,A       ; PAPER.
 $985C ADD A,A       ; }
 $985D OR (HL)       ; Set the new PAPER value with the current print attribute colour
                     ; held by *#REGhl.
 $985E LD (HL),A     ; Write the updated value back to *#R$F81E.
 $985F JP $995D      ; Jump to #R$995D.

; Routine at 9862
c$9862 LD A,($F80D)  ; #REGa=*#R$F80D.
 $9865 CP $20        ; {Jump to #R$9957 if #REGa is greater than #N$20.
 $9867 JP NC,$9957   ; }
 $986A LD (HL),A     ; Write #REGa to *#REGhl.
 $986B INC HL        ; Increment #REGhl by one.
 $986C LD A,($F80C)  ; #REGa=*#R$F80C.
 $986F CP $19        ; {Jump to #R$9957 if #REGa is greater than #N$19.
 $9871 JP NC,$9957   ; }
 $9874 LD (HL),A     ; Write #REGa to *#REGhl.
 $9875 JP $995D      ; Jump to #R$995D.

; Control Code #N$03: Repeater
@label=ControlCode_Repeater
c$9878 LD HL,($F80C) ; #REGhl=*#R$F80C.
@label=Repeater_Loop
*$987B LD A,H        ; #REGa=#REGh.
 $987C CALL $9736    ; Call #R$9736.
 $987F DEC L         ; Decrease #REGl by one.
 $9880 JR NZ,$987B   ; Jump to #R$987B until #REGl is zero.
 $9882 JP $995D      ; Jump to #R$995D.

; Routine at 9885
c$9885 LD A,($F80C)  ; {Jump to #R$9957 if *#R$F80C is greater than #N$20.
 $9888 CP $20        ;
 $988A JP NC,$9957   ; }
 $988D LD ($F817),A  ; Write #REGa to *#R$F817.
 $9890 JP $995D      ; Jump to #R$995D.

; Routine at 9893
c$9893 LD A,($F80C)  ; {Jump to #R$9957 if *#R$F80C is greater than #N$20.
 $9896 CP $20        ;
 $9898 JP NC,$9957   ; }
 $989B LD (HL),A     ; Write #REGa to *#REGhl.
 $989C JP $995D      ; Jump to #R$995D.

; Routine at 989F
c$989F LD HL,($F80C) ; {Write *#R$F80C to *#R$F82B.
 $98A2 LD ($F82B),HL ; }
 $98A5 JP $995D      ; Jump to #R$995D.

; Routine at 98A8
c$98A8 LD HL,($F80C) ; {Write *#R$F80C to *#R$F81A.
 $98AB LD ($F81A),HL ; }
 $98AE JP $995D      ; Jump to #R$995D.

; Control Code #N$0C:
@label=ControlCode_12
c$98B1 PUSH BC       ; Stash #REGbc on the stack.
 $98B2 LD HL,$F816   ; #REGhl=#R$F816.
 $98B5 LD B,(HL)     ; #REGb=*#REGhl.
 $98B6 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $98B8 CALL $964C    ; Call #R$964C.
 $98BB DEFB $08      ;
 $98BC DEFM "."      ; "#STR(#PC,$04,$01)".
 $98BD DEFB $08      ;
 $98BE DEFB $FF      ; Terminator.
 $98BF LD (HL),B     ; Write #REGb to *#REGhl.
 $98C0 JP $9961      ; Jump to #R$9961.

; Routine at 98C3
c$98C3 LD A,($F80C)  ; {Write *#R$F80C to *#R$F816.
 $98C6 LD ($F816),A  ; }
 $98C9 JP $995D      ; Jump to #R$995D.

; Control Code #N$01:
@label=ControlCode_01
c$98CC LD A,$10      ; {INK: #INK$07.
 $98CE CALL $9736    ;
 $98D1 LD A,$07      ;
 $98D3 CALL $9736    ; }
 $98D6 LD A,$11      ; {PAPER: ...
 $98D8 CALL $9736    ; }
 $98DB XOR A         ; {Set border to #INK$00.
 $98DC OUT ($FE),A   ; }
 $98DE LD ($F817),A  ; Write #N$00 to *#R$F817.
 $98E1 CALL $9736    ; ... PAPER: #INK$00.
 $98E4 LD HL,$0000   ; {Write #N($0000,$04,$04) to *#R$F818.
 $98E7 LD ($F818),HL ; }
 $98EA XOR A         ; {Write #N$00 to *#R$F816.
 $98EB LD ($F816),A  ; }
 $98EE LD HL,$4000   ; {Write #N$4000 to *#R$F82B.
 $98F1 LD ($F82B),HL ; }
 $98F4 LD HL,$8D75   ; {Write #R$8D75 to *#R$F81A.
 $98F7 LD ($F81A),HL ; }
 $98FA LD HL,$5800   ; {Write #N$5800 to *#R$F81C.
 $98FD LD ($F81C),HL ; }
 $9900 JP $995D      ; Jump to #R$995D.

; Control Code #N$02: Blank Screen
;
; .
;
; .
;
; Preserve the current registers.
@label=ControlCode_BlankScreen
c$9903 PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $9904 PUSH BC       ; }
; First blank the attribute buffer.
 $9905 LD HL,$5800   ; #REGhl=#N$5800 (attribute buffer location).
 $9908 LD DE,$5801   ; #REGde=#N$5801.
 $990B LD BC,$02FF   ; #REGbc=#N$02FF.
 $990E HALT          ; Halt operation (suspend CPU until the next interrupt).
 $990F LD (HL),$00   ; Write #COLOUR$00 to *#REGhl.
 $9911 LDIR          ; Copy the #N$00 to the rest of the attribute buffer.
; Next blank the screen buffer.
 $9913 LD B,$C0      ; Set a counter in #REGb of #N$C0; which is 24 rows x 8 pixels in
                     ; each.
 $9915 LD HL,$4000   ; #REGhl=#N$4000 (screen buffer location).
@label=BlankPixelLine_Loop
*$9918 LD C,L        ; Save the row start in #REGc.
 $9919 LD A,$20      ; Set a counter in #REGa of #N$20 for the number of bytes
                     ; in a row.
@label=BlankByte_Loop
*$991B LD (HL),$00   ; Write #N$00 to *#REGhl.
 $991D INC L         ; Move to the next byte in this line.
 $991E DEC A         ; Decrease the byte counter by one.
 $991F JR NZ,$991B   ; Jump back to #R$991B until the byte clearing is done for this pixel
                     ; row.
 $9921 LD L,C        ; Back to the start of the line.
 $9922 CALL $A8CC    ; Call #R$A8CC.
 $9925 DJNZ $9918    ; Decrease counter by one and loop back to #R$9918 until
                     ; counter is zero.
 $9927 JP $995B      ; Jump to #R$995B.

; Control Code #N$07:
;
; .
;
; .
;
; #HTML(#AUDIO(tick.wav)(#INCLUDE(Tick)))
@label=ControlCode_07
c$992A PUSH BC       ; Stash #REGbc on the stack.
 $992B LD C,$00      ; Set initial speaker state in #REGc to OFF.
 $992D LD B,$14      ; Set the repeat loop counter in #REGb to #N$14.
@label=ControlCode_07_OuterLoop
*$992F LD HL,$0014   ; Set the delay loop in #REGhl to #N($0014,$04,$04).
@label=ControlCode_07_DelayLoop
*$9932 DEC HL        ; Decrease the delay loop by one.
 $9933 LD A,H        ; {Jump back to #R$9932 until the delay loop is zero.
 $9934 OR L          ;
 $9935 JR NZ,$9932   ; }
 $9937 LD A,C        ; {Flip the current speaker state.
 $9938 XOR %00010000 ;
 $993A LD C,A        ; }
 $993B OUT ($FE),A   ; Send it to the speaker.
 $993D DJNZ $992F    ; Decrease the repeat loop counter by one and loop back to #R$992F
                     ; until the repeat loop counter is zero.
 $993F JP $9961      ; Jump to #R$9961.

; Sound: Menu Tick
;
; Used by the routines at #R$933F and #R$A97A.
;
; .
;
; #HTML(#AUDIO(menu.wav)(#INCLUDE(Menu)))
@label=Sound_MenuTick
c$9942 LD C,$00      ; Set initial speaker state in #REGc to OFF.
 $9944 LD B,$3C      ; Set the repeat loop counter in #REGb to #N$3C.
@label=MenuTick_OuterLoop
*$9946 LD HL,$000A   ; Set the delay loop in #REGhl to #N($000A,$04,$04).
@label=MenuTick_DelayLoop
*$9949 DEC HL        ; Decrease the delay loop by one.
 $994A LD A,H        ; {Jump back to #R$9949 until the delay loop is zero.
 $994B OR L          ;
 $994C JR NZ,$9949   ; }
 $994E LD A,C        ; {Flip the current speaker state.
 $994F XOR %00010000 ;
 $9951 LD C,A        ; }
 $9952 OUT ($FE),A   ; Send it to the speaker.
 $9954 DJNZ $9946    ; Decrease the repeat loop counter by one and loop back to #R$9946
                     ; until the repeat loop counter is zero.
 $9956 RET           ; Return.

; Helper: Return
;
; Provides a method of a control code being routed to just do nothing.
@label=Helper_Return
c$9957 RET           ; Return.

; Unused
u$9958 DEFB $C3,$BE,$95 ; Jump to #R$95BE.

; Control Code: Return
;
; Used by the routine at #R$9903.
@label=ControlCode_FullReturn_1
c$995B POP BC        ; {Restore #REGbc and #REGde from the stack.
 $995C POP DE        ; }
; This entry point is used by the routines at #R$97FB, #R$9807, #R$9810,
; #R$9818, #R$9821, #R$9837, #R$984B, #R$9862, #R$9878, #R$9885, #R$9893,
; #R$989F, #R$98A8, #R$98C3 and #R$98CC.
@label=ControlCode_Return_1
*$995D POP AF        ; {Restore #REGaf and #REGhl from the stack.
 $995E POP HL        ; }
 $995F RET           ; Return.
; This entry point is used by the routine at #R$97D5.
@label=ControlCode_FullReturn_2
*$9960 POP DE        ; Restore #REGde from the stack.
; This entry point is used by the routines at #R$98B1 and #R$992A.
@label=ControlCode_Return_2
*$9961 POP BC        ; {Restore #REGbc, #REGaf and #REGhl from the stack.
 $9962 POP AF        ;
 $9963 POP HL        ; }
 $9964 RET           ; Return.

; Table: Control Codes
@label=Table_ControlCodes
g$9965 DEFB $00,$00,$00,$02,$00,$00,$00,$00
 $996D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9975 DEFB $01,$01,$01,$01,$01,$02,$02,$00
 $997D DEFB $01,$02,$02,$00,$00,$00,$00,$00

; Jump Table: Control Codes
@label=JumpTable_ControlCodes
g$9985 DEFW $97D5    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9987 DEFW $98CC    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9989 DEFW $9903    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $998B DEFW $9878    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $998D DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $998F DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9991 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9993 DEFW $992A    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9995 DEFW $9810    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9997 DEFW $9818    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $9999 DEFW $97FB    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $999B DEFW $9807    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $999D DEFW $98B1    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $999F DEFW $97F7    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99A1 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99A3 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99A5 DEFW $9837    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99A7 DEFW $984B    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99A9 DEFW $9821    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99AB DEFW $9885    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99AD DEFW $9893    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99AF DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99B1 DEFW $9862    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99B3 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99B5 DEFW $98C3    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99B7 DEFW $989F    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99B9 DEFW $98A8    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99BB DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99BD DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99BF DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99C1 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).
 $99C3 DEFW $9957    ; #N((#PC-$9985)/$02): #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100).

; Data block at 99C5
w$99C5 DEFW $4000
 $99C7 DEFW $4020
 $99C9 DEFW $4040
 $99CB DEFW $4060
 $99CD DEFW $4080
 $99CF DEFW $40A0
 $99D1 DEFW $40C0
 $99D3 DEFW $40E0
 $99D5 DEFW $4800
 $99D7 DEFW $4820
 $99D9 DEFW $4840
 $99DB DEFW $4860
 $99DD DEFW $4880
 $99DF DEFW $48A0
 $99E1 DEFW $48C0
 $99E3 DEFW $48E0
 $99E5 DEFW $5000
 $99E7 DEFW $5020
 $99E9 DEFW $5040
 $99EB DEFW $5060
 $99ED DEFW $5080
 $99EF DEFW $50A0
 $99F1 DEFW $50C0
 $99F3 DEFW $50E0

; Control Type
;
; #TABLE(default,centre) { =h Byte | =h Meaning }
; { #N$00 | 1 Keyboard }
; { #N$01 | 2 Kempston Joystick }
; { #N$02 | 3 Interface Two }
; { #N$03 | 4 Cursor Joystick }
; TABLE#
@label=ControlType
g$99F5 DEFB $00

; Dart Pointer Position
;
; Holds the number of the menu selection the dart points at in the main
; menu.
; #TABLE(default,centre) { =h Byte | =h Meaning }
; { #N$00 | 1 Keyboard }
; { #N$01 | 2 Kempston Joystick }
; { #N$02 | 3 Interface Two }
; { #N$03 | 4 Cursor Joystick }
; TABLE#
@label=DartPointer_Position
g$99F6 DEFB $00

; Interrupt Driven Controls
;
; Used by the routine at #R$95ED.
@label=InterruptDrivenControls
c$99F7 LD C,$00      ; #REGc=#N$00.
 $99F9 LD HL,$9A6F   ; #REGhl=#R$9A6F.
 $99FC PUSH HL       ; Stash #REGhl on the stack.
 $99FD LD A,($99F5)  ; #REGa=*#R$99F5.
 $9A00 DEC A         ; Decrease #REGa by one.
 $9A01 RET M         ; Return if *#R$99F5 was set to "keyboard" (#N$00).
 $9A02 ADD A,A       ; Multiply #REGa by #N$02.
 $9A03 LD HL,$9A10   ; {#REGhl=#R$9A10+#REGa.
 $9A06 ADD A,L       ;
 $9A07 LD L,A        ; }
 $9A08 JR NC,$9A0B   ; Jump to #R$9A0B if #REGa is greater than or equal to
                     ; #N$00.
 $9A0A INC H         ; Increment #REGh by one.
*$9A0B LD A,(HL)     ; #REGa=*#REGhl.
 $9A0C INC HL        ; Increment #REGhl by one.
 $9A0D LD H,(HL)     ; #REGh=*#REGhl.
 $9A0E LD L,A        ; #REGl=#REGa.
 $9A0F JP (HL)       ; Jump to the address held in *#REGhl.

; Jump Table: Control Methods
@label=JumpTable_ControlMethods
g$9A10 DEFW $9A16
 $9A12 DEFW $9A1D
 $9A14 DEFW $9A3A

; Control Method: Kempston Joystick
;
; .
;
; O:C Control byte
@label=ControlMethod_Kempston
c$9A16 XOR A         ; #REGa=#N$00.
 $9A17 IN A,($1F)    ; #REGa=byte from port #N$1F.
 $9A19 AND %00011111 ; Keep only bits 0-4.
 $9A1B LD C,A        ; Store the result in #REGc.
 $9A1C RET           ; Return.

; Control Method: Interface Two
;
; .
;
; O:B
; O:C Control byte
; O:HL Pointer to Key Map
@label=ControlMethod_InterfaceTwo
c$9A1D POP HL         ; Restore #REGhl from the stack.
 $9A1E CALL $9A6F     ; Call #R$9A6F.
 $9A21 AND %11100000  ; Keep only bits 5-7.
 $9A23 LD C,A         ; Store the result in #REGc.
 $9A24 LD HL,$9A2B    ; #REGhl=#R$9A2B.
 $9A27 LD B,%00001000 ; #REGb=#N$08.
 $9A29 JR $9A74       ; Jump to #R$9A74.

; Key Map: Interface Two
;
; .
;
; .
;
; #MAP((#PC-$9A2B)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
@label=KeyMap_InterfaceTwo
g$9A2B DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A2C DEFB %00000001 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                      ; TABLE#}
 $9A2D DEFB $30       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A2B)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A2E DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A2F DEFB %00000010 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                      ; TABLE#}
 $9A30 DEFB $39       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A2B)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A31 DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A32 DEFB %00000100 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                      ; TABLE#}
 $9A33 DEFB $38       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A2B)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A34 DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A35 DEFB %00010000 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                      ; TABLE#}
 $9A36 DEFB $36       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A2B)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A37 DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A38 DEFB %00001000 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                      ; TABLE#}
 $9A39 DEFB $37       ; "#CHR(#PEEK(#PC))".

; Control Method: Cursor Joystick
;
; .
;
; O:B
; O:C Control byte
; O:HL Pointer to Key Map
@label=ControlMethod_Cursor
c$9A3A POP HL         ; Restore #REGhl from the stack.
 $9A3B CALL $9A6F     ; Call #R$9A6F.
 $9A3E AND %11100000  ; Keep only bits 5-7.
 $9A40 LD C,A         ; Store the result in #REGc.
 $9A41 LD HL,$9A48    ; #REGhl=#R$9A48.
 $9A44 LD B,%00001000 ; #REGb=#N$08.
 $9A46 JR $9A74       ; Jump to #R$9A74.

; Key Map: Cursor Joystick
;
; .
;
; .
;
; #MAP((#PC-$9A48)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
@label=KeyMap_Cursor
g$9A48 DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A49 DEFB %00000001 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; #IF(#PEEK(#PC)==$EF)(
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 },
                      ; { #N$F7 | 1 | 2 | 3 | 4 | 5 })
                      ; TABLE#}
 $9A4A DEFB $30       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A48)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A4B DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A4C DEFB %00001000 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; #IF(#PEEK(#PC)==$EF)(
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 },
                      ; { #N$F7 | 1 | 2 | 3 | 4 | 5 })
                      ; TABLE#}
 $9A4D DEFB $37       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A48)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A4E DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A4F DEFB %00010000 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; #IF(#PEEK(#PC)==$EF)(
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 },
                      ; { #N$F7 | 1 | 2 | 3 | 4 | 5 })
                      ; TABLE#}
 $9A50 DEFB $36       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A48)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A51 DEFB $F7       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A52 DEFB %00010000 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; #IF(#PEEK(#PC)==$EF)(
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 },
                      ; { #N$F7 | 1 | 2 | 3 | 4 | 5 })
                      ; TABLE#}
 $9A53 DEFB $35       ; "#CHR(#PEEK(#PC))".
; #MAP((#PC-$9A48)/$03)(Fire,1:Up,2:Down,3:Left,4:Right).
 $9A54 DEFB $EF       ; {#TABLE(default,centre,centre,centre,centre,centre,centre)
 $9A55 DEFB %00000100 ; { =h,r2 Port Number | =h,c5 Bit }
                      ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                      ; #IF(#PEEK(#PC)==$EF)(
                      ; { #N$EF | 0 | 9 | 8 | 7 | 6 },
                      ; { #N$F7 | 1 | 2 | 3 | 4 | 5 })
                      ; TABLE#}
 $9A56 DEFB $38       ; "#CHR(#PEEK(#PC))".

; Data block at 9A57
b$9A57 DEFB $FE,$01

; Data block at 9A59
b$9A59 DEFB $5F,$7F,$01,$5F,$FF,$01,$5F

; User-Defined Keys
@label=UserDefinedKeys_Fire
g$9A60 DEFB $7F,$02  ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#
 $9A62 DEFB $4D      ; "#CHR(#PEEK(#PC))".
@label=UserDefinedKeys_Up
 $9A63 DEFB $FB,$01  ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FB | Q | W | E | R | T }
                     ; TABLE#
 $9A65 DEFB $51      ; "#CHR(#PEEK(#PC))".
@label=UserDefinedKeys_Down
 $9A66 DEFB $FD,$01  ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FD | A | S | D | F | G }
                     ; TABLE#
 $9A68 DEFB $41      ; "#CHR(#PEEK(#PC))".
@label=UserDefinedKeys_Left
 $9A69 DEFB $DF,$02  ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#
 $9A6B DEFB $4F      ; "#CHR(#PEEK(#PC))".
@label=UserDefinedKeys_Right
 $9A6C DEFB $DF,$01  ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#
 $9A6E DEFB $50      ; "#CHR(#PEEK(#PC))".

; Controls
;
; Used by the routines at #R$9A1D and #R$9A3A.
@label=Controls
c$9A6F LD B,$01      ; #REGb=#N$01.
 $9A71 LD HL,$9A57   ; #REGhl=#R$9A57.
; This entry point is used by the routines at #R$9A1D and #R$9A3A.
*$9A74 LD A,(HL)     ; #REGa=*#REGhl.
 $9A75 INC HL        ; Increment #REGhl by one.
 $9A76 IN A,($FE)    ; #REGa=byte from port #N$FE.
 $9A78 AND (HL)      ; Merge the bits from *#REGhl.
 $9A79 INC HL        ; {Increment #REGhl by two.
 $9A7A INC HL        ; }
 $9A7B JR NZ,$9A7E   ; Jump to #R$9A7E if #REGhl is not equal to *#REGhl.
 $9A7D SCF           ; Set the carry flag.
*$9A7E RL B          ; Rotate #REGb left.
 $9A80 JR NC,$9A74   ; Jump to #R$9A74 if #REGhl is greater than or equal to
                     ; *#REGhl.
 $9A82 LD A,B        ; #REGa=#REGb.
 $9A83 OR C          ; Set the bits from #REGc.
 $9A84 LD C,A        ; #REGc=#REGa.
 $9A85 RET           ; Return.

; Routine at 9A86
c$9A86 LD A,B        ; #REGa=#REGb.
 $9A87 LD HL,$91AE   ; #REGhl=#R$91AB(#N$91AE).
 $9A8A ADD A,L       ; #REGa+=#REGl.
 $9A8B LD L,A        ; #REGl=#REGa.
 $9A8C JR NC,$9A8F   ; Jump to #R$9A8F if ?? is greater than or equal to #N$00.
 $9A8E INC H         ; Increment #REGh by one.
*$9A8F LD A,(HL)     ; #REGa=*#REGhl.
 $9A90 ADD A,C       ; #REGa+=#REGc.
 $9A91 CP $3A        ; Compare #REGa with #N$3A.
 $9A93 JR NC,$9A99   ; Jump to #R$9A99 if #REGa is greater than or equal to
                     ; #N$3A.
 $9A95 LD (HL),A     ; Write #REGa to *#REGhl.
 $9A96 JP $91A1      ; Jump to #R$91A1.
*$9A99 SUB $0A       ; #REGa-=#N$0A.
 $9A9B LD (HL),A     ; Write #REGa to *#REGhl.
 $9A9C DEC B         ; Decrease #REGb by one.
 $9A9D LD C,$01      ; #REGc=#N$01.
 $9A9F LD A,B        ; #REGa=#REGb.
 $9AA0 INC A         ; Increment #REGa by one.
 $9AA1 JP Z,$91A1    ; Jump to #R$91A1 if #REGa is equal to #N$01.
 $9AA4 JR $9A86      ; Jump to #R$9A86.

; Player Leg Counts
@label=Leg_1UP
g$9AA6 DEFB $00
@label=Leg_2UP
 $9AA7 DEFB $00

; Bust Counter
@label=BustCounter
g$9AA8 DEFB $00

; Game status buffer entry at 9AA9
g$9AA9 DEFB $00
 $9AAA DEFB $00

; Current Opponent Portrait
@label=CurrentOpponent_Portrait
g$9AAB DEFW $0000

; Data block at 9AAD
b$9AAD DEFB $00

; Current Opponent Pub Scene
@label=CurrentOpponent_PubScene
g$9AAE DEFW $0000

; Player Current Total
;
; Player totals when playing a two player game.
; .
; #R$9B1F is used for single player games instead.
@label=2UP_Total
g$9AB0 DEFW $0000
@label=1UP_Total
 $9AB2 DEFW $0000

; Data block at 9AB4
b$9AB4 DEFB $00
 $9AB5 DEFB $00
 $9AB6 DEFB $00
 $9AB7 DEFB $00

; Active Player
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Player }
; { #N$00 | Player Two }
; { #N$01 | Player One }
; TABLE#
@label=ActivePlayer
g$9AB8 DEFB $00

; Zipper Reveal Positions
;
; Used by the routine at #R$9253.
@label=ZipperPosition_Upper
g$9AB9 DEFW $0000
@label=ZipperPosition_Lower
 $9ABB DEFW $0000

; Game status buffer entry at 9ABD
g$9ABD DEFW $0000

; Game status buffer entry at 9ABF
g$9ABF DEFB $00,$00,$00,$00

; Floating Hand Co-ordinates
@label=FloatingHandCoordinates
g$9AC3 DEFB $00
 $9AC4 DEFB $00

; Game status buffer entry at 9AC5
g$9AC5 DEFB $00
 $9AC6 DEFB $00

; Floating Hand Frame Number
@label=FloatingHand_FrameNumber
g$9AC7 DEFB $00

; Table: Floating Hand Graphics
;
; .
;
; .
;
; Frame #N($01+(#PC-$9AC8)/$04):
@label=Table_FloatingHandGraphics
g$9AC8 DEFW $7D00
 $9ACA DEFW $8320
; Frame #N($01+(#PC-$9AC8)/$04):
 $9ACC DEFW $7E88
 $9ACE DEFW $84A8
; Frame #N($01+(#PC-$9AC8)/$04):
 $9AD0 DEFW $8010
 $9AD2 DEFW $8630
; Frame #N($01+(#PC-$9AC8)/$04):
 $9AD4 DEFW $8198
 $9AD6 DEFW $87B8
; Frame #N($01+(#PC-$9AC8)/$04):
 $9AD8 DEFW $8010
 $9ADA DEFW $8630
; Frame #N($01+(#PC-$9AC8)/$04):
 $9ADC DEFW $7E88
 $9ADE DEFW $84A8

; Game status buffer entry at 9AE0
g$9AE0 DEFB $46,$06,$F8,$01,$00,$01,$80,$00
 $9AE8 DEFB $29,$00,$00,$00

; Game status buffer entry at 9AEC
g$9AEC DEFB $14,$01,$12,$04,$0D,$06

; Game status buffer entry at 9AF2
g$9AF2 DEFB $14,$05,$0C,$09,$0E,$0B

; Game status buffer entry at 9AF8
g$9AF8 DEFB $03,$13,$07,$10,$08,$0B

; Game status buffer entry at 9AFE
g$9AFE DEFB $03,$11,$02,$0F,$0A,$06

; Game status buffer entry at 9B04
g$9B04 DEFB $00
 $9B05 DEFB $00
 $9B06 DEFB $00
 $9B07 DEFB $02,$02,$02,$01,$01,$01,$01,$01
 $9B0F DEFB $00

; Game status buffer entry at 9B10
g$9B10 DEFB $00

; Game status buffer entry at 9B11
g$9B11 DEFB $00

; Game status buffer entry at 9B12
g$9B12 DEFB $00

; Floating Hand Graphic Data
@label=FloatingHand_GraphicData
g$9B13 DEFW $0000

; Floating Hand Mask Data
@label=FloatingHand_MaskData
g$9B15 DEFW $0000

; Game status buffer entry at 9B17
g$9B17 DEFW $0000

; Game status buffer entry at 9B19
g$9B19 DEFW $0000

; Game status buffer entry at 9B1B
g$9B1B DEFW $0000

; Game status buffer entry at 9B1D
g$9B1D DEFW $0000

; Total
;
; Total (when playing a single player game).
@label=Total
g$9B1F DEFB $00,$00

; Quarter Finals Opponent Data
@label=QuarterFinals_OpponentData
g$9B21 DEFW $0000

; Semi Finals Opponent Data
@label=SemiFinals_OpponentData
g$9B23 DEFW $0000

; Game status buffer entry at 9B25
g$9B25 DEFB $00
 $9B26 DEFB $00
 $9B27 DEFB $00
 $9B28 DEFB $00
 $9B29 DEFB $00
 $9B2A DEFB $00
 $9B2B DEFB $00
 $9B2C DEFB $00
 $9B2D DEFB $00
 $9B2E DEFB $00
 $9B2F DEFB $00,$00,$00,$00
 $9B33 DEFB $00,$00
 $9B35 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B4D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B55 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B5D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B65 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B6D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B75 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B7D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B85 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B8D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B95 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9B9D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BC5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BCD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BDD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BE5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BFD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C05 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C0D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C15 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C35 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C4D DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at 9C55
g$9C55 DEFW $0000
 $9C57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at 9C9F
g$9C9F DEFW $0000
 $9CA1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CA9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CC9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CD1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CD9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CE1 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at 9CE9
g$9CE9 DEFW $0000
 $9CEB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CFB DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D03 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D0B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D13 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D1B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9D2B DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Routine at 9D33
;
; Used by the routine at #R$94E6.
@label=InitialiseNewGame
c$9D33 CALL $A7A5    ; Call #R$A7A5.
 $9D36 CALL $A835    ; Call #R$A835.
 $9D39 CALL $A851    ; Call #R$A851.
 $9D3C CALL $A505    ; Call #R$A505.
 $9D3F JP $A8F8      ; Jump to #R$A8F8.

; Routine at 9D42
;
; Used by the routines at #R$A97A and #R$AADC.
c$9D42 CALL $CC62       ; Call #R$CC62.
 $9D45 LD A,($9B2C)     ; {Jump to #R$9D53 if *#R$9B2C is zero.
 $9D48 AND A            ;
 $9D49 JR Z,$9D53       ; }
 $9D4B CALL $A41E       ; Call #R$A41E.
 $9D4E LD A,$02         ; {Write #N$02 to *#R$9B0F.
 $9D50 LD ($9B0F),A     ; }
; This entry point is used by the routine at #R$A272.
*$9D53 CALL $CC62       ; Call #R$CC62.
 $9D56 LD A,($9B2C)     ; {Jump to #R$9D6A if *#R$9B2C is zero.
 $9D59 AND A            ;
 $9D5A JR Z,$9D6A       ; }
 $9D5C LD A,($9B2D)     ; {Jump to #R$AA0A if *#R$9B2D is zero.
 $9D5F AND A            ;
 $9D60 JP Z,$AA0A       ; }
 $9D63 LD A,($9B2A)     ; {Jump to #R$A9E5 if *#R$9B2A is not equal to zero.
 $9D66 AND A            ;
 $9D67 JP NZ,$A9E5      ; }
*$9D6A XOR A            ; {Write #N$00 to; #LIST
 $9D6B LD ($9B06),A     ; { *#R$9B06 }
 $9D6E LD ($9B04),A     ; { *#R$9B04 }
 $9D71 LD ($9B05),A     ; { *#R$9B05 }
                        ; LIST#}
 $9D74 LD HL,$9B25      ; #REGhl=#R$9B25.
 $9D77 DEC (HL)         ; Decrease *#REGhl by one.
 $9D78 JP P,$9DB3       ; Jump to #R$9DB3 if *#REGhl is greater than or equal
                        ; to #REGa.
 $9D7B PUSH HL          ; Stash #REGhl on the stack.
 $9D7C LD HL,$9B07      ; #REGhl=#R$9B07.
 $9D7F LD A,($9B10)     ; {#REGe=*#R$9B10.
 $9D82 LD E,A           ; }
 $9D83 LD D,$00         ; #REGd=#N$00.
 $9D85 ADD HL,DE        ; #REGhl+=#REGde.
 $9D86 LD A,(HL)        ; #REGa=*#REGhl.
 $9D87 POP HL           ; Restore #REGhl from the stack.
 $9D88 LD (HL),A        ; Write #REGa to *#REGhl.
; Increment the floating hand frame number.
 $9D89 LD A,($9AC7)     ; #REGa=*#R$9AC7.
 $9D8C INC A            ; Increment #REGa by one.
 $9D8D LD ($9AC7),A     ; Write the updated frame number back to *#R$9AC7.
; Have we gone past the last frame?
 $9D90 CP $06           ; {Jump to #R$9D98 if the frame number is not equal to
 $9D92 JR NZ,$9D98      ; #N$06.}
; The frame count has gone too high, so reset it.
 $9D94 XOR A            ; {Reset *#R$9AC7 back to #N$00.
 $9D95 LD ($9AC7),A     ; }
; Convert the frame count to an offset in #REGde.
@label=CalculateHand_Offset
*$9D98 LD A,($9AC7)     ; #REGa=*#R$9AC7.
 $9D9B ADD A,A          ; {Multiply #REGa by #N$04 and store the result in
 $9D9C ADD A,A          ; #REGe.
 $9D9D LD E,A           ; }
 $9D9E LD D,$00         ; #REGd=#N$00.
; Now fetch the frame and mask pointers from the table at #R$9AC8.
 $9DA0 LD HL,$9AC8      ; {Add the offset in #REGde to #R$9AC8.
 $9DA3 ADD HL,DE        ; }
 $9DA4 LD E,(HL)        ; {Fetch the frame graphic data pointer and store it in
 $9DA5 INC HL           ; #REGde.
 $9DA6 LD D,(HL)        ; }
 $9DA7 LD ($9B13),DE    ; Write #REGde to *#R$9B13.
 $9DAB INC HL           ; {Fetch the mask graphic data pointer and store it in
 $9DAC LD E,(HL)        ; #REGde.
 $9DAD INC HL           ;
 $9DAE LD D,(HL)        ; }
 $9DAF LD ($9B15),DE    ; Write #REGde to *#R$9B15.
*$9DB3 LD A,($F821)     ; {Jump to #R$A2AD if bit 4 of *#R$F821 is unset.
 $9DB6 BIT 4,A          ;
 $9DB8 JP Z,$A2AD       ; }
 $9DBB LD HL,$9AA9      ; #REGhl=#R$9AA9.
 $9DBE INC (HL)         ; Increment *#REGhl by one.
 $9DBF LD HL,$0001      ; {Write #N($0001,$04,$04) to *#R$9B1B.
 $9DC2 LD ($9B1B),HL    ; }
 $9DC5 LD HL,$0064      ; {Write #N($0064,$04,$04) to *#R$9B1D.
 $9DC8 LD ($9B1D),HL    ; }
 $9DCB LD A,($9B11)     ; #REGa=*#R$9B11.
 $9DCE ADD A,$10        ; #REGa+=#N$10.
 $9DD0 LD ($9B12),A     ; Write #REGa to *#R$9B12.
 $9DD3 LD HL,($9AC3)    ; #REGhl=*#R$9AC3.
 $9DD6 INC L            ; Increment #REGl by one.
 $9DD7 LD A,H           ; #REGa=#REGh.
 $9DD8 SUB $05          ; #REGa-=#N$05.
 $9DDA LD H,A           ; #REGh=#REGa.
 $9DDB LD ($9AC5),HL    ; Write #REGhl to *#R$9AC5.
 $9DDE LD A,($9B0F)     ; #REGa=*#R$9B0F.
 $9DE1 INC A            ; Increment #REGa by one.
 $9DE2 LD ($9B0F),A     ; Write #REGa to *#R$9B0F.
 $9DE5 LD HL,$8940      ; {Write #R$8940 to *#R$9B13.
 $9DE8 LD ($9B13),HL    ; }
 $9DEB LD HL,$8AC8      ; {Write #R$8AC8 to *#R$9B15.
 $9DEE LD ($9B15),HL    ; }
 $9DF1 LD HL,$8C50      ; {Copy #N$0120 bytes of data from *#R$8C50 to
 $9DF4 LD DE,$9B35      ; *#R$9B35.
 $9DF7 LD BC,$0120      ;
 $9DFA LDIR             ; }
 $9DFC LD HL,$9B35      ; #REGhl=#R$9B35.
 $9DFF LD B,$03         ; #REGb=#N$03.
 $9E01 LD A,$A7         ; {Write #N$A7 to *#R$A641.
 $9E03 LD ($A641),A     ; }
*$9E06 PUSH BC          ; {Stash #REGbc and #REGhl on the stack.
 $9E07 PUSH HL          ; }
 $9E08 CALL $A639       ; Call #R$A639.
 $9E0B POP HL           ; Restore #REGhl from the stack.
 $9E0C LD DE,$0030      ; {#REGhl+=#N($0030,$04,$04).
 $9E0F ADD HL,DE        ; }
 $9E10 POP BC           ; Restore #REGbc from the stack.
 $9E11 DJNZ $9E06       ; Decrease counter by one and loop back to #R$9E06
                        ; until counter is zero.
 $9E13 LD B,$03         ; #REGb=#N$03.
 $9E15 LD A,$37         ; {Write #N$37 to *#R$A641.
 $9E17 LD ($A641),A     ; }
*$9E1A PUSH BC          ; {Stash #REGbc and #REGhl on the stack.
 $9E1B PUSH HL          ; }
 $9E1C CALL $A639       ; Call #R$A639.
 $9E1F POP HL           ; Restore #REGhl from the stack.
 $9E20 LD DE,$0030      ; {#REGhl+=#N($0030,$04,$04).
 $9E23 ADD HL,DE        ; }
 $9E24 POP BC           ; Restore #REGbc from the stack.
 $9E25 DJNZ $9E1A       ; Decrease counter by one and loop back to #R$9E1A
                        ; until counter is zero.
 $9E27 LD HL,$9B35      ; {Write #R$9B35 to *#R$9B17.
 $9E2A LD ($9B17),HL    ; }
 $9E2D LD HL,$9BC5      ; {Write #R$9BC5 to *#R$9B19.
 $9E30 LD ($9B19),HL    ; }
 $9E33 LD HL,$9AC4      ; #REGhl=#R$9AC4.
 $9E36 INC (HL)         ; Increment *#REGhl by one.
 $9E37 CALL $A461       ; Call #R$A461.
 $9E3A CALL $A491       ; Call #R$A491.
 $9E3D LD B,$10         ; #REGb=#N$10.
*$9E3F PUSH BC          ; Stash #REGbc on the stack.
 $9E40 LD BC,($9B1B)    ; #REGbc=*#R$9B1B.
*$9E44 DEC BC           ; Decrease #REGbc by one.
 $9E45 LD A,B           ; {Jump to #R$9E44 until #REGbc is zero.
 $9E46 OR C             ;
 $9E47 JR NZ,$9E44      ; }
 $9E49 LD HL,($9B1B)    ; #REGhl=*#R$9B1B.
 $9E4C LD BC,($9B1D)    ; #REGbc=*#R$9B1D.
 $9E50 ADD HL,BC        ; #REGhl+=#REGbc.
 $9E51 LD ($9B1B),HL    ; Write #REGhl to *#R$9B1B.
 $9E54 LD HL,$9B12      ; #REGhl=#R$9B12.
 $9E57 DEC (HL)         ; Decrease *#REGhl by one.
 $9E58 CALL $A491       ; Call #R$A491.
 $9E5B POP BC           ; Restore #REGbc from the stack.
 $9E5C DJNZ $9E3F       ; Decrease counter by one and loop back to #R$9E3F
                        ; until counter is zero.
; Small pause.
 $9E5E LD BC,$1770      ; #REGbc=#N($1770,$04,$04).
@label=SmallPause_Loop
*$9E61 DEC BC           ; Decrease #REGbc by one.
 $9E62 LD A,B           ; {Jump to #R$9E61 until #REGbc is zero.
 $9E63 OR C             ;
 $9E64 JR NZ,$9E61      ; }
 $9E66 LD B,$10         ; #REGb=#N$10.
*$9E68 PUSH BC          ; Stash #REGbc on the stack.
 $9E69 LD A,B           ; {Jump to #R$9E7C if #REGb is less than #N$08.
 $9E6A CP $08           ;
 $9E6C JR C,$9E7C       ; }
 $9E6E LD HL,$9B65      ; {Write #R$9B65 to *#R$9B17.
 $9E71 LD ($9B17),HL    ; }
 $9E74 LD HL,$9BF5      ; {Write #R$9BF5 to *#R$9B19.
 $9E77 LD ($9B19),HL    ; }
 $9E7A JR $9E88         ; Jump to #R$9E88.
*$9E7C LD HL,$9B95      ; {Write #R$9B95 to *#R$9B17.
 $9E7F LD ($9B17),HL    ; }
 $9E82 LD HL,$9C25      ; {Write #R$9C25 to *#R$9B19.
 $9E85 LD ($9B19),HL    ; }
*$9E88 LD BC,($9B1B)    ; #REGbc=*#R$9B1B.
*$9E8C DEC BC           ; Decrease #REGbc by one.
 $9E8D LD A,B           ; {Jump to #R$9E8C until #REGbc is zero.
 $9E8E OR C             ;
 $9E8F JR NZ,$9E8C      ; }
 $9E91 LD HL,($9B1B)    ; #REGhl=*#R$9B1B.
 $9E94 LD BC,($9B1D)    ; #REGbc=*#R$9B1D.
 $9E98 SBC HL,BC        ; #REGhl-=#REGbc.
 $9E9A LD ($9B1B),HL    ; Write #REGhl to *#R$9B1B.
 $9E9D LD HL,$9B12      ; #REGhl=#R$9B12.
 $9EA0 INC (HL)         ; Increment *#REGhl by one.
 $9EA1 CALL $A491       ; Call #R$A491.
 $9EA4 POP BC           ; Restore #REGbc from the stack.
 $9EA5 DJNZ $9E68       ; Decrease counter by one and loop back to #R$9E68
                        ; until counter is zero.
 $9EA7 CALL $A8EA       ; Call #R$A8EA.
 $9EAA LD HL,$9C55      ; #REGhl=#R$9C55.
 $9EAD LD DE,$004A      ; #REGde=#N($004A,$04,$04).
 $9EB0 LD A,($9B0F)     ; #REGa=*#R$9B0F.
 $9EB3 DEC A            ; Decrease #REGa by one.
*$9EB4 JR Z,$9EBA       ; Jump to #R$9EBA if #REGa is equal to #REGc.
 $9EB6 ADD HL,DE        ; #REGhl+=#REGde.
 $9EB7 DEC A            ; Decrease #REGa by one.
 $9EB8 JR $9EB4         ; Jump to #R$9EB4.
*$9EBA LD DE,($9AC5)    ; #REGde=*#R$9AC5.
 $9EBE DEC E            ; Decrease #REGe by one.
 $9EBF LD (HL),E        ; Write #REGe to *#REGhl.
 $9EC0 INC HL           ; Increment #REGhl by one.
 $9EC1 LD (HL),D        ; Write #REGd to *#REGhl.
 $9EC2 INC HL           ; Increment #REGhl by one.
 $9EC3 INC D            ; {Increment #REGd by two.
 $9EC4 INC D            ; }
 $9EC5 CALL $A4AB       ; Call #R$A4AB.
 $9EC8 LD B,$05         ; #REGb=#N$05.
 $9ECA LD DE,($9AC5)    ; #REGde=*#R$9AC5.
 $9ECE LD HL,$7800      ; #REGhl=#R$7800.
 $9ED1 CALL $A774       ; Call #R$A774.
 $9ED4 LD A,($9AC5)     ; {Multiply *#R$9AC5 by #N$08 and store the result in
 $9ED7 ADD A,A          ; #REGb.
 $9ED8 ADD A,A          ;
 $9ED9 ADD A,A          ;
 $9EDA LD B,A           ; }
 $9EDB LD A,($9B10)     ; #REGa=*#R$9B10.
 $9EDE ADD A,B          ; #REGa+=#REGb.
 $9EDF LD B,$A0         ; #REGb=#N$A0.
 $9EE1 SUB B            ; #REGa-=#REGb.
 $9EE2 ADD A,$02        ; #REGa+=#N$02.
 $9EE4 LD ($9B28),A     ; Write #REGa to *#R$9B28.
 $9EE7 LD E,A           ; #REGe=#REGa.
 $9EE8 LD D,$00         ; #REGd=#N$00.
 $9EEA LD A,($9AC6)     ; #REGa=*#R$9AC6.
 $9EED ADD A,$03        ; #REGa+=#N$03.
 $9EEF ADD A,A          ; #REGa+=#REGa.
 $9EF0 ADD A,A          ; #REGa+=#REGa.
 $9EF1 ADD A,A          ; #REGa+=#REGa.
 $9EF2 LD B,A           ; #REGb=#REGa.
 $9EF3 LD A,($9B11)     ; #REGa=*#R$9B11.
 $9EF6 ADD A,B          ; #REGa+=#REGb.
 $9EF7 LD B,A           ; #REGb=#REGa.
 $9EF8 LD A,$C0         ; #REGa=#N$C0.
 $9EFA SUB B            ; #REGa-=#REGb.
 $9EFB LD B,$60         ; #REGb=#N$60.
 $9EFD SUB B            ; #REGa-=#REGb.
 $9EFE ADD A,$02        ; #REGa+=#N$02.
 $9F00 LD ($9B29),A     ; Write #REGa to *#R$9B29.
 $9F03 LD H,A           ; #REGh=#REGa.
 $9F04 LD L,$00         ; #REGl=#N$00.
 $9F06 LD A,E           ; #REGa=#REGe.
 $9F07 AND A            ; {Jump to #R$9F18 if #REGd is greater than or equal to
 $9F08 JP P,$9F18       ; #REGa.}
 $9F0B NEG              ; NEG.
 $9F0D LD E,A           ; #REGe=#REGa.
 $9F0E LD A,H           ; #REGa=#REGh.
 $9F0F AND A            ; {Jump to #R$9F27 if #REGd is greater than or equal to
 $9F10 JP P,$9F27       ; #REGa.}
 $9F13 NEG              ; NEG.
 $9F15 LD H,A           ; #REGh=#REGa.
 $9F16 JR $9F2C         ; Jump to #R$9F2C.
*$9F18 LD A,H           ; #REGa=#REGh.
 $9F19 AND A            ; {Jump to #R$9F22 if #REGd is greater than or equal to
 $9F1A JP P,$9F22       ; #REGa.}
 $9F1D NEG              ; NEG.
 $9F1F LD H,A           ; #REGh=#REGa.
 $9F20 JR $9F31         ; Jump to #R$9F31.
*$9F22 LD BC,$9AEC      ; #REGbc=#R$9AEC.
 $9F25 JR $9F34         ; Jump to #R$9F34.
*$9F27 LD BC,$9AF2      ; #REGbc=#R$9AF2.
 $9F2A JR $9F34         ; Jump to #R$9F34.
*$9F2C LD BC,$9AF8      ; #REGbc=#R$9AF8.
 $9F2F JR $9F34         ; Jump to #R$9F34.
*$9F31 LD BC,$9AFE      ; #REGbc=#R$9AFE.
*$9F34 LD ($9ABD),BC    ; Write #REGbc to *#R$9ABD.
 $9F38 LD A,E           ; #REGa=#REGe.
 $9F39 AND A            ; {Jump to #R$9F41 if #REGd is not equal to #REGa.
 $9F3A JR NZ,$9F41      ; }
 $9F3C LD BC,$0646      ; #REGbc=#N($0646,$04,$04).
 $9F3F JR $9F4A         ; Jump to #R$9F4A.
*$9F41 LD BC,$0000      ; #REGbc=#N($0000,$04,$04).
*$9F44 SBC HL,DE        ; #REGhl-=#REGde (with carry).
 $9F46 INC BC           ; Increment #REGbc by one.
 $9F47 JR NC,$9F44      ; Jump to #R$9F44 if #REGbc is greater than or equal to
                        ; #REGa.
 $9F49 DEC BC           ; Decrease #REGbc by one.
*$9F4A LD H,B           ; #REGh=#REGb.
 $9F4B LD L,C           ; #REGl=#REGc.
 $9F4C XOR A            ; #REGa=#N$00.
 $9F4D LD DE,$9AE0      ; #REGde=#R$9AE0.
*$9F50 EX DE,HL         ; Exchange the #REGde and #REGhl registers.
 $9F51 LD C,(HL)        ; #REGc=*#REGhl.
 $9F52 INC HL           ; Increment #REGhl by one.
 $9F53 LD B,(HL)        ; #REGb=*#REGhl.
 $9F54 INC HL           ; Increment #REGhl by one.
 $9F55 EX DE,HL         ; Exchange the #REGde and #REGhl registers.
 $9F56 AND A            ; Set flags.
 $9F57 SBC HL,BC        ; #REGhl-=#REGbc.
 $9F59 ADD HL,BC        ; #REGhl+=#REGbc.
 $9F5A JR NC,$9F5F      ; Jump to #R$9F5F if #REGhl is greater than or equal to
                        ; #REGa.
 $9F5C INC A            ; Increment #REGa by one.
 $9F5D JR $9F50         ; Jump to #R$9F50.
*$9F5F LD HL,($9ABD)    ; #REGhl=*#R$9ABD.
 $9F62 LD E,A           ; #REGe=#REGa.
 $9F63 LD D,$00         ; #REGd=#N$00.
 $9F65 ADD HL,DE        ; #REGhl+=#REGde.
 $9F66 LD A,(HL)        ; #REGa=*#REGhl.
 $9F67 LD ($AF49),A     ; Write #REGa to *#R$AF49.
 $9F6A LD ($9B2E),A     ; Write #REGa to *#R$9B2E.
 $9F6D XOR A            ; {Write #N$00 to *#R$AF4A.
 $9F6E LD ($AF4A),A     ; }
 $9F71 LD A,($9B28)     ; #REGa=*#R$9B28.
 $9F74 AND A            ; {Jump to #R$9F7A if #REGa is greater than or equal to
 $9F75 JP P,$9F7A       ; #REGa.}
 $9F78 NEG              ; NEG.
*$9F7A LD E,A           ; #REGe=#REGa.
 $9F7B LD D,$00         ; #REGd=#N$00.
 $9F7D LD HL,$0000      ; #REGhl=#N($0000,$04,$04).
*$9F80 AND A            ; {Jump to #R$9F87 if #REGa is equal to #REGa.
 $9F81 JR Z,$9F87       ; }
 $9F83 ADD HL,DE        ; #REGhl+=#REGde.
 $9F84 DEC A            ; Decrease #REGa by one.
 $9F85 JR $9F80         ; Jump to #R$9F80.
*$9F87 PUSH HL          ; Stash #REGhl on the stack.
 $9F88 LD A,($9B29)     ; #REGa=*#R$9B29.
 $9F8B AND A            ; {Jump to #R$9F91 if #REGa is greater than or equal to
 $9F8C JP P,$9F91       ; #REGa.}
 $9F8F NEG              ; NEG.
*$9F91 LD E,A           ; #REGe=#REGa.
 $9F92 LD D,$00         ; #REGd=#N$00.
 $9F94 LD HL,$0000      ; #REGhl=#N($0000,$04,$04).
*$9F97 AND A            ; {Jump to #R$9F9E if #REGa is equal to #REGa.
 $9F98 JR Z,$9F9E       ; }
 $9F9A ADD HL,DE        ; #REGhl+=#REGde.
 $9F9B DEC A            ; Decrease #REGa by one.
 $9F9C JR $9F97         ; Jump to #R$9F97.
*$9F9E EX DE,HL         ; Exchange the #REGde and #REGhl registers.
 $9F9F POP HL           ; Restore #REGhl from the stack.
 $9FA0 ADD HL,DE        ; #REGhl+=#REGde.
 $9FA1 LD BC,$000A      ; #REGbc=#N($000A,$04,$04).
 $9FA4 AND A            ; Set flags.
 $9FA5 SBC HL,BC        ; #REGhl-=#REGbc.
 $9FA7 ADD HL,BC        ; #REGhl+=#REGbc.
 $9FA8 JR NC,$9FB9      ; Jump to #R$9FB9 if #REGa is greater than or equal to
                        ; #REGa.
 $9FAA LD A,$32         ; #REGa=#N$32.
 $9FAC LD ($AF49),A     ; Write #REGa to *#R$AF49.
 $9FAF LD ($9B2E),A     ; Write #REGa to *#R$9B2E.
 $9FB2 LD HL,$9B05      ; #REGhl=#R$9B05.
 $9FB5 LD (HL),$01      ; Write #N$01 to *#REGhl.
 $9FB7 JR $A010         ; Jump to #R$A010.
*$9FB9 LD BC,$003B      ; #REGbc=#N($003B,$04,$04).
 $9FBC AND A            ; Set flags.
 $9FBD SBC HL,BC        ; #REGhl-=#REGbc.
 $9FBF ADD HL,BC        ; #REGhl+=#REGbc.
 $9FC0 JR NC,$9FCC      ; Jump to #R$9FCC if #REGa is greater than or equal to
                        ; #REGa.
 $9FC2 LD A,$19         ; #REGa=#N$19.
 $9FC4 LD ($AF49),A     ; Write #REGa to *#R$AF49.
 $9FC7 LD ($9B2E),A     ; Write #REGa to *#R$9B2E.
 $9FCA JR $A010         ; Jump to #R$A010.
*$9FCC LD BC,$0678      ; #REGbc=#N($0678,$04,$04).
 $9FCF AND A            ; Set flags.
 $9FD0 SBC HL,BC        ; #REGhl-=#REGbc.
 $9FD2 ADD HL,BC        ; #REGhl+=#REGbc.
 $9FD3 JR C,$A010       ; Jump to #R$A010 if #REGa is less than #REGa.
 $9FD5 LD BC,$0900      ; #REGbc=#N($0900,$04,$04).
 $9FD8 AND A            ; Set flags.
 $9FD9 SBC HL,BC        ; #REGhl-=#REGbc.
 $9FDB ADD HL,BC        ; #REGhl+=#REGbc.
 $9FDC JR NC,$9FE9      ; Jump to #R$9FE9 if #REGa is greater than or equal to
                        ; #REGa.
 $9FDE LD A,($AF49)     ; #REGa=*#R$AF49.
 $9FE1 LD B,A           ; #REGb=#REGa.
 $9FE2 ADD A,A          ; #REGa+=#REGa.
 $9FE3 ADD A,B          ; #REGa+=#REGb.
 $9FE4 LD ($AF49),A     ; Write #REGa to *#R$AF49.
 $9FE7 JR $A010         ; Jump to #R$A010.
*$9FE9 LD BC,$12C2      ; #REGbc=#N($12C2,$04,$04).
 $9FEC AND A            ; Set flags.
 $9FED SBC HL,BC        ; #REGhl-=#REGbc.
 $9FEF ADD HL,BC        ; #REGhl+=#REGbc.
 $9FF0 JR C,$A010       ; Jump to #R$A010 if #REGa is less than #REGa.
 $9FF2 LD BC,$1690      ; #REGbc=#N$1690.
 $9FF5 AND A            ; Set flags.
 $9FF6 SBC HL,BC        ; #REGhl-=#REGbc.
 $9FF8 ADD HL,BC        ; #REGhl+=#REGbc.
 $9FF9 JR NC,$A009      ; Jump to #R$A009 if #REGa is greater than or equal to
                        ; #REGa.
 $9FFB LD A,($AF49)     ; #REGa=*#R$AF49.
 $9FFE ADD A,A          ; #REGa+=#REGa.
 $9FFF LD ($AF49),A     ; Write #REGa to *#R$AF49.
 $A002 LD HL,$9B04      ; {Write #N$01 to *#R$9B04.
 $A005 LD (HL),$01      ; }
 $A007 JR $A010         ; Jump to #R$A010.
*$A009 XOR A            ; {Write #N$00 to; #LIST { *#R$AF49 } { *#R$9B2E }
 $A00A LD ($AF49),A     ; LIST#
 $A00D LD ($9B2E),A     ; }
*$A010 LD A,($9B2C)     ; #REGa=*#R$9B2C.
 $A013 AND A            ; {Jump to #R$A046 if #REGa is equal to #REGa.
 $A014 JR Z,$A046       ; }
 $A016 CALL $A434       ; Call #R$A434.
 $A019 LD A,($9B2E)     ; {#REGb=*#R$9B2E
 $A01C LD B,A           ; }
 $A01D LD A,($9B2D)     ; #REGa=*#R$9B2D.
 $A020 CP B             ; {Jump to #R$A0B9 if #REGa is not equal to #REGb.
 $A021 JP NZ,$A0B9      ; }
 $A024 DEC A            ; Decrease #REGa by one.
 $A025 LD ($9B2D),A     ; Write #REGa to *#R$9B2D.
 $A028 CALL $964C       ; Call #R$964C.
 $A02B DEFB $16,$05,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A02E DEFM "     "     ; "#STR#(#PC,$04,$05)".
 $A033 DEFB $16,$06,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A036 DEFM "     "     ; "#STR#(#PC,$04,$05)".
 $A03B DEFB $16,$07,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A03E DEFM "     "     ; "#STR#(#PC,$04,$05)".
 $A043 DEFB $FF         ; Terminator.
 $A044 JR $A0B9         ; Jump to #R$A0B9.
*$A046 LD DE,($AF49)    ; #REGde=*#R$AF49.
 $A04A LD A,($AF49)     ; {#REGb=*#R$AF49.
 $A04D LD B,A           ; }
 $A04E LD A,($9AAD)     ; #REGa=*#R$9AAD.
 $A051 ADD A,B          ; #REGa+=#REGb.
 $A052 LD ($9AAD),A     ; Write #REGa to *#R$9AAD.
 $A055 LD A,($9AB7)     ; {Jump to #R$A06B if *#R$9AB7 is zero.
 $A058 AND A            ;
 $A059 JR Z,$A06B       ; }
 $A05B LD A,($9AB8)     ; {Jump to #R$A066 if *#R$9AB8 is zero.
 $A05E AND A            ;
 $A05F JR Z,$A066       ; }
 $A061 LD HL,($9AB0)    ; #REGhl=*#R$9AB0.
 $A064 JR $A06E         ; Jump to #R$A06E.
*$A066 LD HL,($9AB2)    ; #REGhl=*#R$9AB2.
 $A069 JR $A06E         ; Jump to #R$A06E.
*$A06B LD HL,($9B1F)    ; #REGhl=*#R$9B1F.
*$A06E SBC HL,DE        ; #REGhl-=#REGde (with carry).
 $A070 JP C,$A0D6       ; Jump to #R$A0D6 if ?? is less than #REGa.
 $A073 JP NZ,$A08F      ; Jump to #R$A08F if ?? is not equal to #REGa.
 $A076 LD A,($9B04)     ; {Jump to #R$A087 if *#R$9B04 is not equal to zero.
 $A079 AND A            ;
 $A07A JP NZ,$A087      ; }
 $A07D LD A,($9B05)     ; {Jump to #R$A087 if *#R$9B05 is not equal to zero.
 $A080 AND A            ;
 $A081 JP NZ,$A087      ; }
 $A084 JP $A0D6         ; Jump to #R$A0D6.
*$A087 LD HL,$9B06      ; {Write #N$01 to *#R$9B06.
 $A08A LD (HL),$01      ; }
 $A08C JP $A103         ; Jump to #R$A103.
*$A08F LD A,L           ; #REGa=#REGl.
 $A090 DEC A            ; Decrease #REGa by one.
 $A091 OR H             ; Set the bits from #REGh.
 $A092 JP Z,$A0D6       ; Jump to #R$A0D6 if #REGa is equal to #REGh.
 $A095 LD A,($9AB7)     ; {Jump to #R$A0AB if *#R$9AB7 is zero.
 $A098 AND A            ;
 $A099 JR Z,$A0AB       ; }
 $A09B LD A,($9AB8)     ; {Jump to #R$A0A6 if *#R$9AB8 is zero.
 $A09E AND A            ;
 $A09F JR Z,$A0A6       ; }
 $A0A1 LD ($9AB0),HL    ; Write #REGhl to *#R$9AB0.
 $A0A4 JR $A0AE         ; Jump to #R$A0AE.
*$A0A6 LD ($9AB2),HL    ; Write #REGhl to *#R$9AB2.
 $A0A9 JR $A0AE         ; Jump to #R$A0AE.
*$A0AB LD ($9B1F),HL    ; Write #REGhl to *#R$9B1F.
*$A0AE CALL $AE17       ; Call #R$AE17.
 $A0B1 LD A,($AF5E)     ; #REGa=*#R$AF5D(#N$AF5E).
 $A0B4 ADD A,$02        ; #REGa+=#N$02.
 $A0B6 LD ($AF5E),A     ; Write #REGa to *#R$AF5D(#N$AF5E).
*$A0B9 CALL $B77A       ; Call #R$B77A.
 $A0BC LD HL,$0810      ; {Write #N$0810 to *#R$9AC3.
 $A0BF LD ($9AC3),HL    ; }
 $A0C2 CALL $A461       ; Call #R$A461.
 $A0C5 LD A,($9B2C)     ; {Jump to #R$9D42 if *#R$9B2C is not equal to zero.
 $A0C8 AND A            ;
 $A0C9 JP NZ,$9D42      ; }
 $A0CC LD A,($9B0F)     ; {Jump to #R$A103 if *#R$9B0F is equal to #N$03.
 $A0CF CP $03           ;
 $A0D1 JR Z,$A103       ; }
 $A0D3 JP $A37A         ; Jump to #R$A37A.

; Handler: Bust
;
; Used by the routine at #R$9D42.
@label=Handler_Bust
c$A0D6 CALL $964C       ; Call #R$964C.
 $A0D9 DEFB $16,$0A,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A0DC DEFM "BUST[["    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(bust)
 $A0E2 DEFB $FF         ; Terminator.
 $A0E3 LD HL,$9AA8      ; #REGhl=#R$9AA8.
 $A0E6 INC (HL)         ; Increment *#REGhl by one.
 $A0E7 LD HL,($9B33)    ; #REGhl=*#R$9B33.
 $A0EA LD A,($9AB7)     ; {Jump to #R$A100 if *#R$9AB7 is zero.
 $A0ED AND A            ;
 $A0EE JR Z,$A100       ; }
 $A0F0 LD A,($9AB8)     ; {Jump to #R$A0FB if *#R$9AB8 is zero.
 $A0F3 AND A            ;
 $A0F4 JR Z,$A0FB       ; }
; Update 2UP total.
 $A0F6 LD ($9AB0),HL    ; Write #REGhl to *#R$9AB0.
 $A0F9 JR $A103         ; Jump to #R$A103.
; Update 1UP total.
@label=Bust_Update1Up_Total
*$A0FB LD ($9AB2),HL    ; Write #REGhl to *#R$9AB2.
 $A0FE JR $A103         ; Jump to #R$A103.
; Update the total for single player games.
@label=Bust_UpdateSingleUp_Total
*$A100 LD ($9B1F),HL    ; Write #REGhl to *#R$9B1F.
; This entry point is used by the routine at #R$9D42.
*$A103 LD HL,$0810      ; {Write #N$0810 to *#R$9AC3.
 $A106 LD ($9AC3),HL    ; }
 $A109 LD A,($9AB7)     ; {Jump to #R$A11F if *#R$9AB7 is zero.
 $A10C AND A            ;
 $A10D JR Z,$A11F       ; }
 $A10F LD A,($9AB8)     ; {Jump to #R$A11A if *#R$9AB8 is zero.
 $A112 AND A            ;
 $A113 JR Z,$A11A       ; }
 $A115 LD HL,($9AB0)    ; #REGhl=*#R$9AB0.
 $A118 JR $A122         ; Jump to #R$A122.
*$A11A LD HL,($9AB2)    ; #REGhl=*#R$9AB2.
 $A11D JR $A122         ; Jump to #R$A122.
*$A11F LD HL,($9B1F)    ; {Write *#R$9B1F to *#R$AF49.
*$A122 LD ($AF49),HL    ; }
 $A125 LD HL,$0C01      ; {Write #N$0C01 to *#R$AF5D.
 $A128 LD ($AF5D),HL    ; }
 $A12B CALL $AE17       ; Call #R$AE17.
 $A12E LD A,($9AAD)     ; {Jump to #R$A13E if *#R$9AAD is not equal to #N$B4.
 $A131 CP $B4           ;
 $A133 JR NZ,$A13E      ; }
 $A135 LD A,($9AA8)     ; {Jump to #R$A13E if *#R$9AA8 is not zero.
 $A138 AND A            ;
 $A139 JR NZ,$A13E      ; }
 $A13B CALL $CA7C       ; Call #R$CA7C.
*$A13E XOR A            ; {Write #N$00 to; #LIST
 $A13F LD ($9AAD),A     ; { *#R$9AAD }
 $A142 LD ($9AA8),A     ; { *#R$9AA8 }
                        ; LIST#}
 $A145 LD A,($9B06)     ; {Jump to #R$A165 if *#R$9B06 is not zero.
 $A148 AND A            ;
 $A149 JR NZ,$A165      ; }
 $A14B CALL $AE04       ; Call #R$AE04.
 $A14E LD A,($9AB7)     ; {Jump to #R$A15C if *#R$9AB7 is zero.
 $A151 AND A            ;
 $A152 JR Z,$A15C       ; }
 $A154 CALL $AAA8       ; Call #R$AAA8.
 $A157 CALL $A7F8       ; Call #R$A7F8.
 $A15A JR $A165         ; Jump to #R$A165.

; Messaging: You Win!
;
; Used by the routine at #R$A0D6.
@label=Messaging_YouWin
c$A15C CALL $A7F8                     ; Call #R$A7F8.
 $A15F CALL $CBC8                     ; Call #R$CBC8.
 $A162 CALL $AB2E                     ; Call #R$AB2E.
; This entry point is used by the routine at #R$A0D6.
*$A165 XOR A                          ; {Write #N$00 to *#R$9B0F.
 $A166 LD ($9B0F),A                   ; }
 $A169 LD A,($9B06)                   ; {Jump to #R$A272 if *#R$9B06 is zero.
 $A16C AND A                          ;
 $A16D JP Z,$A272                     ; }
 $A170 CALL $A7F8                     ; Call #R$A7F8.
 $A173 LD HL,$0F01                    ; Set the co-ordinates in #REGhl to
                                      ; #N$0F/ #N$01.
 $A176 LD BC,$0806                    ; Set the block dimensions in #REGbc to
                                      ; #N$08/ #N$06.
 $A179 LD A,$00                       ; {Call #R$B5A6. with #COLOUR$00
 $A17B CALL $B5A6                     ; }
 $A17E CALL $964C                     ; Call #R$964C.
 $A181 DEFB $16,$10,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A184 DEFM "GREAT "                  ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(great)
 $A18A DEFB $16,$11,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A18D DEFM "SHOT[ "                  ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(shot)
 $A193 DEFB $16,$12,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A196 DEFM "      "                  ; "#STR#(#PC,$04,$06)".
 $A19C DEFB $16,$13,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A19F DEFM " YOU  "                  ; #FONT#(:(#STR(#PC,$04,$05)))$8D75,attr=$47(you)
 $A1A5 DEFB $16,$14,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A1A8 DEFM " WIN[ "                  ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(win)
 $A1AE DEFB $FF                       ; Terminator.
 $A1AF LD A,$01                       ; #REGa=#N$01.
 $A1B1 CALL $CB1E                     ; Call #R$CB1E.
 $A1B4 LD A,($9AB7)                   ; {Jump to #R$A1F5 if *#R$9AB7 is zero.
 $A1B7 AND A                          ;
 $A1B8 JR Z,$A1F5                     ; }
 $A1BA CALL $964C                     ; Call #R$964C.
 $A1BD DEFB $16,$14,$05               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A1C0 DEFM " "                       ; "#STR#(#PC,$04,$01)".
 $A1C1 DEFB $16,$15,$01               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A1C4 DEFM "PLAYER"                  ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(player)
 $A1CA DEFB $FF                       ; Terminator.
 $A1CB LD A,($9AB8)                   ; {Jump to #R$A1DE if *#R$9AB8 is zero.
 $A1CE AND A                          ;
 $A1CF JR Z,$A1DE                     ; }
 $A1D1 CALL $964C                     ; Call #R$964C.
 $A1D4 DEFB $16,$16,$02               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A1D7 DEFM "TWO["                    ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(two!)
 $A1DB DEFB $FF                       ; Terminator.
 $A1DC JR $A1E9                       ; Jump to #R$A1E9.
*$A1DE CALL $964C                     ; Call #R$964C.
 $A1E1 DEFB $16,$16,$02               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A1E4 DEFM "ONE["                    ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(one!)
 $A1E8 DEFB $FF                       ; Terminator.
*$A1E9 CALL $AE04                     ; Call #R$AE04.
 $A1EC CALL $AE04                     ; Call #R$AE04.
 $A1EF CALL $AE04                     ; Call #R$AE04.
 $A1F2 JP $933F                       ; Jump to #R$933F.
*$A1F5 CALL $AE04                     ; Call #R$AE04.
 $A1F8 LD A,($9AB4)                   ; #REGa=*#R$9AB4.
 $A1FB CP $04                         ; {Jump to #R$AA5A if #REGa is equal to
 $A1FD JP Z,$AA5A                     ; #N$04.}
 $A200 CP $02                         ; {Jump to #R$AA7B if #REGa is equal to
 $A202 JP Z,$AA7B                     ; #N$02.}
 $A205 CALL $964C                     ; Call #R$964C.
 $A208 DEFB $11,$00                   ; PAPER: #INK(#PEEK(#PC+$01)).
 $A20A DEFB $10,$07                   ; INK: #INK(#PEEK(#PC+$01)).
 $A20C DEFB $12,$01                   ; FLASH:
                                      ; #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A20E DEFB $00                       ;
 $A20F DEFB $16,$08,$05               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A212 DEFM "YOU BEAT JAMMY JIM"      ; #FONT#(:(#STR(#PC,$04,$12)))$8D75,attr=$47(beat-jammy-jim)
 $A224 DEFB $16,$09,$05               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A227 DEFM "IN THE FINAL[["          ; #FONT#(:(#STR(#PC,$04,$0E)))$8D75,attr=$47(in-the-final)
 $A235 DEFB $16,$0B,$05               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A238 DEFM "YOU SHOULD TAKE THE"     ; #FONT#(:(#STR(#PC,$04,$13)))$8D75,attr=$47(should-take-up)
 $A24B DEFB $16,$0C,$05               ; PRINT AT: #N(#PEEK(#PC+$01)),
                                      ; #N(#PEEK(#PC+$02)).
 $A24E DEFM "GAME UP PROFESIONALLY[[" ; #FONT#(:(#STR(#PC,$04,$17)))$8D75,attr=$47(professionally)
 $A265 DEFB $FF                       ; Terminator.
 $A266 CALL $AE04                     ; Call #R$AE04.
 $A269 CALL $AE04                     ; Call #R$AE04.
 $A26C CALL $AE04                     ; Call #R$AE04.
 $A26F JP $933F                       ; Jump to #R$933F.

; Routine at A272
;
; Used by the routine at #R$A15C.
c$A272 LD A,($B412)  ; {Jump to #R$933F if *#R$B412 is not equal to #N$00.
 $A275 AND A         ;
 $A276 JP NZ,$933F   ; }
 $A279 CALL $A7A5    ; Call #R$A7A5.
 $A27C CALL $A3A4    ; Call #R$A3A4.
 $A27F LD HL,$0201   ; {Write #N$0201 to *#R$AF5D.
 $A282 LD ($AF5D),HL ; }
 $A285 LD A,($9AB7)  ; {Jump to #R$A29B if *#R$9AB7 is zero.
 $A288 AND A         ;
 $A289 JR Z,$A29B    ; }
 $A28B LD A,($9AB8)  ; {Jump to #R$A296 if *#R$9AB8 is zero.
 $A28E AND A         ;
 $A28F JR Z,$A296    ; }
 $A291 LD HL,($9AB0) ; #REGhl=*#R$9AB0.
 $A294 JR $A29E      ; Jump to #R$A29E.
*$A296 LD HL,($9AB2) ; #REGhl=*#R$9AB2.
 $A299 JR $A29E      ; Jump to #R$A29E.
*$A29B LD HL,($9B1F) ; {Write *#R$9B1F to; #LIST
*$A29E LD ($AF49),HL ; { *#R$AF49 }
 $A2A1 LD ($9B33),HL ; { *#R$9B33 }
                     ; LIST#}
 $A2A4 CALL $AE17    ; Call #R$AE17.
 $A2A7 LD HL,$0501   ; {Write #N$0501 to *#R$AF5D.
 $A2AA LD ($AF5D),HL ; }
; This entry point is used by the routine at #R$9D42.
*$A2AD LD HL,$9AB6   ; #REGhl=#R$9AB6.
 $A2B0 LD A,($F821)  ; #REGa=*#R$F821.
 $A2B3 BIT 1,A       ; Test bit 1 of #REGa.
 $A2B5 JR Z,$A2B9    ; Jump to #R$A2B9 if ?? is equal to #REGa.
 $A2B7 LD (HL),$01   ; Write #N$01 to *#REGhl.
*$A2B9 BIT 0,A       ; Test bit 0 of #REGa.
 $A2BB JR Z,$A2BF    ; Jump to #R$A2BF if ?? is equal to #REGa.
 $A2BD LD (HL),$00   ; Write #N$00 to *#REGhl.
*$A2BF BIT 3,A       ; Test bit 3 of #REGa.
 $A2C1 JR Z,$A2C5    ; Jump to #R$A2C5 if ?? is equal to #REGa.
 $A2C3 LD (HL),$03   ; Write #N$03 to *#REGhl.
*$A2C5 BIT 2,A       ; Test bit 2 of #REGa.
 $A2C7 JR Z,$A2CB    ; Jump to #R$A2CB if ?? is equal to #REGa.
 $A2C9 LD (HL),$02   ; Write #N$02 to *#REGhl.
*$A2CB LD A,($9AB6)  ; #REGa=*#R$9AB6.
 $A2CE CP $01        ; {Jump to #R$A2D8 if #REGa is equal to #N$01.
 $A2D0 JR Z,$A2D8    ; }
 $A2D2 CP $03        ; {Jump to #R$A2D8 if #REGa is equal to #N$03.
 $A2D4 JR Z,$A2D8    ; }
 $A2D6 JR $A2F7      ; Jump to #R$A2F7.
*$A2D8 LD A,($9AC3)  ; #REGa=*#R$9AC3.
 $A2DB CP $08        ; {Jump to #R$A2F7 if #REGa is equal to #N$08.
 $A2DD JR Z,$A2F7    ; }
 $A2DF LD A,($9B26)  ; {Write *#R$9B26 to *#R$A2E8(#N$A2E9).
 $A2E2 LD ($A2E9),A  ; }
 $A2E5 LD A,($9B10)  ; #REGa=*#R$9B10.
 $A2E8 SUB $01       ; #REGa-=#N$01.
 $A2EA CP $08        ; {Jump to #R$A2F4 if #REGa is less than #N$08.
 $A2EC JR C,$A2F4    ; }
 $A2EE LD HL,$9AC3   ; #REGhl=#R$9AC3.
 $A2F1 DEC (HL)      ; Decrease *#REGhl by one.
 $A2F2 ADD A,$08     ; #REGa+=#N$08.
*$A2F4 LD ($9B10),A  ; Write #REGa to *#R$9B10.
*$A2F7 LD A,($9AB6)  ; #REGa=*#R$9AB6.
 $A2FA CP $00        ; {Jump to #R$A304 if #REGa is equal to #N$00.
 $A2FC JR Z,$A304    ; }
 $A2FE CP $02        ; {Jump to #R$A304 if #REGa is equal to #N$02.
 $A300 JR Z,$A304    ; }
 $A302 JR $A323      ; Jump to #R$A323.
*$A304 LD A,($9AC3)  ; {Jump to #R$A323 if *#R$9AC3 is equal to #N$1D.
 $A307 CP $1D        ;
 $A309 JR Z,$A323    ; }
 $A30B LD A,($9B26)  ; {Write *#R$9B26 to *#R$A314(#N$A315).
 $A30E LD ($A315),A  ; }
 $A311 LD A,($9B10)  ; #REGa=*#R$9B10.
 $A314 ADD A,$01     ; #REGa+=#N$01.
 $A316 CP $08        ; {Jump to #R$A320 if #REGa is less than #N$08.
 $A318 JR C,$A320    ; }
 $A31A SUB $08       ; #REGa-=#N$08.
 $A31C LD HL,$9AC3   ; #REGhl=#R$9AC3.
 $A31F INC (HL)      ; Increment *#REGhl by one.
*$A320 LD ($9B10),A  ; Write #REGa to *#R$9B10.
*$A323 LD A,($9AB6)  ; #REGa=*#R$9AB6.
 $A326 CP $00        ; {Jump to #R$A330 if #REGa is equal to #N$00.
 $A328 JR Z,$A330    ; }
 $A32A CP $03        ; {Jump to #R$A330 if #REGa is equal to #N$03.
 $A32C JR Z,$A330    ; }
 $A32E JR $A34E      ; Jump to #R$A34E.
*$A330 LD A,($9AC4)  ; {Jump to #R$A34E if *#R$9AC4 is zero.
 $A333 AND A         ;
 $A334 JR Z,$A34E    ; }
 $A336 LD A,($9B27)  ; {Write *#R$9B27 to *#R$A33F(#N$A340).
 $A339 LD ($A340),A  ; }
 $A33C LD A,($9B11)  ; #REGa=*#R$9B11.
 $A33F SUB $01       ; #REGa-=#N$01.
 $A341 CP $08        ; {Jump to #R$A34B if #REGa is less than #N$08.
 $A343 JR C,$A34B    ; }
 $A345 LD HL,$9AC4   ; #REGhl=#R$9AC4.
 $A348 DEC (HL)      ; Decrease *#REGhl by one.
 $A349 ADD A,$08     ; #REGa+=#N$08.
*$A34B LD ($9B11),A  ; Write #REGa to *#R$9B11.
*$A34E LD A,($9AB6)  ; #REGa=*#R$9AB6.
 $A351 CP $01        ; {Jump to #R$A35B if #REGa is equal to #N$01.
 $A353 JR Z,$A35B    ; }
 $A355 CP $02        ; {Jump to #R$A35B if #REGa is equal to #N$02.
 $A357 JR Z,$A35B    ; }
 $A359 JR $A37A      ; Jump to #R$A37A.
*$A35B LD A,($9AC4)  ; {Jump to #R$A37A if *#R$9AC4 is equal to #N$17.
 $A35E CP $17        ;
 $A360 JR Z,$A37A    ; }
 $A362 LD A,($9B27)  ; {Write *#R$9B27 to *#R$A36B(#N$A36C).
 $A365 LD ($A36C),A  ; }
 $A368 LD A,($9B11)  ; #REGa=*#R$9B11.
 $A36B ADD A,$01     ; #REGa+=#N$01.
 $A36D CP $08        ; {Jump to #R$A377 if #REGa is less than #N$08.
 $A36F JR C,$A377    ; }
 $A371 SUB $08       ; #REGa-=#N$08.
 $A373 LD HL,$9AC4   ; #REGhl=#R$9AC4.
 $A376 INC (HL)      ; Increment *#REGhl by one.
*$A377 LD ($9B11),A  ; Write #REGa to *#R$9B11.
; This entry point is used by the routine at #R$9D42.
*$A37A CALL $A461    ; Call #R$A461.
 $A37D JP $9D53      ; Jump to #R$9D53.

; Messaging: Around The Clock Timer
;
; Used by the routine at #R$95ED.
;
; .
;
; Print the current timer value.
@label=Messaging_AroundTheClock_Timer
c$A380 CALL $964C       ; Call #R$964C.
 $A383 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $A385 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $A387 DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A389 DEFB $16,$0B,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
@label=AroundTheClock_Timer
 $A38C DEFM "00"        ; "#STR#(#PC,$04,$02)".
 $A38E DEFB $FF         ; Terminator.
; #HTML(#AUDIO(menu.wav)(#INCLUDE(Menu)))
; .
; Note; this is identical to #R$9942.
 $A38F LD C,$00         ; Set initial speaker state in #REGc to OFF.
 $A391 LD B,$3C         ; Set the repeat loop counter in #REGb to #N$3C.
@label=AroundTheClock_Timer_OuterLoop
*$A393 LD HL,$000A      ; Set the delay loop in #REGhl to #N($000A,$04,$04).
@label=AroundTheClock_Timer_DelayLoop
*$A396 DEC HL           ; Decrease the delay loop by one.
 $A397 LD A,H           ; {Jump back to #R$A396 until the delay loop is zero.
 $A398 OR L             ;
 $A399 JR NZ,$A396      ; }
 $A39B LD A,C           ; {Flip the current speaker state.
 $A39C XOR %00010000    ;
 $A39E LD C,A           ; }
 $A39F OUT ($FE),A      ; Send it to the speaker.
 $A3A1 DJNZ $A393       ; Decrease the repeat loop counter by one and loop back to #R$A393
                        ; until the repeat loop counter is zero.
 $A3A3 RET              ; Return.

; Draw Current Opponent
;
; Used by the routines at #R$A272 and #R$AADC.
;
; .
;
; Handles drawing the opponent image on the game screen.
; #PUSHS #POKES$9AAB,$84;$9AAC,$B9
; #SIM(start=$A7A5,stop=$A7D0)#SIM(start=$A3AD,stop=$A3C2)
; #UDGTABLE(default)
;   { #SCR$02(draw-current-opponent) }
; UDGTABLE# #POPS
@label=DrawCurrentOpponent
c$A3A4 LD A,($9AB7)  ; {Jump to #R$A3C3 if *#R$9AB7 is not zero.
 $A3A7 AND A         ;
 $A3A8 JR NZ,$A3C3   ; }
 $A3AA CALL $AC9D    ; Call #R$AC9D.
; Set up the opponent image area block positioning and attributes.
 $A3AD LD HL,$0101   ; Set the X/ Y co-ordinates in #REGhl (#N$01/ #N$01).
 $A3B0 LD BC,$0306   ; Set the height and width in #REGbc (#N$03/ #N$06).
 $A3B3 LD A,$46      ; The colour: #COLOUR$46.
 $A3B5 CALL $B5A6    ; Call #R$B5A6.
; Display the opponents image.
 $A3B8 LD BC,($9AAB) ; Load *#R$9AAB into #REGbc.
 $A3BC LD DE,$0F01   ; Set the X/ Y co-ordinates in #REGde (#N$0F/ #N$01).
 $A3BF CALL $B742    ; Call #R$B742.
 $A3C2 RET           ; Return.

; Messaging: Print Player Current Total
;
; Used by the routine at #R$A3A4.
@label=Messaging_PrintPlayerCurrentTotal
c$A3C3 CALL $964C       ; Call #R$964C.
 $A3C6 DEFB $16,$13,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A3C9 DEFM "PLAYER"    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(player)
 $A3CF DEFB $FF         ; Terminator.
; Who is currently playing?
 $A3D0 LD A,($9AB8)     ; {Jump to #R$A3F3 if *#R$9AB8 is player two.
 $A3D3 AND A            ;
 $A3D4 JR Z,$A3F3       ; }
; Handle 1UP:
 $A3D6 CALL $964C       ; Call #R$964C.
 $A3D9 DEFB $16,$14,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A3DC DEFM "ONE"       ; #FONT#(:(#STR(#PC,$04,$03)))$8D75,attr=$47(one)
 $A3DF DEFB $FF         ; Terminator.
 $A3E0 LD HL,($9AB2)    ; #REGhl=*#R$9AB2.
 $A3E3 LD DE,$ACF6      ; #REGde=#R$ACF6.
 $A3E6 CALL $AEF0       ; Call #R$AEF0.
 $A3E9 LD HL,$ACF6      ; #REGhl=#R$ACF6.
 $A3EC CALL $A410       ; Call #R$A410.
 $A3EF CALL $AC9D       ; Call #R$AC9D.
 $A3F2 RET              ; Return.
; Handle 2UP:
@label=PrintPlayerTwo_CurrentTotal
*$A3F3 CALL $964C       ; Call #R$964C.
 $A3F6 DEFB $16,$14,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A3F9 DEFM "TWO"       ; #FONT#(:(#STR(#PC,$04,$03)))$8D75,attr=$47(two)
 $A3FC DEFB $FF         ; Terminator.
 $A3FD LD HL,($9AB0)    ; #REGhl=*#R$9AB0.
 $A400 LD DE,$ACF6      ; #REGde=#R$ACF6.
 $A403 CALL $AEF0       ; Call #R$AEF0.
 $A406 LD HL,$ACF6      ; #REGhl=#R$ACF6.
 $A409 CALL $A410       ; Call #R$A410.
 $A40C CALL $AC9D       ; Call #R$AC9D.
 $A40F RET              ; Return.
; Convert the total to a printable string, and display it.
@label=PrintCurrentTotal
*$A410 LD B,$03         ; Set a counter in #REGb for the #N$03 digits of a
                        ; total value.
@label=PrintCurrentTotal_Loop
*$A412 LD A,(HL)        ; #REGa=*#REGhl.
 $A413 CP $20           ; {Jump to #R$A41A if #REGa is an ASCII "space"
 $A415 JR Z,$A41A       ; (#N$20).}
 $A417 ADD A,$30        ; Add #N$30 (ASCII "#CHR$30") to #REGa to "convert" it
                        ; to ASCII.
 $A419 LD (HL),A        ; Write #REGa to *#REGhl.
@label=PrintCurrentTotal_Next
*$A41A INC HL           ; Increment #REGhl by one.
 $A41B DJNZ $A412       ; Decrease counter by one and loop back to #R$A412
                        ; until counter is zero.
 $A41D RET              ; Return.

; Routine at A41E
;
; Used by the routine at #R$9D42.
c$A41E LD A,($9B2D)  ; #REGa=*#R$9B2D.
 $A421 AND A         ; {Return if *#R$9B2D is zero.
 $A422 RET Z         ; }
 $A423 LD ($AF49),A  ; Write #REGa to *#R$AF49.
 $A426 XOR A         ; {Write #N$00 to *#R$AF4A.
 $A427 LD ($AF4A),A  ; }
 $A42A LD HL,$0500   ; {Write #N$0500 to *#R$AF5D.
 $A42D LD ($AF5D),HL ; }
 $A430 CALL $AE17    ; Call #R$AE17.
 $A433 RET           ; Return.

; Routine at A434
;
; Used by the routine at #R$9D42.
c$A434 LD BC,$FFFF   ; #REGbc=#N$FFFF.
*$A437 DEC BC        ; Decrease #REGbc by one.
 $A438 LD A,B        ; {Jump to #R$A437 until #REGbc is zero.
 $A439 OR C          ;
 $A43A JR NZ,$A437   ; }
 $A43C LD HL,$A8AE   ; {Write #R$A8AE to *#R$A4F1(#N$A4F2).
 $A43F LD ($A4F2),HL ; }
 $A442 LD HL,$9CE9   ; #REGhl=#R$9CE9.
 $A445 LD E,(HL)     ; #REGe=*#REGhl.
 $A446 INC HL        ; Increment #REGhl by one.
 $A447 LD D,(HL)     ; #REGd=*#REGhl.
 $A448 INC HL        ; Increment #REGhl by one.
 $A449 INC D         ; {Increment #REGd by two.
 $A44A INC D         ; }
 $A44B CALL $A4D4    ; Call #R$A4D4.
 $A44E LD HL,$A8BD   ; {Write #R$A8BD to *#R$A4F1(#N$A4F2).
 $A451 LD ($A4F2),HL ; }
 $A454 LD HL,$9CE9   ; #REGhl=#R$9CE9.
 $A457 LD E,(HL)     ; #REGe=*#REGhl.
 $A458 INC HL        ; Increment #REGhl by one.
 $A459 LD D,(HL)     ; #REGd=*#REGhl.
 $A45A INC HL        ; Increment #REGhl by one.
 $A45B INC D         ; {Increment #REGd by two.
 $A45C INC D         ; }
 $A45D CALL $A4D4    ; Call #R$A4D4.
 $A460 RET           ; Return.

; Handler: Floating Hand
;
; Used by the routines at #R$9D42 and #R$A272.
@label=Handler_FloatingHand
c$A461 CALL $A50E    ; Call #R$A50E.
 $A464 LD HL,($9B15) ; #REGhl=*#R$9B15.
 $A467 CALL $A58F    ; Call #R$A58F.
; Self-modifying code;
 $A46A LD A,$37      ; {#HTML(Write <code>SCF</code> (#N$37) to *#R$A61D.)
 $A46C LD ($A61D),A  ; }
 $A46F CALL $A613    ; Call #R$A613.
 $A472 CALL $A5E1    ; Call #R$A5E1.
 $A475 CALL $A652    ; Call #R$A652.
 $A478 LD HL,($9B13) ; #REGhl=*#R$9B13.
 $A47B CALL $A58F    ; Call #R$A58F.
; Self-modifying code;
 $A47E LD A,$A7      ; {#HTML(Write <code>AND #REGa</code> (#N$A7) to
 $A480 LD ($A61D),A  ; *#R$A61D.)}
 $A483 CALL $A613    ; Call #R$A613.
 $A486 CALL $A5E1    ; Call #R$A5E1.
 $A489 CALL $A69C    ; Call #R$A69C.
 $A48C HALT          ; Halt operation (suspend CPU until the next interrupt).
 $A48D CALL $A6E6    ; Call #R$A6E6.
 $A490 RET           ; Return.

; Routine at A491
;
; Used by the routine at #R$9D42.
c$A491 CALL $A532    ; Call #R$A532.
 $A494 LD HL,($9B19) ; #REGhl=*#R$9B19.
 $A497 CALL $A5B2    ; Call #R$A5B2.
 $A49A CALL $A682    ; Call #R$A682.
 $A49D LD HL,($9B17) ; #REGhl=*#R$9B17.
 $A4A0 CALL $A5B2    ; Call #R$A5B2.
 $A4A3 CALL $A6CC    ; Call #R$A6CC.
 $A4A6 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $A4A7 CALL $A73A    ; Call #R$A73A.
 $A4AA RET           ; Return.

; Routine at A4AB
;
; Used by the routine at #R$9D42.
c$A4AB LD B,$03      ; #REGb=#N$03.
*$A4AD PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A4AE PUSH HL       ;
 $A4AF PUSH DE       ; }
 $A4B0 CALL $A4BE    ; Call #R$A4BE.
 $A4B3 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A4B4 POP HL        ; }
 $A4B5 LD BC,$0018   ; #REGbc=#N($0018,$04,$04).
 $A4B8 ADD HL,BC     ; #REGhl+=#REGbc.
 $A4B9 INC D         ; Increment #REGd by one.
 $A4BA POP BC        ; Restore #REGbc from the stack.
 $A4BB DJNZ $A4AD    ; Decrease counter by one and loop back to #R$A4AD until
                     ; counter is zero.
 $A4BD RET           ; Return.
*$A4BE PUSH HL       ; Stash #REGhl on the stack.
 $A4BF CALL $A8BD    ; Call #R$A8BD.
 $A4C2 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A4C3 POP HL        ; Restore #REGhl from the stack.
 $A4C4 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A4C5 LD B,$08      ; #REGb=#N$08.
*$A4C7 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $A4C8 PUSH HL       ; }
 $A4C9 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $A4CC LDIR          ; LDIR.
 $A4CE POP HL        ; Restore #REGhl from the stack.
 $A4CF INC H         ; Increment #REGh by one.
 $A4D0 POP BC        ; Restore #REGbc from the stack.
 $A4D1 DJNZ $A4C7    ; Decrease counter by one and loop back to #R$A4C7 until
                     ; counter is zero.
 $A4D3 RET           ; Return.

; Routine at A4D4
;
; Used by the routines at #R$A434 and #R$A7F8.
c$A4D4 LD B,$03      ; #REGb=#N$03.
*$A4D6 PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A4D7 PUSH HL       ;
 $A4D8 PUSH DE       ; }
 $A4D9 LD A,D        ; #REGa=#REGd.
 $A4DA CP $00        ; {Jump to #R$A4E5 if #REGa is less than #N$00.
 $A4DC JR C,$A4E5    ; }
 $A4DE CP $18        ; {Jump to #R$A4E5 if #REGa is greater than or equal to
 $A4E0 JR NC,$A4E5   ; #N$18.}
 $A4E2 CALL $A4F0    ; Call #R$A4F0.
*$A4E5 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A4E6 POP HL        ; }
 $A4E7 LD BC,$0018   ; {#REGhl+=#N($0018,$04,$04).
 $A4EA ADD HL,BC     ; }
 $A4EB INC D         ; Increment #REGd by one.
 $A4EC POP BC        ; Restore #REGbc from the stack.
 $A4ED DJNZ $A4D6    ; Decrease counter by one and loop back to #R$A4D6 until
                     ; counter is zero.
 $A4EF RET           ; Return.
*$A4F0 PUSH HL       ; Stash #REGhl on the stack.
 $A4F1 CALL $A8BD    ; Call #R$A8BD.
 $A4F4 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A4F5 POP HL        ; Restore #REGhl from the stack.
 $A4F6 LD B,$08      ; #REGb=#N$08.
*$A4F8 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A4F9 PUSH DE       ; }
 $A4FA LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $A4FD LDIR          ; LDIR.
 $A4FF POP DE        ; Restore #REGde from the stack.
 $A500 INC D         ; Increment #REGd by one.
 $A501 POP BC        ; Restore #REGbc from the stack.
 $A502 DJNZ $A4F8    ; Decrease counter by one and loop back to #R$A4F8 until
                     ; counter is zero.
 $A504 RET           ; Return.

; Routine at A505
;
; Used by the routine at #R$9D33.
c$A505 LD A,$02      ; {Write #N$02 to; #LIST { *#R$9B26 } { *#R$9B27 } LIST#
 $A507 LD ($9B26),A  ;
 $A50A LD ($9B27),A  ; }
 $A50D RET           ; Return.

; Routine at A50E
;
; Used by the routine at #R$A461.
c$A50E LD DE,($9AC3) ; #REGde=*#R$9AC3.
 $A512 DEC D         ; Decrease #REGd by one.
 $A513 LD HL,$7800   ; #REGhl=#R$7800.
 $A516 LD B,$0A      ; #REGb=#N$0A.
*$A518 PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A519 PUSH HL       ;
 $A51A PUSH DE       ; }
 $A51B LD A,D        ; #REGa=#REGd.
 $A51C CP $00        ; {Jump to #R$A527 if #REGa is less than #N$00.
 $A51E JR C,$A527    ; }
 $A520 CP $18        ; {Jump to #R$A527 if #REGa is greater than or equal to
 $A522 JR NC,$A527   ; #N$18.}
 $A524 CALL $A556    ; Call #R$A556.
*$A527 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A528 POP HL        ; }
 $A529 LD BC,$0040   ; {#REGhl+=#N($0040,$04,$04).
 $A52C ADD HL,BC     ; }
 $A52D INC D         ; Increment #REGd by one.
 $A52E POP BC        ; Restore #REGbc from the stack.
 $A52F DJNZ $A518    ; Decrease counter by one and loop back to #R$A518 until
                     ; counter is zero.
 $A531 RET           ; Return.

; Routine at A532
;
; Used by the routine at #R$A491.
c$A532 LD DE,($9AC5) ; #REGde=*#R$9AC5.
 $A536 DEC E         ; Decrease #REGe by one.
 $A537 LD HL,$7800   ; #REGhl=#R$7800.
 $A53A LD B,$05      ; #REGb=#N$05.
*$A53C PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A53D PUSH HL       ;
 $A53E PUSH DE       ; }
 $A53F LD A,D        ; #REGa=#REGd.
 $A540 CP $00        ; {Jump to #R$A54B if #REGa is less than #N$00.
 $A542 JR C,$A54B    ; }
 $A544 CP $18        ; {Jump to #R$A54B if #REGa is greater than or equal to
 $A546 JR NC,$A54B   ; #N$18.}
 $A548 CALL $A578    ; Call #R$A578.
*$A54B POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A54C POP HL        ; }
 $A54D LD BC,$0018   ; {#REGhl+=#N($0018,$04,$04).
 $A550 ADD HL,BC     ; }
 $A551 INC D         ; Increment #REGd by one.
 $A552 POP BC        ; Restore #REGbc from the stack.
 $A553 DJNZ $A53C    ; Decrease counter by one and loop back to #R$A53C until
                     ; counter is zero.
 $A555 RET           ; Return.

; Routine at A556
;
; Used by the routine at #R$A50E.
c$A556 PUSH HL       ; Stash #REGhl on the stack.
 $A557 CALL $A8BD    ; Call #R$A8BD.
 $A55A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A55B POP HL        ; Restore #REGhl from the stack.
 $A55C DEC E         ; Decrease #REGe by one.
 $A55D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A55E LD B,$08      ; #REGb=#N$08.
*$A560 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $A561 PUSH HL       ; }
 $A562 LDI           ; LDI.
 $A564 LDI           ; LDI.
 $A566 LDI           ; LDI.
 $A568 LDI           ; LDI.
 $A56A LDI           ; LDI.
 $A56C LDI           ; LDI.
 $A56E LDI           ; LDI.
 $A570 LDI           ; LDI.
 $A572 POP HL        ; Restore #REGhl from the stack.
 $A573 INC H         ; Increment #REGh by one.
 $A574 POP BC        ; Restore #REGbc from the stack.
 $A575 DJNZ $A560    ; Decrease counter by one and loop back to #R$A560 until
                     ; counter is zero.
 $A577 RET           ; Return.

; Routine at A578
;
; Used by the routine at #R$A532.
c$A578 PUSH HL       ; Stash #REGhl on the stack.
 $A579 CALL $A8BD    ; Call #R$A8BD.
 $A57C EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A57D POP HL        ; Restore #REGhl from the stack.
 $A57E EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A57F LD B,$08      ; #REGb=#N$08.
*$A581 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $A582 PUSH HL       ; }
 $A583 LDI           ; LDI.
 $A585 LDI           ; LDI.
 $A587 LDI           ; LDI.
 $A589 POP HL        ; Restore #REGhl from the stack.
 $A58A INC H         ; Increment #REGh by one.
 $A58B POP BC        ; Restore #REGbc from the stack.
 $A58C DJNZ $A581    ; Decrease counter by one and loop back to #R$A581 until
                     ; counter is zero.
 $A58E RET           ; Return.

; Routine at A58F
;
; Used by the routine at #R$A461.
c$A58F LD DE,$7B00   ; #REGde=#R$7B00.
 $A592 LD A,$38      ; #REGa=#N$38.
*$A594 LDI           ; LDI.
 $A596 LDI           ; LDI.
 $A598 LDI           ; LDI.
 $A59A LDI           ; LDI.
 $A59C LDI           ; LDI.
 $A59E LDI           ; LDI.
 $A5A0 LDI           ; LDI.
 $A5A2 DEC A         ; Decrease #REGa by one.
 $A5A3 JR NZ,$A594   ; Jump to #R$A594 if #REGa is not equal to #N$38.
 $A5A5 DEC HL        ; Decrease #REGhl by one.
 $A5A6 LD A,(HL)     ; #REGa=*#REGhl.
 $A5A7 INC HL        ; Increment #REGhl by one.
 $A5A8 LD H,D        ; #REGh=#REGd.
 $A5A9 LD L,E        ; #REGl=#REGe.
 $A5AA LD BC,$0037   ; #REGbc=#N($0037,$04,$04).
 $A5AD LD (HL),A     ; Write #REGa to *#REGhl.
 $A5AE INC DE        ; Increment #REGde by one.
 $A5AF LDIR          ; LDIR.
 $A5B1 RET           ; Return.

; Routine at A5B2
;
; Used by the routine at #R$A491.
c$A5B2 BIT 7,(HL)    ; Test bit 7 of *#REGhl.
 $A5B4 LD A,$FF      ; #REGa=#N$FF.
 $A5B6 PUSH HL       ; Stash #REGhl on the stack.
 $A5B7 JR NZ,$A5BA   ; Jump to #R$A5BA if #REGde is not equal to #N$FF.
 $A5B9 XOR A         ; #REGa=#N$00.
*$A5BA LD HL,$7B00   ; #REGhl=#R$7B00.
 $A5BD LD DE,$7B01   ; #REGde=#R$7B00(#N$7B00+#N$01).
 $A5C0 LD (HL),A     ; Write #REGa to *#REGhl.
 $A5C1 LD BC,$0078   ; #REGbc=#N($0078,$04,$04).
 $A5C4 LDIR          ; LDIR.
 $A5C6 LD DE,$7B00   ; #REGde=#R$7B00.
 $A5C9 LD A,($9B12)  ; #REGa=*#R$9B12.
 $A5CC LD L,A        ; #REGl=#REGa.
 $A5CD ADD A,A       ; #REGa+=#REGa.
 $A5CE ADD A,L       ; #REGa+=#REGl.
 $A5CF LD L,A        ; #REGl=#REGa.
 $A5D0 LD H,$00      ; #REGh=#N$00.
 $A5D2 ADD HL,DE     ; #REGhl+=#REGde.
 $A5D3 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A5D4 POP HL        ; Restore #REGhl from the stack.
 $A5D5 LD A,$10      ; #REGa=#N$10.
*$A5D7 LDI           ; LDI.
 $A5D9 LDI           ; LDI.
 $A5DB LDI           ; LDI.
 $A5DD DEC A         ; Decrease #REGa by one.
 $A5DE JR NZ,$A5D7   ; Jump to #R$A5D7 if #REGa is not equal to #N$10.
 $A5E0 RET           ; Return.

; Routine at A5E1
;
; Used by the routine at #R$A461.
c$A5E1 LD A,($9B11)  ; #REGa=*#R$9B11.
 $A5E4 AND A         ; {Return if *#R$9B11 is zero.
 $A5E5 RET Z         ; }
 $A5E6 LD HL,$7B00   ; #REGhl=#R$7B00.
 $A5E9 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $A5EA LD A,(HL)     ; #REGa=*#REGhl.
 $A5EB LD DE,$7C87   ; #REGde=#R$7C87.
 $A5EE EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $A5EF LD H,D        ; #REGh=#REGd.
 $A5F0 LD L,E        ; #REGl=#REGe.
 $A5F1 LD C,A        ; #REGc=#REGa.
 $A5F2 ADD A,A       ; #REGa+=#REGa.
 $A5F3 ADD A,A       ; #REGa+=#REGa.
 $A5F4 ADD A,A       ; #REGa+=#REGa.
 $A5F5 SUB C         ; #REGa-=#REGc.
 $A5F6 LD C,A        ; #REGc=#REGa.
 $A5F7 LD B,$00      ; #REGb=#N$00.
 $A5F9 ADD HL,BC     ; #REGhl+=#REGbc.
 $A5FA EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A5FB LD BC,$0188   ; #REGbc=#N($0188,$04,$04).
 $A5FE LDDR          ; LDDR.
 $A600 LD A,($9B11)  ; #REGa=*#R$9B11.
 $A603 LD B,A        ; #REGb=#REGa.
 $A604 EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $A605 LD HL,$7B00   ; #REGhl=#R$7B00.
*$A608 PUSH BC       ; Stash #REGbc on the stack.
 $A609 LD B,$07      ; #REGb=#N$07.
*$A60B LD (HL),A     ; Write #REGa to *#REGhl.
 $A60C INC HL        ; Increment #REGhl by one.
 $A60D DJNZ $A60B    ; Decrease counter by one and loop back to #R$A60B until
                     ; counter is zero.
 $A60F POP BC        ; Restore #REGbc from the stack.
 $A610 DJNZ $A608    ; Decrease counter by one and loop back to #R$A608 until
                     ; counter is zero.
 $A612 RET           ; Return.

; Routine at A613
;
; Used by the routine at #R$A461.
c$A613 LD A,($9B10)  ; #REGa=*#R$9B10.
 $A616 AND A         ; {Return if *#R$9B10 is zero.
 $A617 RET Z         ; }
*$A618 LD HL,$7B00   ; #REGhl=#R$7B00.
 $A61B LD B,$40      ; #REGb=#N$40.
*$A61D AND A         ; Set flags.
 $A61E RR (HL)       ; Rotate *#REGhl right.
 $A620 INC L         ; Increment #REGl by one.
 $A621 RR (HL)       ; Rotate *#REGhl right.
 $A623 INC L         ; Increment #REGl by one.
 $A624 RR (HL)       ; Rotate *#REGhl right.
 $A626 INC L         ; Increment #REGl by one.
 $A627 RR (HL)       ; Rotate *#REGhl right.
 $A629 INC HL        ; Increment #REGhl by one.
 $A62A RR (HL)       ; Rotate *#REGhl right.
 $A62C INC L         ; Increment #REGl by one.
 $A62D RR (HL)       ; Rotate *#REGhl right.
 $A62F INC L         ; Increment #REGl by one.
 $A630 RR (HL)       ; Rotate *#REGhl right.
 $A632 INC L         ; Increment #REGl by one.
 $A633 DJNZ $A61D    ; Decrease counter by one and loop back to #R$A61D until
                     ; counter is zero.
 $A635 DEC A         ; Decrease #REGa by one.
 $A636 JR NZ,$A618   ; Jump to #R$A618 if #REGa is not equal to #REGa.
 $A638 RET           ; Return.

; Routine at A639
;
; Used by the routine at #R$9D42.
c$A639 LD A,($9B10)  ; #REGa=*#R$9B10.
 $A63C ADD A,$03     ; #REGa+=#N$03.
*$A63E PUSH HL       ; Stash #REGhl on the stack.
 $A63F LD B,$10      ; #REGb=#N$10.
*$A641 AND A         ; Set flags.
 $A642 RR (HL)       ; Rotate *#REGhl right.
 $A644 INC HL        ; Increment #REGhl by one.
 $A645 RR (HL)       ; Rotate *#REGhl right.
 $A647 INC HL        ; Increment #REGhl by one.
 $A648 RR (HL)       ; Rotate *#REGhl right.
 $A64A INC HL        ; Increment #REGhl by one.
 $A64B DJNZ $A641    ; Decrease counter by one and loop back to #R$A641 until
                     ; counter is zero.
 $A64D POP HL        ; Restore #REGhl from the stack.
 $A64E DEC A         ; Decrease #REGa by one.
 $A64F JR NZ,$A63E   ; Jump to #R$A63E if #REGa is not equal to #REGa.
 $A651 RET           ; Return.

; Routine at A652
;
; Used by the routine at #R$A461.
c$A652 LD DE,$7B00   ; #REGde=#R$7B00.
 $A655 LD HL,$7840   ; #REGhl=#R$7840.
 $A658 INC L         ; Increment #REGl by one.
 $A659 LD B,$40      ; #REGb=#N$40.
*$A65B LD A,(DE)     ; #REGa=*#REGde.
 $A65C AND (HL)      ; Merge the bits from *#REGhl.
 $A65D LD (HL),A     ; Write #REGa to *#REGhl.
 $A65E INC L         ; Increment #REGl by one.
 $A65F INC E         ; Increment #REGe by one.
 $A660 LD A,(DE)     ; #REGa=*#REGde.
 $A661 AND (HL)      ; Merge the bits from *#REGhl.
 $A662 LD (HL),A     ; Write #REGa to *#REGhl.
 $A663 INC L         ; Increment #REGl by one.
 $A664 INC E         ; Increment #REGe by one.
 $A665 LD A,(DE)     ; #REGa=*#REGde.
 $A666 AND (HL)      ; Merge the bits from *#REGhl.
 $A667 LD (HL),A     ; Write #REGa to *#REGhl.
 $A668 INC L         ; Increment #REGl by one.
 $A669 INC E         ; Increment #REGe by one.
 $A66A LD A,(DE)     ; #REGa=*#REGde.
 $A66B AND (HL)      ; Merge the bits from *#REGhl.
 $A66C LD (HL),A     ; Write #REGa to *#REGhl.
 $A66D INC L         ; Increment #REGl by one.
 $A66E INC DE        ; Increment #REGde by one.
 $A66F LD A,(DE)     ; #REGa=*#REGde.
 $A670 AND (HL)      ; Merge the bits from *#REGhl.
 $A671 LD (HL),A     ; Write #REGa to *#REGhl.
 $A672 INC L         ; Increment #REGl by one.
 $A673 INC E         ; Increment #REGe by one.
 $A674 LD A,(DE)     ; #REGa=*#REGde.
 $A675 AND (HL)      ; Merge the bits from *#REGhl.
 $A676 LD (HL),A     ; Write #REGa to *#REGhl.
 $A677 INC L         ; Increment #REGl by one.
 $A678 INC E         ; Increment #REGe by one.
 $A679 LD A,(DE)     ; #REGa=*#REGde.
 $A67A AND (HL)      ; Merge the bits from *#REGhl.
 $A67B LD (HL),A     ; Write #REGa to *#REGhl.
 $A67C INC HL        ; Increment #REGhl by one.
 $A67D INC L         ; Increment #REGl by one.
 $A67E INC E         ; Increment #REGe by one.
 $A67F DJNZ $A65B    ; Decrease counter by one and loop back to #R$A65B until
                     ; counter is zero.
 $A681 RET           ; Return.

; Routine at A682
;
; Used by the routine at #R$A491.
c$A682 LD DE,$7B00   ; #REGde=#R$7B00.
 $A685 LD HL,$7800   ; #REGhl=#R$7800.
 $A688 LD B,$28      ; #REGb=#N$28.
*$A68A LD A,(DE)     ; #REGa=*#REGde.
 $A68B AND (HL)      ; Merge the bits from *#REGhl.
 $A68C LD (HL),A     ; Write #REGa to *#REGhl.
 $A68D INC L         ; Increment #REGl by one.
 $A68E INC E         ; Increment #REGe by one.
 $A68F LD A,(DE)     ; #REGa=*#REGde.
 $A690 AND (HL)      ; Merge the bits from *#REGhl.
 $A691 LD (HL),A     ; Write #REGa to *#REGhl.
 $A692 INC L         ; Increment #REGl by one.
 $A693 INC E         ; Increment #REGe by one.
 $A694 LD A,(DE)     ; #REGa=*#REGde.
 $A695 AND (HL)      ; Merge the bits from *#REGhl.
 $A696 LD (HL),A     ; Write #REGa to *#REGhl.
 $A697 INC L         ; Increment #REGl by one.
 $A698 INC E         ; Increment #REGe by one.
 $A699 DJNZ $A68A    ; Decrease counter by one and loop back to #R$A68A until
                     ; counter is zero.
 $A69B RET           ; Return.

; Routine at A69C
;
; Used by the routine at #R$A461.
c$A69C LD DE,$7B00   ; #REGde=#R$7B00.
 $A69F LD HL,$7840   ; #REGhl=#R$7840.
 $A6A2 INC L         ; Increment #REGl by one.
 $A6A3 LD B,$40      ; #REGb=#N$40.
*$A6A5 LD A,(DE)     ; #REGa=*#REGde.
 $A6A6 OR (HL)       ; Set the bits from *#REGhl.
 $A6A7 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6A8 INC L         ; Increment #REGl by one.
 $A6A9 INC E         ; Increment #REGe by one.
 $A6AA LD A,(DE)     ; #REGa=*#REGde.
 $A6AB OR (HL)       ; Set the bits from *#REGhl.
 $A6AC LD (HL),A     ; Write #REGa to *#REGhl.
 $A6AD INC L         ; Increment #REGl by one.
 $A6AE INC E         ; Increment #REGe by one.
 $A6AF LD A,(DE)     ; #REGa=*#REGde.
 $A6B0 OR (HL)       ; Set the bits from *#REGhl.
 $A6B1 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6B2 INC L         ; Increment #REGl by one.
 $A6B3 INC E         ; Increment #REGe by one.
 $A6B4 LD A,(DE)     ; #REGa=*#REGde.
 $A6B5 OR (HL)       ; Set the bits from *#REGhl.
 $A6B6 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6B7 INC L         ; Increment #REGl by one.
 $A6B8 INC DE        ; Increment #REGde by one.
 $A6B9 LD A,(DE)     ; #REGa=*#REGde.
 $A6BA OR (HL)       ; Set the bits from *#REGhl.
 $A6BB LD (HL),A     ; Write #REGa to *#REGhl.
 $A6BC INC L         ; Increment #REGl by one.
 $A6BD INC E         ; Increment #REGe by one.
 $A6BE LD A,(DE)     ; #REGa=*#REGde.
 $A6BF OR (HL)       ; Set the bits from *#REGhl.
 $A6C0 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6C1 INC L         ; Increment #REGl by one.
 $A6C2 INC E         ; Increment #REGe by one.
 $A6C3 LD A,(DE)     ; #REGa=*#REGde.
 $A6C4 OR (HL)       ; Set the bits from *#REGhl.
 $A6C5 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6C6 INC HL        ; Increment #REGhl by one.
 $A6C7 INC L         ; Increment #REGl by one.
 $A6C8 INC E         ; Increment #REGe by one.
 $A6C9 DJNZ $A6A5    ; Decrease counter by one and loop back to #R$A6A5 until
                     ; counter is zero.
 $A6CB RET           ; Return.

; Routine at A6CC
;
; Used by the routine at #R$A491.
c$A6CC LD DE,$7B00   ; #REGde=#R$7B00.
 $A6CF LD HL,$7800   ; #REGhl=#R$7800.
 $A6D2 LD B,$28      ; #REGb=#N$28.
*$A6D4 LD A,(DE)     ; #REGa=*#REGde.
 $A6D5 OR (HL)       ; Set the bits from *#REGhl.
 $A6D6 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6D7 INC L         ; Increment #REGl by one.
 $A6D8 INC E         ; Increment #REGe by one.
 $A6D9 LD A,(DE)     ; #REGa=*#REGde.
 $A6DA OR (HL)       ; Set the bits from *#REGhl.
 $A6DB LD (HL),A     ; Write #REGa to *#REGhl.
 $A6DC INC L         ; Increment #REGl by one.
 $A6DD INC E         ; Increment #REGe by one.
 $A6DE LD A,(DE)     ; #REGa=*#REGde.
 $A6DF OR (HL)       ; Set the bits from *#REGhl.
 $A6E0 LD (HL),A     ; Write #REGa to *#REGhl.
 $A6E1 INC L         ; Increment #REGl by one.
 $A6E2 INC E         ; Increment #REGe by one.
 $A6E3 DJNZ $A6D4    ; Decrease counter by one and loop back to #R$A6D4 until
                     ; counter is zero.
 $A6E5 RET           ; Return.

; Copy Floating Hand To Screen
;
; Used by the routine at #R$A461.
@label=CopyFloatingHandToScreen
c$A6E6 LD DE,($9AC3) ; #REGde=*#R$9AC3.
 $A6EA DEC D         ; Adjust the Y position.
 $A6EB LD HL,$7800   ; #REGhl=#R$7800.
 $A6EE LD B,$0A      ; Set a counter in #REGb of #N$0A for the height of the
                     ; graphic.
@label=CopyFloatingHandToScreen_Loop
*$A6F0 PUSH BC       ; {Stash the height counter, buffer pointer and co-ordinates on the
 $A6F1 PUSH HL       ; stack.
 $A6F2 PUSH DE       ; }
; Check if this line is within the screen boundaries.
 $A6F3 LD A,D        ; {Jump to #R$A709 if the Y position is less than #N$00 or  greater
 $A6F4 CP $00        ; than/ equal to #N$18.
 $A6F6 JR C,$A709    ;
 $A6F8 CP $18        ;
 $A6FA JR NC,$A709   ; }
 $A6FC LD A,E        ; {Compare #REGe with #N$19.
 $A6FD CP $19        ; }
 $A6FF LD A,$08      ; #REGa=#N$08.
 $A701 JR C,$A706    ; Jump to #R$A706 if #REGe is less than #N$19.
 $A703 LD A,$21      ; #REGa=#N$21.
 $A705 SUB E         ; #REGa-=#REGe.
*$A706 CALL $A714    ; Call #R$A714.
*$A709 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A70A POP HL        ; }
 $A70B LD BC,$0040   ; {#REGhl+=#N($0040,$04,$04).
 $A70E ADD HL,BC     ; }
 $A70F INC D         ; Increment #REGd by one.
 $A710 POP BC        ; Restore #REGbc from the stack.
 $A711 DJNZ $A6F0    ; Decrease counter by one and loop back to #R$A6F0 until
                     ; counter is zero.
 $A713 RET           ; Return.

; Draw Floating Hand
;
; Used by the routine at #R$A6E6.
@label=DrawFloatingHand
c$A714 PUSH HL       ; Stash #REGhl on the stack.
 $A715 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $A716 CALL $A8AE    ; Call #R$A8AE.
 $A719 EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $A71A EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A71B POP HL        ; Restore #REGhl from the stack.
 $A71C DEC E         ; Decrease #REGe by one.
 $A71D LD B,$08      ; #REGb=#N$08.
*$A71F PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A720 PUSH DE       ; }
 $A721 LD C,A        ; #REGc=#REGa.
 $A722 LD B,$00      ; #REGb=#N$00.
 $A724 LDIR          ; LDIR.
 $A726 CP $08        ; {Jump to #R$A734 if #REGa is equal to #N$08.
 $A728 JR Z,$A734    ; }
 $A72A PUSH AF       ; Stash #REGaf on the stack.
 $A72B LD C,A        ; #REGc=#REGa.
 $A72C LD A,$08      ; #REGa=#N$08.
 $A72E SUB C         ; #REGa-=#REGc.
 $A72F LD B,$00      ; #REGb=#N$00.
 $A731 LD C,A        ; #REGc=#REGa.
 $A732 POP AF        ; Restore #REGaf from the stack.
 $A733 ADD HL,BC     ; #REGhl+=#REGbc.
*$A734 POP DE        ; Restore #REGde from the stack.
 $A735 INC D         ; Increment #REGd by one.
 $A736 POP BC        ; Restore #REGbc from the stack.
 $A737 DJNZ $A71F    ; Decrease counter by one and loop back to #R$A71F until
                     ; counter is zero.
 $A739 RET           ; Return.

; Routine at A73A
;
; Used by the routine at #R$A491.
c$A73A LD DE,($9AC5) ; #REGde=*#R$9AC5.
 $A73E LD HL,$7800   ; #REGhl=#R$7800.
 $A741 LD B,$05      ; #REGb=#N$05.
*$A743 PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A744 PUSH HL       ;
 $A745 PUSH DE       ; }
 $A746 LD A,D        ; #REGa=#REGd.
 $A747 CP $00        ; {Jump to #R$A752 if #REGa is less than #N$00.
 $A749 JR C,$A752    ; }
 $A74B CP $18        ; {Jump to #R$A752 if #REGa is greater than or equal to
 $A74D JR NC,$A752   ; #N$18.}
 $A74F CALL $A75D    ; Call #R$A75D.
*$A752 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A753 POP HL        ; }
 $A754 LD BC,$0018   ; {#REGhl+=#N($0018,$04,$04).
 $A757 ADD HL,BC     ; }
 $A758 INC D         ; Increment #REGd by one.
 $A759 POP BC        ; Restore #REGbc from the stack.
 $A75A DJNZ $A743    ; Decrease counter by one and loop back to #R$A743 until
                     ; counter is zero.
 $A75C RET           ; Return.
*$A75D PUSH HL       ; Stash #REGhl on the stack.
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $A75E CALL $A8AE    ; Call #R$A8AE.
 $A761 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A762 POP HL        ; Restore #REGhl from the stack.
 $A763 DEC E         ; Decrease #REGe by one.
 $A764 LD B,$08      ; #REGb=#N$08.
*$A766 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A767 PUSH DE       ; }
 $A768 LDI           ; LDI.
 $A76A LDI           ; LDI.
 $A76C LDI           ; LDI.
 $A76E POP DE        ; Restore #REGde from the stack.
 $A76F INC D         ; Increment #REGd by one.
 $A770 POP BC        ; Restore #REGbc from the stack.
 $A771 DJNZ $A766    ; Decrease counter by one and loop back to #R$A766 until
                     ; counter is zero.
 $A773 RET           ; Return.

; Routine at A774
;
; Used by the routine at #R$9D42.
c$A774 PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $A775 PUSH HL       ;
 $A776 PUSH DE       ; }
 $A777 LD A,D        ; #REGa=#REGd.
 $A778 CP $00        ; Compare #REGa with #N$00.
 $A77A JR C,$A783    ; Jump to #R$A783 if #REGa is less than #N$00.
 $A77C CP $18        ; Compare #REGa with #N$18.
 $A77E JR NC,$A783   ; Jump to #R$A783 if #REGa is greater than or equal to
                     ; #N$18.
 $A780 CALL $A78E    ; Call #R$A78E.
*$A783 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $A784 POP HL        ; }
 $A785 LD BC,$0018   ; #REGbc=#N($0018,$04,$04).
 $A788 ADD HL,BC     ; #REGhl+=#REGbc.
 $A789 INC D         ; Increment #REGd by one.
 $A78A POP BC        ; Restore #REGbc from the stack.
 $A78B DJNZ $A774    ; Decrease counter by one and loop back to #R$A774 until
                     ; counter is zero.
 $A78D RET           ; Return.
*$A78E PUSH HL       ; Stash #REGhl on the stack.
 $A78F CALL $A8BD    ; Call #R$A8BD.
 $A792 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $A793 POP HL        ; Restore #REGhl from the stack.
 $A794 DEC E         ; Decrease #REGe by one.
 $A795 LD B,$08      ; #REGb=#N$08.
*$A797 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $A798 PUSH DE       ; }
 $A799 LDI           ; LDI.
 $A79B LDI           ; LDI.
 $A79D LDI           ; LDI.
 $A79F POP DE        ; Restore #REGde from the stack.
 $A7A0 INC D         ; Increment #REGd by one.
 $A7A1 POP BC        ; Restore #REGbc from the stack.
 $A7A2 DJNZ $A797    ; Decrease counter by one and loop back to #R$A797 until
                     ; counter is zero.
 $A7A4 RET           ; Return.

; Print Play Area
;
; Used by the routines at #R$9D33, #R$A272, #R$AA0A, #R$AA5A, #R$AA7B and
; #R$AADC.
@label=Print_PlayArea
c$A7A5 LD HL,$6000      ; {Copy #N$1800 bytes of data from *#R$6000 to #R$4000.
 $A7A8 LD DE,$4000      ;
 $A7AB LD BC,$1800      ;
 $A7AE LDIR             ; }
 $A7B0 LD B,$18         ; #REGb=#N$18.
 $A7B2 LD HL,$5800      ; #REGhl=#N$5800 (screen buffer location).
@label=Print_PlayArea_Loop
*$A7B5 PUSH BC          ; {Stash #REGbc and #REGhl on the stack.
 $A7B6 PUSH HL          ; }
 $A7B7 LD BC,$0008      ; #REGbc=#N($0008,$04,$04).
 $A7BA LD D,H           ; #REGd=#REGh.
 $A7BB LD E,L           ; #REGe=#REGl.
 $A7BC INC DE           ; Increment #REGde by one.
 $A7BD LD (HL),$47      ; Write #COLOUR$47 to *#REGhl.
 $A7BF LDIR             ; LDIR.
 $A7C1 LD BC,$0017      ; #REGbc=#N($0017,$04,$04).
 $A7C4 LD (HL),$70      ; Write #COLOUR$70 to *#REGhl.
 $A7C6 LDIR             ; LDIR.
 $A7C8 LD DE,$0020      ; #REGde=#N($0020,$04,$04).
 $A7CB POP HL           ; Restore #REGhl from the stack.
 $A7CC ADD HL,DE        ; #REGhl+=#REGde.
 $A7CD POP BC           ; Restore #REGbc from the stack.
 $A7CE DJNZ $A7B5       ; Decrease counter by one and loop back to #R$A7B5
                        ; until counter is zero.
 $A7D0 LD A,($9AB7)     ; {Return if *#R$9AB7 is not zero.
 $A7D3 AND A            ;
 $A7D4 RET NZ           ; }
; Set the 1UP leg count.
 $A7D5 LD A,($9AA6)     ; #REGa=*#R$9AA6.
 $A7D8 ADD A,$30        ; {Add #N$30 (ASCII "#CHR$30") to #REGa to "convert" it to ASCII and
 $A7DA LD ($A7F1),A     ; write #REGa to *#R$A7F1.}
; Set the 2UP leg count.
 $A7DD LD A,($9AA7)     ; #REGa=*#R$9AA7.
 $A7E0 ADD A,$30        ; {Add #N$30 (ASCII "#CHR$30") to #REGa to "convert" it to ASCII and
 $A7E2 LD ($A7F5),A     ; write it to *#R$A7F5.}
 $A7E5 CALL $964C       ; Call #R$964C.
 $A7E8 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $A7EA DEFB $10,$06     ; INK: #INK(#PEEK(#PC+$01)).
 $A7EC DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A7EE DEFB $16,$01,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
@label=Messaging_LegCount_1UP
 $A7F1 DEFM " "         ; "#STR#(#PC,$04,$01)".
 $A7F2 DEFB $16,$16,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
@label=Messaging_LegCount_2UP
 $A7F5 DEFM " "         ; "#STR#(#PC,$04,$01)".
 $A7F6 DEFB $FF         ; Terminator.
 $A7F7 RET              ; Return.

; Routine at A7F8
;
; Used by the routines at #R$A0D6 and #R$A15C.
c$A7F8 LD HL,$9CE9   ; #REGhl=#R$9CE9.
 $A7FB LD E,(HL)     ; #REGe=*#REGhl.
 $A7FC INC HL        ; Increment #REGhl by one.
 $A7FD LD D,(HL)     ; #REGd=*#REGhl.
 $A7FE INC HL        ; Increment #REGhl by one.
 $A7FF INC D         ; {Increment #REGd by two.
 $A800 INC D         ; }
 $A801 CALL $A4D4    ; Call #R$A4D4.
 $A804 LD HL,$9C9F   ; #REGhl=#R$9C9F.
 $A807 LD E,(HL)     ; #REGe=*#REGhl.
 $A808 INC HL        ; Increment #REGhl by one.
 $A809 LD D,(HL)     ; #REGd=*#REGhl.
 $A80A INC HL        ; Increment #REGhl by one.
 $A80B INC D         ; {Increment #REGd by two.
 $A80C INC D         ; }
 $A80D CALL $A4D4    ; Call #R$A4D4.
 $A810 LD HL,$9C55   ; #REGhl=#R$9C55.
 $A813 LD E,(HL)     ; #REGe=*#REGhl.
 $A814 INC HL        ; Increment #REGhl by one.
 $A815 LD D,(HL)     ; #REGd=*#REGhl.
 $A816 INC HL        ; Increment #REGhl by one.
 $A817 INC D         ; {Increment #REGd by two.
 $A818 INC D         ; }
 $A819 CALL $A4D4    ; Call #R$A4D4.
 $A81C LD HL,$9C55   ; #REGhl=#R$9C55.
 $A81F LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A821 INC HL        ; Increment #REGhl by one.
 $A822 LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A824 LD HL,$9C9F   ; #REGhl=#R$9C9F.
 $A827 LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A829 INC HL        ; Increment #REGhl by one.
 $A82A LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A82C LD HL,$9CE9   ; #REGhl=#R$9CE9.
 $A82F LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A831 INC HL        ; Increment #REGhl by one.
 $A832 LD (HL),$32   ; Write "#CHR$32" to *#REGhl.
 $A834 RET           ; Return.

; Initialise Floating Hand
;
; Used by the routine at #R$9D33.
@label=Initialise_FloatingHand
c$A835 LD HL,$0A0A   ; {Write #N$0A/ #N$0A to *#R$9AC3.
 $A838 LD ($9AC3),HL ; }
 $A83B XOR A         ; {Write #N$00 to *#R$9B10.
 $A83C LD ($9B10),A  ; }
 $A83F LD A,$02      ; {Write #N$02 to *#R$9B25.
 $A841 LD ($9B25),A  ; }
 $A844 LD HL,$7D00   ; {Write #R$7D00 to *#R$9B13.
 $A847 LD ($9B13),HL ; }
 $A84A LD HL,$8320   ; {Write #R$8320 to *#R$9B15.
 $A84D LD ($9B15),HL ; }
 $A850 RET           ; Return.

; Routine at A851
;
; Used by the routine at #R$9D33.
c$A851 XOR A         ; {Write #N$00 to *#R$9B12.
 $A852 LD ($9B12),A  ; }
 $A855 LD HL,$D2A0   ; {Write #R$D2A0 to *#R$9B17.
 $A858 LD ($9B17),HL ; }
 $A85B LD HL,$D330   ; {Write #R$D330 to *#R$9B19.
 $A85E LD ($9B19),HL ; }
 $A861 RET           ; Return.

; Calculate Attribute Buffer
;
; Used by the routines at #R$92A7, #R$92E2, #R$944E, #R$94B8 and #R$B5A6.
;
;   H Source Y position
;   L Source X position
; O:HL Attribute buffer location
;
; Example inputs/ outputs:
; #TABLE(default,centre,centre,centre) { =h X Position | =h Y Position | =h Output }
; #FOR$00,$20,$08!!x!
;   #FOR$00,$10,$08(y,
;     { #Nx | #Ny | #SIM(start=$A862,stop=$A86E,hl=x+y*$20)#N({sim[HL]}) }
;   )
; !!
; TABLE#
@label=CalculateAttributeBuffer
c$A862 LD A,L        ; Store the X position in #REGa for now.
 $A863 LD L,H        ; Move the Y position into #REGl.
 $A864 LD H,$03      ; Set the high byte of #REGhl to #N$03.
 $A866 ADD HL,HL     ; {Multiply #REGhl by #N$04.
 $A867 ADD HL,HL     ; }
; Small correction.
 $A868 DEC H         ; Decrease #REGh by one.
 $A869 ADD HL,HL     ; {Multiply #REGhl by #N$08.
 $A86A ADD HL,HL     ;
 $A86B ADD HL,HL     ; }
 $A86C ADD A,L       ; {Add the original X position for the low byte of the attribute
 $A86D LD L,A        ; buffer memory location.}
 $A86E RET           ; Return.

; Data block at A86F
b$A86F DEFB $00,$00

; Game status buffer entry at A871
g$A871 DEFW $4550

; Game status buffer entry at A873
g$A873 DEFW $5254

; Routine at A875
;
; Used by the routines at #R$AB2E, #R$B29C, #R$B342, #R$B3B6, #R$B517 and
; #R$B7E1.
c$A875 PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $A876 PUSH BC       ; }
 $A877 LD C,E        ; #REGc=#REGe.
 $A878 LD B,$08      ; #REGb=#N$08.
 $A87A LD DE,($A871) ; #REGde=*#R$A871.
 $A87E LD HL,($A873) ; #REGhl=*#R$A873.
*$A881 LD A,E        ; #REGa=#REGe.
 $A882 AND %01001000 ; Keep only bits 3, 6.
 $A884 ADD A,$38     ; #REGa+=#N$38.
 $A886 RLA           ; {RLA.
 $A887 RLA           ; }
 $A888 RL H          ; Rotate #REGh left.
 $A88A RL L          ; Rotate #REGl left.
 $A88C RL D          ; Rotate #REGd left.
 $A88E RL E          ; Rotate #REGe left.
 $A890 DJNZ $A881    ; Decrease counter by one and loop back to #R$A881 until
                     ; counter is zero.
 $A892 LD ($A871),DE ; Write #REGde to *#R$A871.
 $A896 LD ($A873),HL ; Write #REGhl to *#R$A873.
 $A899 LD A,E        ; #REGa=#REGe.
 $A89A LD E,C        ; #REGe=#REGc.
 $A89B LD D,$00      ; #REGd=#N$00.
 $A89D LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
 $A8A0 LD B,$08      ; #REGb=#N$08.
*$A8A2 ADD HL,HL     ; #REGhl+=#REGhl.
 $A8A3 RLC A         ; Rotate #REGa left (with carry).
 $A8A5 JR NC,$A8A8   ; Jump to #R$A8A8 if the result is greater than or equal
                     ; to #N$08.
 $A8A7 ADD HL,DE     ; #REGhl+=#REGde.
*$A8A8 DJNZ $A8A2    ; Decrease counter by one and loop back to #R$A8A2 until
                     ; counter is zero.
 $A8AA LD A,H        ; #REGa=#REGh.
 $A8AB POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $A8AC POP HL        ; }
 $A8AD RET           ; Return.

; Calculate Screen Buffer
;
; Used by the routines at #R$9305, #R$A714, #R$A73A, #R$A9C2, #R$AE6E, #R$B548,
; #R$B742, #R$B761 and #R$B77A.
;
;   D Source Y position
;   E Source X position
; O:HL Screen buffer location
@label=CalculateScreenBuffer
c$A8AE LD A,%00000111 ; {Mask out the bottom 3 bits of the Y position.
 $A8B0 AND D          ; }
 $A8B1 RRCA           ; {Rotate the bits right three positions.
 $A8B2 RRCA           ;
 $A8B3 RRCA           ; }
 $A8B4 OR E           ; Combine with the X position.
 $A8B5 LD L,A         ; #REGl=low byte of the screen buffer address.
 $A8B6 LD A,D         ; {Mask out bits 3-4 of the Y position.
 $A8B7 AND %00011000  ; }
 $A8B9 OR %01000000   ; Add the screen buffer memory base address (#N$4000).
 $A8BB LD H,A         ; #REGh=high byte of the screen buffer address.
 $A8BC RET            ; Return.

; Calculate Dart Board Address
;
; Used by the routines at #R$92A7, #R$92E2, #R$A4AB, #R$A4D4, #R$A556, #R$A578,
; #R$A774 and #R$B77A.
;
;   D Source Y position
;   E Source X position
; O:HL Dart Board buffer location
@label=CalculateDartBoardAddress
c$A8BD LD A,%00000111 ; {Mask out the bottom 3 bits of the Y position.
 $A8BF AND D          ; }
 $A8C0 RRCA           ; {Rotate the bits right three positions.
 $A8C1 RRCA           ;
 $A8C2 RRCA           ; }
 $A8C3 OR E           ; Combine with the X position.
 $A8C4 LD L,A         ; #REGl=low byte of the dart board buffer address.
 $A8C5 LD A,D         ; {Mask out bits 3-4 of the Y position.
 $A8C6 AND %00011000  ; }
 $A8C8 OR %01100000   ; Add the dart board buffer memory base address
                      ; (#N$6000).
 $A8CA LD H,A         ; #REGh=high byte of the dart board buffer address.
 $A8CB RET            ; Return.

; Next Screen Buffer Line
;
; Used by the routines at #R$9305, #R$9635, #R$9903, #R$AEC3, #R$AECC, #R$B548,
; #R$B742, #R$B761, #R$B871, #R$B8D6, #R$B8F5, #R$B910 and #R$B965.
;
;   HL Current screen buffer location
; O:HL Next line down in screen memory
;
; Moves down one pixel line in screen buffer memory, handling all screen
; boundary calculations.
; .
; The ZX Spectrum screen buffer is divided into three sections, each
; containing #N$08 character rows of #N$08 pixels each.
@label=NextScreenBufferLine
c$A8CC INC H         ; Move down one pixel line.
 $A8CD LD A,H        ; {Check if we've reached a character boundary.
 $A8CE AND %00000111 ; }
 $A8D0 RET NZ        ; Return if this is not at a screen boundary.
 $A8D1 LD A,L        ; {Move down one character block line.
 $A8D2 ADD A,$20     ;
 $A8D4 LD L,A        ; }
 $A8D5 RET C         ; Return if we wrapped.
 $A8D6 LD A,H        ; {Move to the next third of the screen.
 $A8D7 SUB $08       ;
 $A8D9 LD H,A        ; }
 $A8DA RET           ; Return.

; Routine at A8DB
;
; Used by the routine at #R$B965.
c$A8DB LD A,H        ; #REGa=#REGh.
 $A8DC DEC H         ; Decrease #REGh by one.
 $A8DD AND %00000111 ; Keep only bits 0-2.
 $A8DF RET NZ        ; Return if #REGh is not equal to #N$00.
 $A8E0 LD A,L        ; {#REGl-=#N$20.
 $A8E1 SUB $20       ;
 $A8E3 LD L,A        ; }
 $A8E4 RET C         ; Return if #REGl is less than #N$00.
 $A8E5 LD A,H        ; {#REGh+=#N$08.
 $A8E6 ADD A,$08     ;
 $A8E8 LD H,A        ; }
 $A8E9 RET           ; Return.

; Sounds: Opponent Dart
;
; Used by the routines at #R$9D42 and #R$B7E1.
;
; .
;
; #AUDIO(opponent-dart.wav)(#INCLUDE(OpponentDart))
@label=Sounds_OpponentDart
c$A8EA SUB A         ; #REGa=#N$00.
 $A8EB LD C,$96      ; #REGc=#N$96.
@label=Sounds_OpponentDart_OuterLoop
*$A8ED LD B,C        ; Copy the delay into #REGb as a counter.
@label=Sounds_OpponentDart_DelayLoop
*$A8EE DJNZ $A8EE    ; Decrease the delay loop counter by one and loop back to #R$A8EE
                     ; until the counter is zero.
 $A8F0 XOR %00010000 ; Flip the current speaker state.
 $A8F2 OUT ($FE),A   ; Send it to the speaker.
 $A8F4 INC C         ; Increment #REGc by one.
 $A8F5 JR NZ,$A8ED   ; Jump back to #R$A8ED until #REGc is zero.
 $A8F7 RET           ; Return.

; Start Menu
;
; Used by the routines at #R$9D33 and #R$A9E5.
;
; .
;
; #PUSHS #SIM(start=$9D33,stop=$A95F)
; #UDGTABLE(default)
;   { #SCR$02(start-menu-1) }
; UDGTABLE# #POPS
@label=StartMenu
c$A8F8 XOR A            ; {Write #N$00 to; #LIST
 $A8F9 LD ($9B2A),A     ; { *#R$9B2A }
 $A8FC LD ($9B2C),A     ; { *#R$9B2C }
 $A8FF LD ($9B2B),A     ; { *#R$9B2B }
                        ; LIST#}
 $A902 LD HL,$0501      ; {Write #N$0501 to *#R$AF5D.
 $A905 LD ($AF5D),HL    ; }
 $A908 LD A,$14         ; {Write #N$14 to *#R$9B2D.
 $A90A LD ($9B2D),A     ; }
 $A90D LD HL,$01F5      ; {Write #N$01F5 to *#R$9B1F.
 $A910 LD ($9B1F),HL    ; }
 $A913 CALL $A9C2       ; Call #R$A9C2.
 $A916 CALL $964C       ; Call #R$964C.
 $A919 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $A91B DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $A91D DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A91F DEFB $16,$01,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A922 DEFM "1"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(1)
 $A923 DEFB $16,$03,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A926 DEFM "TUNE"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(tune)
 $A92A DEFB $16,$04,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A92D DEFM "UP"        ; #FONT#(:(#STR(#PC,$04,$02)))$8D75,attr=$47(up)
 $A92F DEFB $16,$07,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A932 DEFM "2"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(2)
 $A933 DEFB $16,$09,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A936 DEFM "GAME"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(game)
 $A93A DEFB $16,$0A,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A93D DEFM "ON"        ; #FONT#(:(#STR(#PC,$04,$02)))$8D75,attr=$47(on)
 $A93F DEFB $16,$0D,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A942 DEFM "3"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(3)
 $A943 DEFB $16,$0F,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A946 DEFM "TWO"       ; #FONT#(:(#STR(#PC,$04,$03)))$8D75,attr=$47(two)
 $A949 DEFB $16,$10,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A94C DEFM "PLAYER"    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(player)
 $A952 DEFB $16,$13,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A955 DEFM "4"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(4)
 $A956 DEFB $16,$15,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A959 DEFM "OOPS["     ; #FONT#(:(#STR(#PC,$04,$05)))$8D75,attr=$47(oops)
 $A95E DEFB $FF         ; Terminator.
 $A95F CALL $AE04       ; Call #R$AE04.
@label=StartMenu_InputLoop
*$A962 CALL $965F       ; Call #R$965F.
 $A965 CP $31           ; {Jump to #R$A97A if the player has pressed "#CHR$31".
 $A967 JR Z,$A97A       ; }
 $A969 CP $32           ; {Jump to #R$AA3B if the player has pressed "#CHR$32".
 $A96B JP Z,$AA3B       ; }
 $A96E CP $33           ; {Jump to #R$AA9B if the player has pressed "#CHR$33".
 $A970 JP Z,$AA9B       ; }
 $A973 CP $34           ; {Jump back to #R$933F if the player has pressed
 $A975 JP Z,$933F       ; "#CHR$34".}
 $A978 JR $A962         ; Jump to #R$A962.

; SubGame: Around The Clock
;
; Used by the routine at #R$A8F8.
;
; .
;
; #PUSHS #SIM(start=$9D33,stop=$A95F)#SIM(start=$A97D,stop=$A9AA)
; #UDGTABLE(default)
;   { #SCR$02(around-the-clock) }
; UDGTABLE# #POPS
@label=AroundTheClock
c$A97A CALL $9942       ; Call #R$9942.
 $A97D CALL $A9C2       ; Call #R$A9C2.
 $A980 CALL $964C       ; Call #R$964C.
 $A983 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $A985 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $A987 DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A989 DEFB $16,$01,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A98C DEFM "AROUND"    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(around)
 $A992 DEFB $16,$02,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A995 DEFM " THE"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(the)
 $A999 DEFB $16,$03,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A99C DEFM "CLOCK["    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(clock)
 $A9A2 DEFB $16,$09,$02 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A9A5 DEFM "TIME"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(time)
 $A9A9 DEFB $FF         ; Terminator.
; Set the countdown timer.
 $A9AA LD HL,$A38C      ; {Write "#CHR$39#CHR$39" to *#R$A38C.
 $A9AD LD (HL),$39      ;
 $A9AF INC HL           ;
 $A9B0 LD (HL),$39      ; }
 $A9B2 LD HL,$9AB5      ; {Write "#CHR$32" to *#R$9AB5.
 $A9B5 LD (HL),$32      ; }
 $A9B7 LD A,$01         ; {Write #N$01 to; #LIST { *#R$9B2C } { *#R$9B2B }
 $A9B9 LD ($9B2C),A     ; LIST#
 $A9BC LD ($9B2B),A     ; }
 $A9BF JP $9D42         ; Jump to #R$9D42.

; Routine at A9C2
;
; Used by the routines at #R$A8F8 and #R$A97A.
c$A9C2 LD DE,$0101   ; #REGde=#N$0101.
 $A9C5 LD B,$16      ; #REGb=#N$16.
*$A9C7 PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $A9C8 PUSH BC       ; }
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $A9C9 CALL $A8AE    ; Call #R$A8AE.
 $A9CC LD B,$08      ; #REGb=#N$08.
*$A9CE PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $A9CF PUSH HL       ; }
 $A9D0 LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $A9D3 PUSH HL       ; Stash #REGhl on the stack.
 $A9D4 POP DE        ; Restore #REGde from the stack.
 $A9D5 INC DE        ; Increment #REGde by one.
 $A9D6 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $A9D8 LDIR          ; LDIR.
 $A9DA POP HL        ; Restore #REGhl from the stack.
 $A9DB INC H         ; Increment #REGh by one.
 $A9DC POP BC        ; Restore #REGbc from the stack.
 $A9DD DJNZ $A9CE    ; Decrease counter by one and loop back to #R$A9CE until
                     ; counter is zero.
 $A9DF POP BC        ; {Restore #REGbc and #REGde from the stack.
 $A9E0 POP DE        ; }
 $A9E1 INC D         ; Increment #REGd by one.
 $A9E2 DJNZ $A9C7    ; Decrease counter by one and loop back to #R$A9C7 until
                     ; counter is zero.
 $A9E4 RET           ; Return.

; Messaging: Hard Luck
;
; Used by the routine at #R$9D42.
@label=Messaging_HardLuck
c$A9E5 CALL $964C       ; Call #R$964C.
 $A9E8 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $A9EA DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $A9EC DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $A9EE DEFB $16,$0B,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A9F1 DEFM "UP["       ; #FONT#(:(#STR(#PC,$00,$03)))$8D75,attr=$47(up)
 $A9F4 DEFB $16,$0D,$02 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A9F7 DEFM "HARD"      ;  #FONT#(:(#STR(#PC,$00,$04)))$8D75,attr=$47(hard)
 $A9FB DEFB $16,$0E,$02 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $A9FE DEFM "LUCK["     ;  #FONT#(:(#STR(#PC,$00,$05)))$8D75,attr=$47(luck)
 $AA03 DEFB $FF         ; Terminator.
 $AA04 CALL $AE04       ; Call #R$AE04.
 $AA07 JP $A8F8         ; Jump to #R$A8F8.

; Routine at AA0A
;
; Used by the routine at #R$9D42.
c$AA0A XOR A            ; {Write #N$00 to; #LIST
 $AA0B LD ($9B2B),A     ; { *#R$9B2B }
 $AA0E LD ($9B2C),A     ; { *#R$9B2B(#N$9B2C) }
                        ; LIST#}
 $AA11 CALL $964C       ; Call #R$964C.
 $AA14 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $AA16 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $AA18 DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $AA1A DEFB $16,$0D,$02 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AA1D DEFM "GOOD"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(good)
 $AA21 DEFB $16,$0E,$01 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AA24 DEFM "ARROWS"    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(arrows)
 $AA2A DEFB $16,$10,$02 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AA2D DEFM "GAME"      ; #FONT#(:(#STR(#PC,$04,$04)))$8D75,attr=$47(game)
 $AA31 DEFB $16,$11,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AA34 DEFM "ON["       ; #FONT#(:(#STR(#PC,$04,$03)))$8D75,attr=$47(on!)
 $AA37 DEFB $FF         ; Terminator.
 $AA38 CALL $AE04       ; Call #R$AE04.
; The entrypoint for a one-player game.
@label=Game_OnePlayer
*$AA3B LD HL,$9AA7      ; {Write #N$00 to *#R$9AA7.
 $AA3E LD (HL),$00      ; }
 $AA40 LD HL,$9AA6      ; {Write #N$00 to *#R$9AA6.
 $AA43 LD (HL),$00      ; }
 $AA45 CALL $B517       ; Call #R$B517.
 $AA48 CALL $A7A5       ; Call #R$A7A5.
 $AA4B CALL $B5BA       ; Call #R$B5BA.
 $AA4E CALL $AE04       ; Call #R$AE04.
 $AA51 CALL $AE04       ; Call #R$AE04.
 $AA54 CALL $AE04       ; Call #R$AE04.
 $AA57 JP $AADC         ; Jump to #R$AADC.

; Handler: Match
;
; Used by the routine at #R$A15C.
@label=Handler_Match
c$AA5A LD HL,$9AA6   ; #REGhl=#R$9AA6.
 $AA5D INC (HL)      ; Increment *#REGhl by one.
 $AA5E LD A,(HL)     ; {Jump to #R$AADC if *#REGhl is not equal to #N$02.
 $AA5F CP $02        ;
 $AA61 JR NZ,$AADC   ; }
 $AA63 XOR A         ; {Write #N$00 to *#R$9AA6 and *#R$9AA7.
 $AA64 LD (HL),A     ;
 $AA65 LD HL,$9AA7   ;
 $AA68 LD (HL),A     ; }
 $AA69 CALL $A7A5    ; Call #R$A7A5.
 $AA6C CALL $B640    ; Call #R$B640.
 $AA6F CALL $AE04    ; {Call #R$AE04 three times.
 $AA72 CALL $AE04    ;
 $AA75 CALL $AE04    ; }
 $AA78 JP $AADC      ; Jump to #R$AADC.

; Handler: Semi Final
;
; Used by the routine at #R$A15C.
@label=Handler_SemiFinal
c$AA7B LD HL,$9AA6   ; #REGhl=#R$9AA6.
 $AA7E INC (HL)      ; Increment *#REGhl by one.
 $AA7F LD A,(HL)     ; {Jump to #R$AADC if *#REGhl is not equal to #N$02.
 $AA80 CP $02        ;
 $AA82 JR NZ,$AADC   ; }
 $AA84 XOR A         ; {Write #N$00 to *#R$9AA6 and *#R$9AA7.
 $AA85 LD (HL),A     ;
 $AA86 LD HL,$9AA7   ;
 $AA89 LD (HL),A     ; }
 $AA8A CALL $A7A5    ; Call #R$A7A5.
 $AA8D CALL $B6C2    ; Call #R$B6C2.
 $AA90 CALL $AE04    ; Call #R$AE04.
 $AA93 CALL $AE04    ; Call #R$AE04.
 $AA96 CALL $AE04    ; Call #R$AE04.
 $AA99 JR $AADC      ; Jump to #R$AADC.

; Two Player Game
;
; Used by the routine at #R$A8F8.
@label=Game_TwoPlayer
c$AA9B LD A,$01      ; {Write #N$01 to; #LIST
 $AA9D LD ($9AB7),A  ; { *#R$9AB7 }
 $AAA0 LD ($9AB8),A  ; { *#R$9AB8 }
                     ; LIST#}
 $AAA3 CALL $AAA8    ; Call #R$AAA8.
 $AAA6 JR $AADC      ; Jump to #R$AADC.

; Print Current Player ID
;
; Used by the routines at #R$A0D6 and #R$AA9B.
@label=Print_CurrentPlayerID
c$AAA8 CALL $964C       ; Call #R$964C.
 $AAAB DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $AAAD DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $AAAF DEFB $00         ;
 $AAB0 DEFB $16,$0A,$0D ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AAB3 DEFM "PLAYER"    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(player)
 $AAB9 DEFB $FF         ; Terminator.
; Flip the current player ID.
 $AABA LD A,($9AB8)     ; {Toggle *#R$9AB8 to switch from 1UP to 2UP/ 2UP to
 $AABD XOR $01          ; 1UP.
 $AABF LD ($9AB8),A     ; }
 $AAC2 JR Z,$AAD0       ; Jump to #R$AAD0 if the current player is 1UP.
; Print "2" (For Player 2).
 $AAC4 CALL $964C       ; Call #R$964C.
 $AAC7 DEFB $16,$0A,$14 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AACA DEFM "2"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(2)
 $AACB DEFB $FF         ; Terminator.
 $AACC CALL $AE04       ; Call #R$AE04.
 $AACF RET              ; Return.
; Print "1" (For Player 1).
@label=Print_1
*$AAD0 CALL $964C       ; Call #R$964C.
 $AAD3 DEFB $16,$0A,$14 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AAD6 DEFM "1"         ; #FONT#(:(#STR(#PC,$04,$01)))$8D75,attr=$47(1)
 $AAD7 DEFB $FF         ; Terminator.
 $AAD8 CALL $AE04       ; Call #R$AE04.
 $AADB RET              ; Return.

; Routine at AADC
;
; Used by the routines at #R$AA0A, #R$AA5A, #R$AA7B, #R$AA9B and #R$B16B.
c$AADC XOR A         ; #REGa=#N$00.
 $AADD CALL $CB1E    ; Call #R$CB1E.
 $AAE0 CALL $CC62    ; Call #R$CC62.
 $AAE3 CALL $A7A5    ; Call #R$A7A5.
 $AAE6 LD HL,$01F5   ; {Write #N$01F5 to; #LIST
 $AAE9 LD ($B40A),HL ; { *#R$B40A }
 $AAEC LD ($9B1F),HL ; { *#R$9B1F }
 $AAEF LD ($9AB0),HL ; { *#R$9AB0 }
 $AAF2 LD ($9AB2),HL ; { *#R$9AB2 }
                     ; LIST#}
; Update the copy of the "current total".
 $AAF5 LD HL,$ACF6   ; {Write "#CHR$35#CHR$30#CHR$31" to *#R$ACF6.
 $AAF8 LD (HL),$35   ;
 $AAFA INC HL        ;
 $AAFB LD (HL),$30   ;
 $AAFD INC HL        ;
 $AAFE LD (HL),$31   ; }
 $AB00 CALL $A3A4    ; Call #R$A3A4.
 $AB03 XOR A         ; {Write #N$00 to; #LIST
 $AB04 LD ($B416),A  ; { *#R$B416 }
 $AB07 LD ($9B0F),A  ; { *#R$9B0F }
 $AB0A LD ($9AAD),A  ; { *#R$9AAD }
 $AB0D LD ($9AA9),A  ; { *#R$9AA9 }
                     ; LIST#}
 $AB10 LD HL,$0201   ; {Write #N$0201 to *#R$AF5D.
 $AB13 LD ($AF5D),HL ; }
 $AB16 LD HL,($9B1F) ; {Write *#R$9B1F to *#R$AF49.
 $AB19 LD ($AF49),HL ; }
 $AB1C CALL $AE17    ; Call #R$AE17.
 $AB1F LD HL,$0501   ; {Write #N$0501 to *#R$AF5D.
 $AB22 LD ($AF5D),HL ; }
 $AB25 LD HL,$01F5   ; {Write #N$01F5 to *#R$B40A.
 $AB28 LD ($B40A),HL ; }
 $AB2B JP $9D42      ; Jump to #R$9D42.

; Animation: Opponent Throwing
;
; Used by the routine at #R$A15C.
@label=Animation_OpponentThrowing
c$AB2E LD HL,$DD00      ; {Copy #N$1B00 bytes of data from *#R$DD00 to #R$4000.
 $AB31 LD DE,$4000      ;
 $AB34 LD BC,$1B00      ;
 $AB37 LDIR             ; }
 $AB39 LD BC,($9AAE)    ; #REGbc=*#R$9AAE.
 $AB3D LD D,$06         ; #REGd=#N$06.
 $AB3F LD E,$16         ; #REGe=#N$16.
 $AB41 CALL $B761       ; Call #R$B761.
; Self-modifying code.
 $AB44 LD A,$ED         ; {#HTML(Writes an extra <code>LDI</code> to #R$B8EA.)
 $AB46 LD ($B8EA),A     ;
 $AB49 LD A,$A0         ;
 $AB4B LD ($B8EB),A     ; }
 $AB4E LD E,$0A         ; #REGe=#N$0A.
 $AB50 CALL $A875       ; Call #R$A875.
 $AB53 AND A            ; {Jump to #R$AB64 if #REGa is not equal to #N$0A.
 $AB54 JR NZ,$AB64      ; }
 $AB56 LD HL,$48B0      ; #REGhl=#N$48B0 (screen buffer location).
 $AB59 LD DE,$C8BC      ; #REGde=#R$C8BC.
 $AB5C CALL $B8D9       ; Call #R$B8D9.
 $AB5F LD A,$01         ; {Write #N$01 to *#R$9AAA.
 $AB61 LD ($9AAA),A     ; }
*$AB64 LD HL,$ACF6      ; {Copy #N($0003,$04,$04) bytes of data from *#R$ACF6
 $AB67 LD DE,$9B2F      ; to *#R$9B2F.
 $AB6A LD BC,$0003      ;
 $AB6D LDIR             ; }
 $AB6F CALL $ACD9       ; Call #R$ACD9.
 $AB72 CALL $AE04       ; Call #R$AE04.
 $AB75 CALL $AC52       ; Call #R$AC52.
 $AB78 CALL $964C       ; Call #R$964C.
 $AB7B DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $AB7D DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $AB7F DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $AB81 DEFB $16,$16,$00 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AB84 DEFM "1ST DART"  ; #FONT#(:(#STR(#PC,$00,$08)))$8D75,attr=$47(1st-dart)
 $AB8C DEFB $FF         ; Terminator.
 $AB8D CALL $AC3D       ; Call #R$AC3D.
 $AB90 CALL $AFB5       ; Call #R$AFB5.
 $AB93 CALL $ACFB       ; Call #R$ACFB.
 $AB96 CALL $B7E1       ; Call #R$B7E1.
 $AB99 CALL $AD5C       ; Call #R$AD5C.
 $AB9C CALL $AE04       ; Call #R$AE04.
 $AB9F LD A,($B412)     ; {Jump to #R$B16B if *#R$B412 is not equal to zero.
 $ABA2 AND A            ;
 $ABA3 JP NZ,$B16B      ; }
 $ABA6 LD A,($B417)     ; {Jump to #R$AD3B if *#R$B417 is not equal to zero.
 $ABA9 AND A            ;
 $ABAA JP NZ,$AD3B      ; }
 $ABAD CALL $AC52       ; Call #R$AC52.
 $ABB0 CALL $AFB5       ; Call #R$AFB5.
 $ABB3 CALL $964C       ; Call #R$964C.
 $ABB6 DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $ABB8 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $ABBA DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $ABBC DEFB $16,$16,$00 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ABBF DEFM "2ND DART"  ; #FONT#(:(#STR(#PC,$00,$08)))$8D75,attr=$47(2nd-dart)
 $ABC7 DEFB $FF         ; Terminator.
 $ABC8 CALL $AC3D       ; Call #R$AC3D.
 $ABCB CALL $ACFB       ; Call #R$ACFB.
 $ABCE CALL $B7E1       ; Call #R$B7E1.
 $ABD1 CALL $AD5C       ; Call #R$AD5C.
 $ABD4 CALL $AE04       ; Call #R$AE04.
 $ABD7 LD A,($B412)     ; {Jump to #R$B16B if *#R$B412 is not equal to #N$00.
 $ABDA AND A            ;
 $ABDB JP NZ,$B16B      ; }
 $ABDE LD A,($B417)     ; {Jump to #R$AD3B if *#R$B417 is not equal to #N$00.
 $ABE1 AND A            ;
 $ABE2 JP NZ,$AD3B      ; }
 $ABE5 CALL $AC52       ; Call #R$AC52.
 $ABE8 CALL $AFB5       ; Call #R$AFB5.
 $ABEB CALL $964C       ; Call #R$964C.
 $ABEE DEFB $10,$07     ; INK: #INK(#PEEK(#PC+$01)).
 $ABF0 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $ABF2 DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $ABF4 DEFB $16,$16,$00 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ABF7 DEFM "3RD DART"  ; #FONT#(:(#STR(#PC,$00,$08)))$8D75,attr=$47(3rd-dart)
 $ABFF DEFB $FF         ; Terminator.
 $AC00 CALL $AC3D       ; Call #R$AC3D.
 $AC03 CALL $ACFB       ; Call #R$ACFB.
 $AC06 CALL $B7E1       ; Call #R$B7E1.
 $AC09 CALL $AD5C       ; Call #R$AD5C.
 $AC0C CALL $AE04       ; Call #R$AE04.
 $AC0F LD A,($B412)     ; {Jump to #R$B16B if *#R$B412 is not equal to #N$00.
 $AC12 AND A            ;
 $AC13 JP NZ,$B16B      ; }
 $AC16 LD A,($B417)     ; {Jump to #R$AD3B if *#R$B417 is not equal to #N$00.
 $AC19 AND A            ;
 $AC1A JP NZ,$AD3B      ; }
; This entry point is used by the routine at #R$AD3B.
*$AC1D LD A,($9AAA)     ; {Call #R$B871 if *#R$9AAA is not equal to #N$00.
 $AC20 AND A            ;
 $AC21 CALL NZ,$B871    ; }
 $AC24 LD HL,$ACF6      ; {Copy #N($0003,$04,$04) bytes of data from *#R$ACF6
 $AC27 LD DE,$ACD4      ; to *#R$ACD4.
 $AC2A LD BC,$0003      ;
 $AC2D LDIR             ; }
 $AC2F CALL $AC52       ; Call #R$AC52.
 $AC32 CALL $ACB9       ; Call #R$ACB9.
 $AC35 CALL $AE04       ; Call #R$AE04.
 $AC38 XOR A            ; {Write #N$00 to *#R$9AAA.
 $AC39 LD ($9AAA),A     ; }
 $AC3C RET              ; Return.

; Messaging: Aiming At
;
; Used by the routine at #R$AB2E.
@label=Messaging_AimingAt
c$AC3D CALL $964C       ; Call #R$964C.
 $AC40 DEFB $10,$05     ; INK: #INK(#PEEK(#PC+$01)).
 $AC42 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $AC44 DEFB $16,$16,$0A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AC47 DEFM "AIMING AT" ; #FONT#(:(#STR(#PC,$00,$09)))$8D75,attr=$47(aiming-at)
 $AC50 DEFB $FF         ; Terminator.
 $AC51 RET              ; Return.

; Clear Messaging Area
;
; Used by the routines at #R$AB2E, #R$AD3B and #R$B16B.
@label=ClearMessagingArea
c$AC52 CALL $964C                              ; Call #R$964C.
 $AC55 DEFB $16,$16,$00                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $AC58 DEFM "                                " ; "#STR#(#PC,$04,$20)".
 $AC78 DEFB $16,$17,$00                        ; PRINT AT: #N(#PEEK(#PC+$01)),
                                               ; #N(#PEEK(#PC+$02)).
 $AC7B DEFM "                                " ; "#STR#(#PC,$04,$20)".
 $AC9B DEFB $FF                                ; Terminator.
 $AC9C RET                                     ; Return.

; Flash Current Total
;
; Used by the routines at #R$A3A4 and #R$A3C3.
@label=FlashCurrentTotal
c$AC9D LD HL,$ACF6      ; {Copy #N($0003,$04,$04) bytes of data from *#R$ACF6
 $ACA0 LD DE,$ACB4      ; to *#R$ACB4.
 $ACA3 LD BC,$0003      ;
 $ACA6 LDIR             ; }
 $ACA8 CALL $964C       ; Call #R$964C.
 $ACAB DEFB $16,$16,$03 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ACAE DEFB $10,$06     ; INK: #INK(#PEEK(#PC+$01)).
 $ACB0 DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $ACB2 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
@label=Messaging_FlashCurrentTotal
 $ACB4 DEFM "   "       ; "#STR#(#PC,$04,$03)".
 $ACB7 DEFB $FF         ; Terminator.
 $ACB8 RET              ; Return.

; Messaging: Final Total
;
; Used by the routine at #R$AB2E.
@label=Messaging_FinalTotal
c$ACB9 CALL $964C          ; Call #R$964C.
 $ACBC DEFB $10,$07        ; INK: #INK(#PEEK(#PC+$01)).
 $ACBE DEFB $11,$00        ; PAPER: #INK(#PEEK(#PC+$01)).
 $ACC0 DEFB $12,$01        ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $ACC2 DEFB $16,$16,$10    ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ACC5 DEFM " FINAL TOTAL" ; #FONT#(:(#STR(#PC,$00,$0C)))$8D75,attr=$47(final-total)
 $ACD1 DEFB $16,$16,$1D    ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
@label=FinalTotal
 $ACD4 DEFM "   "          ; "#STR#(#PC,$04,$03)".
 $ACD7 DEFB $FF            ; Terminator.
 $ACD8 RET                 ; Return.

; Messaging: Current Total
;
; Used by the routine at #R$AB2E.
@label=Messaging_CurrentTotal
c$ACD9 CALL $964C            ; Call #R$964C.
 $ACDC DEFB $10,$07          ; INK: #INK(#PEEK(#PC+$01)).
 $ACDE DEFB $11,$00          ; PAPER: #INK(#PEEK(#PC+$01)).
 $ACE0 DEFB $12,$01          ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $ACE2 DEFB $16,$16,$0E      ; PRINT AT: #N(#PEEK(#PC+$01)),
                             ; #N(#PEEK(#PC+$02)).
 $ACE5 DEFM " CURRENT TOTAL" ; #FONT#(:(#STR(#PC,$00,$0E)))$8D75,attr=$47(current-total)
 $ACF3 DEFB $16,$16,$1D      ; PRINT AT: #N(#PEEK(#PC+$01)),
                             ; #N(#PEEK(#PC+$02)).
@label=Current_Total
 $ACF6 DEFM "   "            ; "#STR#(#PC,$04,$03)".
 $ACF9 DEFB $FF              ; Terminator.
 $ACFA RET                   ; Return.

; Routine at ACFB
;
; Used by the routine at #R$AB2E.
c$ACFB LD HL,$AD0E      ; #REGhl=#R$AD0E.
 $ACFE LD A,(HL)        ; #REGa=*#REGhl.
 $ACFF LD (HL),$20      ; Write #N$20 to *#REGhl.
 $AD01 LD C,$14         ; #REGc=#N$14.
 $AD03 LD B,$16         ; #REGb=#N$16.
 $AD05 CALL $AD82       ; Call #R$AD82.
 $AD08 CALL $964C       ; Call #R$964C.
 $AD0B DEFB $16,$16,$1A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD0E DEFM "   "       ; "#STR#(#PC,$04,$03)".
 $AD11 DEFB $FF         ; Terminator.
 $AD12 RET              ; Return.
 $AD13 RET              ; Return.
 $AD14 LD HL,$AD36      ; #REGhl=#R$AD36.
 $AD17 LD A,(HL)        ; #REGa=*#REGhl.
 $AD18 LD ($C350),A     ; Write #REGa to *#R$C350.
 $AD1B LD (HL),$20      ; Write #N$20 to *#REGhl.
 $AD1D LD C,$14         ; #REGc=#N$14.
 $AD1F LD B,$17         ; #REGb=#N$17.
 $AD21 CALL $AD82       ; Call #R$AD82.
 $AD24 CALL $964C       ; Call #R$964C.
 $AD27 DEFB $10,$05     ; INK: #INK(#PEEK(#PC+$01)).
 $AD29 DEFB $11,$00     ; PAPER: #INK(#PEEK(#PC+$01)).
 $AD2B DEFB $12,$01     ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $AD2D DEFB $16,$17,$10 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD30 DEFM "GOT"       ; #FONT#(:(#STR(#PC,$00,$03)))$8D75,attr=$47(got)
 $AD33 DEFB $16,$17,$1A ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD36 DEFM "   "       ; "#STR#(#PC,$04,$03)".
 $AD39 DEFB $FF         ; Terminator.
 $AD3A RET              ; Return.

; Messaging: Bust
;
; Used by the routine at #R$AB2E.
@label=Messaging_Bust
c$AD3B CALL $AC52       ; Call #R$AC52.
 $AD3E CALL $964C       ; Call #R$964C.
 $AD41 DEFB $16,$17,$10 ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD44 DEFM "BUST[["    ; #FONT#(:(#STR(#PC,$04,$06)))$8D75,attr=$47(bust)
 $AD4A DEFB $FF         ; Terminator.
 $AD4B CALL $AE04       ; Call #R$AE04.
 $AD4E LD HL,$9B2F      ; {Copy #N($0003,$04,$04) bytes of data from *#R$9B2F
 $AD51 LD DE,$ACF6      ; to *#R$ACF6.
 $AD54 LD BC,$0003      ;
 $AD57 LDIR             ; }
 $AD59 JP $AC1D         ; Jump to #R$AC1D.

; Report Opponent Score
;
; Used by the routine at #R$AB2E.
@label=ReportOpponentScore
c$AD5C LD HL,$AD75          ; #REGhl=#R$AD75.
 $AD5F LD A,(HL)            ; #REGa=*#REGhl.
 $AD60 PUSH AF              ; Stash #REGaf on the stack.
 $AD61 LD (HL),$20          ; Write #N$20 to *#REGhl.
 $AD63 CALL $964C           ; Call #R$964C.
 $AD66 DEFB $10,$05         ; INK: #INK(#PEEK(#PC+$01)).
 $AD68 DEFB $11,$00         ; PAPER: #INK(#PEEK(#PC+$01)).
 $AD6A DEFB $12,$01         ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $AD6C DEFB $16,$17,$10     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD6F DEFM "GOT"           ; #FONT#(:(#STR(#PC,$04,$03)))$8D75,attr=$47(got)
 $AD72 DEFB $16,$17,$1A     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $AD75 DEFM "   "           ; "#STR#(#PC,$04,$03)".
 $AD78 DEFB $FF             ; Terminator.
 $AD79 POP AF               ; Restore #REGaf from the stack.
 $AD7A LD C,$14             ; #REGc=#N$14.
 $AD7C LD B,$17             ; #REGb=#N$17.
 $AD7E CALL $AD82           ; Call #R$AD82.
 $AD81 RET                  ; Return.
; Now report the "type" of scoring.
@label=ReportOpponentScore_Type
*$AD82 CP $53               ; {Jump to #R$AD97 if #REGa is equal to #N$53.
 $AD84 JR Z,$AD97           ; }
 $AD86 CP $44               ; {Jump to #R$ADAD if #REGa is equal to #N$44.
 $AD88 JR Z,$ADAD           ; }
 $AD8A CP $54               ; {Jump to #R$ADC3 if #REGa is equal to #N$54.
 $AD8C JR Z,$ADC3           ; }
 $AD8E CP $4D               ; {Jump to #R$ADD9 if #REGa is equal to #N$4D.
 $AD90 JR Z,$ADD9           ; }
 $AD92 CP $42               ; {Jump to #R$ADEE if #REGa is equal to #N$42.
 $AD94 JR Z,$ADEE           ; }
 $AD96 RET                  ; Return.
; Report score is a "#STR#($ADA5,$04,$06)".
@label=Report_Single
*$AD97 LD A,B               ; {Write #REGbc to *#R$ADA2+#N$01/ #N$02
 $AD98 LD ($ADA3),A         ; (co-ordinates).
 $AD9B LD A,C               ;
 $AD9C LD ($ADA4),A         ; }
 $AD9F CALL $964C           ; Call #R$964C.
@label=Report_Single_PrintAt
 $ADA2 DEFB $16,$16,$00     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ADA5 DEFM "SINGLE"        ; #FONT#(:(#STR(#PC,$00,$06)))$8D75,attr=$47(single)
 $ADAB DEFB $FF             ; Terminator.
 $ADAC RET                  ; Return.
; Report score is a "#STR#($ADBB,$04,$06)".
@label=Report_Double
*$ADAD LD A,B               ; {Write #REGbc to *#R$ADB8+#N$01/ #N$02
 $ADAE LD ($ADB9),A         ; (co-ordinates).
 $ADB1 LD A,C               ;
 $ADB2 LD ($ADBA),A         ; }
 $ADB5 CALL $964C           ; Call #R$964C.
@label=Report_Double_PrintAt
 $ADB8 DEFB $16,$16,$00     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ADBB DEFM "DOUBLE"        ; #FONT#(:(#STR(#PC,$00,$06)))$8D75,attr=$47(double)
 $ADC1 DEFB $FF             ; Terminator.
 $ADC2 RET                  ; Return.
; Report score is a "#STR#($ADD1,$04,$06)".
@label=Report_Treble
*$ADC3 LD A,B               ; {Write #REGbc to *#R$ADCE+#N$01/ #N$02
 $ADC4 LD ($ADCF),A         ; (co-ordinates).
 $ADC7 LD A,C               ;
 $ADC8 LD ($ADD0),A         ; }
 $ADCB CALL $964C           ; Call #R$964C.
@label=Report_Treble_PrintAt
 $ADCE DEFB $16,$16,$00     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ADD1 DEFM "TREBLE"        ; #FONT#(:(#STR(#PC,$00,$06)))$8D75,attr=$47(treble)
 $ADD7 DEFB $FF             ; Terminator.
 $ADD8 RET                  ; Return.
; Report score is a "#STR#($ADDF,$02,$0D)".
@label=Report_MissedBoard
*$ADD9 CALL $964C           ; Call #R$964C.
@label=Report_MissedBoard_PrintAt
 $ADDC DEFB $16,$17,$10     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ADDF DEFM " MISSED BOARD" ; #FONT#(:(#STR(#PC,$00,$0D)))$8D75,attr=$47(missed-board)
 $ADEC DEFB $FF             ; Terminator.
 $ADED RET                  ; Return.
; Report score is a "#STR#($ADFC,$01,$06)".
@label=Report_Bullseye
*$ADEE LD A,B               ; {Write #REGbc to *#R$ADF9+#N$01/ #N$02
 $ADEF LD ($ADFA),A         ; (co-ordinates).
 $ADF2 LD A,C               ;
 $ADF3 LD ($ADFB),A         ; }
 $ADF6 CALL $964C           ; Call #R$964C.
@label=Report_Bullseye_PrintAt
 $ADF9 DEFB $16,$16,$00     ; PRINT AT: #N(#PEEK(#PC+$01)), #N(#PEEK(#PC+$02)).
 $ADFC DEFM "BULL  "        ; #FONT#(:(#STR(#PC,$00,$06)))$8D75,attr=$47(bull)
 $AE02 DEFB $FF             ; Terminator.
 $AE03 RET                  ; Return.

; Long Pause
;
; Used by the routines at #R$A0D6, #R$A15C, #R$A8F8, #R$A9E5, #R$AA0A, #R$AA5A,
; #R$AA7B, #R$AAA8, #R$AB2E, #R$AD3B and #R$B16B.
@label=LongPause
c$AE04 LD B,$03      ; Set a repeat counter in #REGb for #N$03 loops.
@label=LongPause_RepeatLoop
*$AE06 LD HL,$FFFF   ; Set a delay counter in #REGhl to #N$FFFF.
                     ; We count down from this value to zero three times.
@label=LongPause_DelayLoop
*$AE09 DEC HL        ; Decrease the delay counter by one.
 $AE0A LD A,H        ; {Jump back to #R$AE09 until the delay counter is zero.
 $AE0B OR L          ;
 $AE0C JR NZ,$AE09   ; }
 $AE0E LD A,($F821)  ; {Return if bit 4 of *#R$F821 is set.
 $AE11 BIT 4,A       ;
 $AE13 RET NZ        ; }
 $AE14 DJNZ $AE06    ; Decrease the repeat counter by one and loop back to #R$AE06 until
                     ; the repeat counter is zero.
 $AE16 RET           ; Return.

; Routine at AE17
;
; Used by the routines at #R$9D42, #R$A0D6, #R$A272, #R$A41E and #R$AADC.
c$AE17 LD DE,$AF51   ; #REGde=#R$AF51.
 $AE1A LD HL,$AF49   ; #REGhl=#R$AF49.
 $AE1D LD B,$04      ; #REGb=#N$04.
*$AE1F PUSH BC       ; Stash #REGbc on the stack.
 $AE20 LD B,H        ; #REGb=#REGh.
 $AE21 LD C,L        ; #REGc=#REGl.
 $AE22 PUSH DE       ; Stash #REGde on the stack.
 $AE23 LD E,(HL)     ; #REGe=*#REGhl.
 $AE24 INC HL        ; Increment #REGhl by one.
 $AE25 LD D,(HL)     ; #REGd=*#REGhl.
 $AE26 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $AE27 POP DE        ; Restore #REGde from the stack.
 $AE28 CALL $AEF0    ; Call #R$AEF0.
 $AE2B LD H,B        ; #REGh=#REGb.
 $AE2C LD L,C        ; #REGl=#REGc.
 $AE2D INC DE        ; {Increment #REGde by three.
 $AE2E INC DE        ;
 $AE2F INC DE        ; }
 $AE30 INC HL        ; {Increment #REGhl by two.
 $AE31 INC HL        ; }
 $AE32 POP BC        ; Restore #REGbc from the stack.
 $AE33 DJNZ $AE1F    ; Decrease counter by one and loop back to #R$AE1F until
                     ; counter is zero.
 $AE35 LD DE,$AF51   ; #REGde=#R$AF51.
 $AE38 CALL $AE3C    ; Call #R$AE3C.
 $AE3B RET           ; Return.

; Routine at AE3C
;
; Used by the routine at #R$AE17.
c$AE3C LD HL,($AF5D) ; #REGhl=*#R$AF5D.
 $AE3F PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $AE40 PUSH BC       ; }
 $AE41 LD B,$03      ; #REGb=#N$03.
*$AE43 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $AE44 PUSH DE       ; }
 $AE45 LD A,(DE)     ; #REGa=*#REGde.
 $AE46 CP $20        ; {Jump to #R$AE5B if #REGa is equal to #N$20.
 $AE48 JR Z,$AE5B    ; }
 $AE4A ADD A,A       ; Multiply #REGa by #N$02.
 $AE4B LD HL,$AF5F   ; #REGhl=#R$AF5F.
 $AE4E LD E,A        ; {Create an offset in #REGde.
 $AE4F LD D,$00      ; }
 $AE51 ADD HL,DE     ; #REGhl+=#REGde.
 $AE52 LD E,(HL)     ; {Fetch the address at *#REGhl and load it into #REGde.
 $AE53 INC HL        ;
 $AE54 LD D,(HL)     ; }
 $AE55 PUSH DE       ; {#REGix=#REGde (using the stack).
 $AE56 POP IX        ; }
 $AE58 CALL $AE6E    ; Call #R$AE6E.
*$AE5B POP DE        ; Restore #REGde from the stack.
 $AE5C INC DE        ; Increment #REGde by one.
 $AE5D LD HL,($AF5D) ; #REGhl=*#R$AF5D.
 $AE60 INC L         ; {Increment #REGl by two.
 $AE61 INC L         ; }
 $AE62 LD ($AF5D),HL ; Write #REGhl to *#R$AF5D.
 $AE65 POP BC        ; Restore #REGbc from the stack.
 $AE66 DJNZ $AE43    ; Decrease counter by one and loop back to #R$AE43 until
                     ; counter is zero.
 $AE68 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $AE69 POP HL        ; }
 $AE6A LD ($AF5D),HL ; Write #REGhl to *#R$AF5D.
 $AE6D RET           ; Return.

; Routine at AE6E
;
; Used by the routine at #R$AE3C.
c$AE6E PUSH HL       ; {Stash #REGhl, #REGbc and #REGde on the stack.
 $AE6F PUSH BC       ;
 $AE70 PUSH DE       ; }
 $AE71 LD B,(IX+$00) ; #REGb=*#REGix+#N$00.
 $AE74 INC IX        ; Increment #REGix by one.
*$AE76 PUSH BC       ; Stash #REGbc on the stack.
 $AE77 CALL $AEA3    ; Call #R$AEA3.
 $AE7A LD A,(IX+$00) ; #REGa=*#REGix+#N$00.
 $AE7D CALL $AEAF    ; Call #R$AEAF.
 $AE80 LD DE,($AF5D) ; #REGde=*#R$AF5D.
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $AE84 CALL $A8AE    ; Call #R$A8AE.
 $AE87 LD A,(IX+$01) ; #REGa=*#REGix+#N$01.
 $AE8A INC IX        ; {Increment #REGix by two.
 $AE8C INC IX        ; }
 $AE8E CALL $AEC3    ; Call #R$AEC3.
 $AE91 CALL $AECC    ; Call #R$AECC.
 $AE94 LD BC,$03E8   ; #REGbc=#N($03E8,$04,$04).
*$AE97 DEC BC        ; Decrease #REGbc by one.
 $AE98 LD A,B        ; {Jump back to #R$AE97 until #REGbc is zero.
 $AE99 OR C          ;
 $AE9A JR NZ,$AE97   ; }
 $AE9C POP BC        ; Restore #REGbc from the stack.
 $AE9D DJNZ $AE76    ; Decrease counter by one and loop back to #R$AE76 until
                     ; counter is zero.
 $AE9F POP DE        ; {Restore #REGde, #REGbc and #REGhl from the stack.
 $AEA0 POP BC        ;
 $AEA1 POP HL        ; }
 $AEA2 RET           ; Return.

; Routine at AEA3
;
; Used by the routine at #R$AE6E.
c$AEA3 LD HL,$8F55   ; {Copy #N($0008,$04,$04) bytes of data from *#R$8F55 to
 $AEA6 LD DE,$8F5D   ; *#R$8F5D.
 $AEA9 LD BC,$0008   ;
 $AEAC LDIR          ; }
 $AEAE RET           ; Return.

; Routine at AEAF
;
; Used by the routine at #R$AE6E.
c$AEAF AND A         ; {Return if #REGa is zero.
 $AEB0 RET Z         ; }
*$AEB1 LD HL,$8F5D   ; #REGhl=#R$8F5D.
 $AEB4 LD B,$04      ; #REGb=#N$04.
*$AEB6 AND A         ; Set flags.
 $AEB7 RR (HL)       ; Rotate *#REGhl right.
 $AEB9 INC HL        ; Increment #REGhl by one.
 $AEBA RR (HL)       ; Rotate *#REGhl right.
 $AEBC INC HL        ; Increment #REGhl by one.
 $AEBD DJNZ $AEB6    ; Decrease counter by one and loop back to #R$AEB6 until
                     ; counter is zero.
 $AEBF DEC A         ; Decrease #REGa by one.
 $AEC0 JR NZ,$AEB1   ; Jump to #R$AEB1 until #REGa is zero.
 $AEC2 RET           ; Return.

; Routine at AEC3
;
; Used by the routine at #R$AE6E.
c$AEC3 AND A         ; {Return if #REGa is zero.
 $AEC4 RET Z         ; }
 $AEC5 LD B,A        ; #REGb=#REGa.
*$AEC6 CALL $A8CC    ; Call #R$A8CC.
 $AEC9 DJNZ $AEC6    ; Decrease counter by one and loop back to #R$AEC6 until
                     ; counter is zero.
 $AECB RET           ; Return.

; Routine at AECC
;
; Used by the routine at #R$AE6E.
c$AECC LD DE,$8F5D   ; #REGde=#R$8F5D.
 $AECF CALL $AEE5    ; Call #R$AEE5.
 $AED2 CALL $A8CC    ; Call #R$A8CC.
 $AED5 CALL $AEE5    ; Call #R$AEE5.
 $AED8 CALL $A8CC    ; Call #R$A8CC.
 $AEDB CALL $AEE5    ; Call #R$AEE5.
 $AEDE CALL $A8CC    ; Call #R$A8CC.
 $AEE1 CALL $AEE5    ; Call #R$AEE5.
 $AEE4 RET           ; Return.

; Routine at AEE5
;
; Used by the routine at #R$AECC.
c$AEE5 LD A,(DE)     ; #REGa=*#REGde.
 $AEE6 OR (HL)       ; Set the bits from *#REGhl.
 $AEE7 LD (HL),A     ; Write #REGa to *#REGhl.
 $AEE8 INC L         ; Increment #REGl by one.
 $AEE9 INC DE        ; Increment #REGde by one.
 $AEEA LD A,(DE)     ; #REGa=*#REGde.
 $AEEB OR (HL)       ; Set the bits from *#REGhl.
 $AEEC LD (HL),A     ; Write #REGa to *#REGhl.
 $AEED DEC L         ; Decrease #REGl by one.
 $AEEE INC DE        ; Increment #REGde by one.
 $AEEF RET           ; Return.

; Routine at AEF0
;
; Used by the routines at #R$A3C3, #R$AE17 and #R$AFB5.
c$AEF0 PUSH HL       ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $AEF1 PUSH DE       ;
 $AEF2 PUSH BC       ; }
 $AEF3 XOR A         ; #REGa=#N$00.
 $AEF4 LD (DE),A     ; Write #REGa to *#REGde.
 $AEF5 LD BC,$0064   ; #REGbc=#N($0064,$04,$04).
*$AEF8 PUSH HL       ; Stash #REGhl on the stack.
 $AEF9 SBC HL,BC     ; #REGhl-=#REGbc.
 $AEFB POP HL        ; Restore #REGhl from the stack.
 $AEFC JR C,$AF06    ; Jump to #R$AF06 if ?? is less than #N$00.
 $AEFE AND A         ; Set flags.
 $AEFF SBC HL,BC     ; #REGhl-=#REGbc.
 $AF01 LD A,(DE)     ; #REGa=*#REGde.
 $AF02 INC A         ; Increment #REGa by one.
 $AF03 LD (DE),A     ; Write #REGa to *#REGde.
 $AF04 JR $AEF8      ; Jump to #R$AEF8.
*$AF06 OR A          ; Set the bits from #REGa.
 $AF07 JR NZ,$AF0B   ; Jump to #R$AF0B if #REGa is not equal to #REGa.
 $AF09 LD A,$20      ; {Write #N$20 to *#REGde.
*$AF0B LD (DE),A     ; }
 $AF0C INC DE        ; Increment #REGde by one.
 $AF0D XOR A         ; {Write #N$00 to *#REGde.
 $AF0E LD (DE),A     ; }
 $AF0F LD BC,$000A   ; #REGbc=#N($000A,$04,$04).
*$AF12 PUSH HL       ; Stash #REGhl on the stack.
 $AF13 SBC HL,BC     ; #REGhl-=#REGbc.
 $AF15 POP HL        ; Restore #REGhl from the stack.
 $AF16 JR C,$AF20    ; Jump to #R$AF20 if #REGde is less than #REGa.
 $AF18 AND A         ; Set flags.
 $AF19 SBC HL,BC     ; #REGhl-=#REGbc.
 $AF1B LD A,(DE)     ; #REGa=*#REGde.
 $AF1C INC A         ; Increment #REGa by one.
 $AF1D LD (DE),A     ; Write #REGa to *#REGde.
 $AF1E JR $AF12      ; Jump to #R$AF12.
*$AF20 OR A          ; Set the bits from #REGa.
 $AF21 LD B,A        ; #REGb=#REGa.
 $AF22 JR NZ,$AF2F   ; Jump to #R$AF2F if #REGa is not equal to #REGa.
 $AF24 DEC DE        ; Decrease #REGde by one.
 $AF25 LD A,(DE)     ; #REGa=*#REGde.
 $AF26 CP $20        ; Compare #REGa with #N$20.
 $AF28 INC DE        ; Increment #REGde by one.
 $AF29 JR NZ,$AF2F   ; Jump to #R$AF2F if #REGde is not equal to #N$20.
 $AF2B LD A,$20      ; #REGa=#N$20.
 $AF2D JR $AF30      ; Jump to #R$AF30.
*$AF2F LD A,B        ; #REGa=#REGb.
*$AF30 LD (DE),A     ; Write #REGa to *#REGde.
 $AF31 INC DE        ; Increment #REGde by one.
 $AF32 LD A,L        ; #REGa=#REGl.
 $AF33 LD (DE),A     ; Write #REGa to *#REGde.
 $AF34 POP BC        ; {Restore #REGbc, #REGde and #REGhl from the stack.
 $AF35 POP DE        ;
 $AF36 POP HL        ; }
 $AF37 RET           ; Return.
 $AF38 LD HL,($AF49) ; #REGhl=*#R$AF49.
 $AF3B LD DE,($AF4B) ; #REGde=*#R$AF4B.
 $AF3F LD BC,($AF4D) ; #REGbc=*#R$AF4D.
 $AF43 ADD HL,BC     ; #REGhl+=#REGbc.
 $AF44 ADD HL,DE     ; #REGhl+=#REGde.
 $AF45 LD ($AF4F),HL ; Write #REGhl to *#R$AF4F.
 $AF48 RET           ; Return.

; Game status buffer entry at AF49
g$AF49 DEFB $00
 $AF4A DEFB $00
 $AF4B DEFB $00
 $AF4C DEFB $00
 $AF4D DEFB $00,$00

; Game status buffer entry at AF4F
g$AF4F DEFW $0000

; Game status buffer entry at AF51
g$AF51 DEFB $00
 $AF52 DEFB $00
 $AF53 DEFB $00
 $AF54 DEFB $00
 $AF55 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at AF5D
g$AF5D DEFW $0000

; Game status buffer entry at AF5F
g$AF5F DEFW $8F65
 $AF61 DEFW $8FA6
 $AF63 DEFW $8FC5
 $AF65 DEFW $9000
 $AF67 DEFW $903B
 $AF69 DEFW $906A
 $AF6B DEFW $90A7
 $AF6D DEFW $90D8
 $AF6F DEFW $9101
 $AF71 DEFW $914A

; Graphics: Dart Pointer
;
; Graphic data, arranged as:
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($AF73-$AFAF-$01-$30){$00,$00,$C0,$2C}(dart-pointer) }
; UDGTABLE#
@label=Graphics_DartPointer
b$AF73 DEFB $00,$7E,$00,$00,$00,$00
 $AF79 DEFB $00,$FF,$80,$00,$00,$00
 $AF7F DEFB $00,$FF,$C0,$0F,$FC,$00
 $AF85 DEFB $00,$FF,$E0,$78,$06,$00
 $AF8B DEFB $00,$7F,$FF,$C7,$FB,$00
 $AF91 DEFB $00,$20,$1F,$FF,$FF,$FF
 $AF97 DEFB $00,$7F,$FF,$FF,$FF,$00
 $AF9D DEFB $00,$FF,$E0,$7F,$FE,$00
 $AFA3 DEFB $00,$FF,$C0,$0F,$FC,$00
 $AFA9 DEFB $00,$FF,$80,$00,$00,$00
 $AFAF DEFB $00,$7E,$00,$00,$00,$00

; Routine at AFB5
;
; Used by the routine at #R$AB2E.
c$AFB5 XOR A         ; {Write #N$00 to *#R$B417.
 $AFB6 LD ($B417),A  ; }
 $AFB9 LD HL,($B40A) ; #REGhl=*#R$B40A.
 $AFBC LD BC,$006E   ; #REGbc=#N($006E,$04,$04).
 $AFBF AND A         ; Set flags.
 $AFC0 SBC HL,BC     ; #REGhl-=#REGbc.
 $AFC2 ADD HL,BC     ; #REGhl+=#REGbc.
 $AFC3 JR C,$AFD6    ; Jump to #R$AFD6 if ?? is less than #REGa.
 $AFC5 LD A,$14      ; #REGa=#N$14.
 $AFC7 LD BC,($B431) ; {#REGix=*#R$B431 (using the stack).
 $AFCB PUSH BC       ;
 $AFCC POP IX        ; }
 $AFCE LD C,$FF      ; #REGc=#N$FF.
 $AFD0 CALL $B29C    ; Call #R$B29C.
 $AFD3 JP $B0BA      ; Jump to #R$B0BA.
*$AFD6 LD A,L        ; {Jump to #R$B068 if #REGl is less than #N$32.
 $AFD7 CP $32        ;
 $AFD9 JP C,$B068    ; }
 $AFDC LD A,$FF      ; {Write #N$FF to *#R$B416.
 $AFDE LD ($B416),A  ; }
 $AFE1 LD A,($B41A)  ; {#REGb=*#R$B41A.
 $AFE4 LD B,A        ; }
 $AFE5 LD A,L        ; {Jump to #R$B05C if #REGl is equal to #REGb.
 $AFE6 CP B          ;
 $AFE7 JR Z,$B05C    ; }
 $AFE9 SUB $32       ; #REGa-=#N$32.
 $AFEB CP $15        ; {Jump to #R$AFFE if #REGa is greater than or equal to
 $AFED JR NC,$AFFE   ; #N$15.}
 $AFEF LD BC,($B433) ; {#REGix=*#R$B433 (using the stack).
 $AFF3 PUSH BC       ;
 $AFF4 POP IX        ; }
 $AFF6 LD C,$00      ; #REGc=#N$00.
 $AFF8 CALL $B29C    ; Call #R$B29C.
 $AFFB JP $B0BA      ; Jump to #R$B0BA.
*$AFFE LD D,A        ; {Jump to #R$B016 if #REGd is greater than or equal to
 $AFFF CP $29        ; #N$29.
 $B001 JR NC,$B016   ; }
 $B003 BIT 0,A       ; Test bit 0 of #REGa.
 $B005 JR NZ,$B016   ; Jump to #R$B016 if #REGa is not equal to #N$29.
 $B007 SRL A         ; Shift #REGa right.
 $B009 LD BC,($B437) ; {#REGix=*#R$B437 (using the stack).
 $B00D PUSH BC       ;
 $B00E POP IX        ; }
 $B010 CALL $B342    ; Call #R$B342.
 $B013 JP $B0BA      ; Jump to #R$B0BA.
*$B016 LD D,A        ; #REGd=#REGa.
 $B017 LD C,$00      ; #REGc=#N$00.
 $B019 SUB $03       ; #REGa-=#N$03.
*$B01B INC C         ; Increment #REGc by one.
 $B01C SUB $03       ; #REGa-=#N$03.
 $B01E JR Z,$B024    ; Jump to #R$B024 if #REGc is equal to #N$00.
 $B020 JR C,$B035    ; Jump to #R$B035 if #REGc is less than #N$00.
 $B022 JR $B01B      ; Jump to #R$B01B.
*$B024 INC C         ; Increment #REGc by one.
 $B025 LD A,C        ; #REGa=#REGc.
 $B026 LD BC,($B431) ; {#REGix=*#R$B431 (using the stack).
 $B02A PUSH BC       ;
 $B02B POP IX        ; }
 $B02D LD C,$FF      ; #REGc=#N$FF.
 $B02F CALL $B29C    ; Call #R$B29C.
 $B032 JP $B0BA      ; Jump to #R$B0BA.
*$B035 LD A,D        ; #REGa=#REGd.
 $B036 BIT 0,A       ; Test bit 0 of #REGa.
 $B038 JR NZ,$B04B   ; Jump to #R$B04B if #REGc is not equal to #N$FF.
 $B03A LD A,$14      ; #REGa=#N$14.
 $B03C LD BC,($B431) ; {#REGix=*#R$B431 (using the stack).
 $B040 PUSH BC       ;
 $B041 POP IX        ; }
 $B043 LD C,$FF      ; #REGc=#N$FF.
 $B045 CALL $B29C    ; Call #R$B29C.
 $B048 JP $B0BA      ; Jump to #R$B0BA.
*$B04B LD A,$13      ; #REGa=#N$13.
 $B04D LD BC,($B431) ; {#REGix=*#R$B431 (using the stack).
 $B051 PUSH BC       ;
 $B052 POP IX        ; }
 $B054 LD C,$FF      ; #REGc=#N$FF.
 $B056 CALL $B29C    ; Call #R$B29C.
 $B059 JP $B0BA      ; Jump to #R$B0BA.
*$B05C LD BC,($B439) ; {#REGix=*#R$B439 (using the stack).
 $B060 PUSH BC       ;
 $B061 POP IX        ; }
 $B063 CALL $B3B6    ; Call #R$B3B6.
 $B066 JR $B0BA      ; Jump to #R$B0BA.
*$B068 LD A,L        ; {Jump to #R$B073 if #REGl is less than #N$29.
 $B069 CP $29        ;
 $B06B JR C,$B073    ; }
 $B06D BIT 0,A       ; Test bit 0 of #REGa.
 $B06F JR Z,$B09A    ; Jump to #R$B09A if #REGa is equal to #N$29.
 $B071 JR $B079      ; Jump to #R$B079.
*$B073 BIT 0,A       ; Test bit 0 of #REGa.
 $B075 JR Z,$B0AA    ; Jump to #R$B0AA if #REGa is equal to #N$29.
 $B077 JR $B08A      ; Jump to #R$B08A.
*$B079 LD A,$13      ; #REGa=#N$13.
 $B07B LD BC,($B433) ; {#REGix=*#R$B433 (using the stack).
 $B07F PUSH BC       ;
 $B080 POP IX        ; }
 $B082 LD C,$00      ; #REGc=#N$00.
 $B084 CALL $B29C    ; Call #R$B29C.
 $B087 JP $B0BA      ; Jump to #R$B0BA.
*$B08A LD A,$01      ; #REGa=#N$01.
 $B08C LD BC,($B433) ; {#REGix=*#R$B433 (using the stack).
 $B090 PUSH BC       ;
 $B091 POP IX        ; }
 $B093 LD C,$00      ; #REGc=#N$00.
 $B095 CALL $B29C    ; Call #R$B29C.
 $B098 JR $B0BA      ; Jump to #R$B0BA.
*$B09A LD A,$14      ; #REGa=#N$14.
 $B09C LD BC,($B433) ; {#REGix=*#R$B433 (using the stack).
 $B0A0 PUSH BC       ;
 $B0A1 POP IX        ; }
 $B0A3 LD C,$00      ; #REGc=#N$00.
 $B0A5 CALL $B29C    ; Call #R$B29C.
 $B0A8 JR $B0BA      ; Jump to #R$B0BA.
*$B0AA LD A,L        ; #REGa=#REGl.
 $B0AB SRL A         ; Shift #REGa right.
 $B0AD LD BC,($B437) ; {#REGix=*#R$B437 (using the stack).
 $B0B1 PUSH BC       ;
 $B0B2 POP IX        ; }
 $B0B4 CALL $B342    ; Call #R$B342.
 $B0B7 JP $B0BA      ; Jump to #R$B0BA.
*$B0BA LD A,($B416)  ; #REGa=*#R$B416.
 $B0BD BIT 0,A       ; Test bit 0 of #REGa.
 $B0BF JR Z,$B0DC    ; Jump to #R$B0DC if #REGa is equal to #N$00.
 $B0C1 LD A,L        ; {Jump to #R$B0D1 if #REGl is greater than or equal to
 $B0C2 CP $7F        ; #N$7F.
 $B0C4 JR NC,$B0D1   ; }
 $B0C6 CP $02        ; {Jump to #R$B0DC if #REGl is greater than or equal to
 $B0C8 JR NC,$B0DC   ; #N$02.}
 $B0CA LD A,($B412)  ; #REGa=*#R$B412.
 $B0CD BIT 0,A       ; Test bit 0 of #REGa.
 $B0CF JR NZ,$B0E0   ; Jump to #R$B0E0 if #REGa is not equal to #N$02.
*$B0D1 LD HL,($B40E) ; {Write *#R$B40E to *#R$B40A.
 $B0D4 LD ($B40A),HL ; }
 $B0D7 LD A,$01      ; {Write #N$01 to *#R$B417.
 $B0D9 LD ($B417),A  ; }
*$B0DC XOR A         ; {Write #N$00 to *#R$B412.
 $B0DD LD ($B412),A  ; }
*$B0E0 PUSH HL       ; Stash #REGhl on the stack.
 $B0E1 LD A,($B415)  ; #REGa=*#R$B415.
 $B0E4 INC A         ; Increment #REGa by one.
 $B0E5 CP $03        ; {Jump to #R$B0ED if #REGa is not equal to #N$03.
 $B0E7 JR NZ,$B0ED   ; }
 $B0E9 LD ($B40E),HL ; Write #REGhl to *#R$B40E.
 $B0EC XOR A         ; {Write #N$00 to *#R$B415.
*$B0ED LD ($B415),A  ; }
 $B0F0 POP HL        ; Restore #REGhl from the stack.
 $B0F1 LD DE,$ACF6   ; #REGde=#R$ACF6.
 $B0F4 LD ($B40A),HL ; Write #REGhl to *#R$B40A.
 $B0F7 CALL $AEF0    ; Call #R$AEF0.
 $B0FA LD DE,$AD0E   ; #REGde=#R$AD0E.
 $B0FD LD A,($B410)  ; #REGa=*#R$B410.
 $B100 LD H,$00      ; #REGh=#N$00.
 $B102 LD L,A        ; #REGl=#REGa.
 $B103 CALL $AEF0    ; Call #R$AEF0.
 $B106 LD DE,$AD36   ; #REGde=#R$AD36.
 $B109 LD A,($B40C)  ; #REGa=*#R$B40C.
 $B10C LD L,A        ; #REGl=#REGa.
 $B10D LD H,$00      ; #REGh=#N$00.
 $B10F CALL $AEF0    ; Call #R$AEF0.
 $B112 LD DE,$AD75   ; #REGde=#R$AD75.
 $B115 LD A,($B411)  ; #REGa=*#R$B411.
 $B118 LD H,$00      ; #REGh=#N$00.
 $B11A LD L,A        ; #REGl=#REGa.
 $B11B CALL $AEF0    ; Call #R$AEF0.
 $B11E LD B,$03      ; #REGb=#N$03.
 $B120 LD HL,$ACF6   ; #REGhl=#R$ACF6.
*$B123 LD A,(HL)     ; #REGa=*#REGhl.
 $B124 CP $20        ; {Jump to #R$B12B if #REGa is equal to #N$20.
 $B126 JR Z,$B12B    ; }
 $B128 ADD A,$30     ; #REGa+=#N$30.
 $B12A LD (HL),A     ; Write #REGa to *#REGhl.
*$B12B INC HL        ; Increment #REGhl by one.
 $B12C DJNZ $B123    ; Decrease counter by one and loop back to #R$B123 until
                     ; counter is zero.
 $B12E LD B,$03      ; #REGb=#N$03.
 $B130 LD HL,$AD0E   ; #REGhl=#R$AD0E.
*$B133 LD A,(HL)     ; #REGa=*#REGhl.
 $B134 CP $20        ; {Jump to #R$B13B if #REGa is equal to #N$20.
 $B136 JR Z,$B13B    ; }
 $B138 ADD A,$30     ; #REGa+=#N$30.
 $B13A LD (HL),A     ; Write #REGa to *#REGhl.
*$B13B INC HL        ; Increment #REGhl by one.
 $B13C DJNZ $B133    ; Decrease counter by one and loop back to #R$B133 until
                     ; counter is zero.
 $B13E LD B,$03      ; #REGb=#N$03.
 $B140 LD HL,$AD36   ; #REGhl=#R$AD36.
*$B143 LD A,(HL)     ; #REGa=*#REGhl.
 $B144 CP $20        ; {Jump to #R$B14B if #REGa is equal to #N$20.
 $B146 JR Z,$B14B    ; }
 $B148 ADD A,$30     ; #REGa+=#N$30.
 $B14A LD (HL),A     ; Write #REGa to *#REGhl.
*$B14B INC HL        ; Increment #REGhl by one.
 $B14C DJNZ $B143    ; Decrease counter by one and loop back to #R$B143 until
                     ; counter is zero.
 $B14E LD B,$03      ; #REGb=#N$03.
 $B150 LD HL,$AD75   ; #REGhl=#R$AD75.
*$B153 LD A,(HL)     ; #REGa=*#REGhl.
 $B154 CP $20        ; {Jump to #R$B15B if #REGa is equal to #N$20.
 $B156 JR Z,$B15B    ; }
 $B158 ADD A,$30     ; #REGa+=#N$30.
 $B15A LD (HL),A     ; Write #REGa to *#REGhl.
*$B15B INC HL        ; Increment #REGhl by one.
 $B15C DJNZ $B153    ; Decrease counter by one and loop back to #R$B153 until
                     ; counter is zero.
 $B15E LD A,($B418)  ; {Write *#R$B418 to *#R$AD0E.
 $B161 LD ($AD0E),A  ; }
 $B164 LD A,($B419)  ; {Write *#R$B419 to *#R$AD75.
 $B167 LD ($AD75),A  ; }
 $B16A RET           ; Return.

; Handler: Opponent Wins
;
; Used by the routine at #R$AB2E.
@label=Handler_OpponentWins
c$B16B POP HL                        ; Restore #REGhl from the stack.
 $B16C XOR A                         ; {Write #N$00 to *#R$B412.
 $B16D LD ($B412),A                  ; }
 $B170 CALL $AC52                    ; Call #R$AC52.
 $B173 CALL $964C                    ; Call #R$964C.
 $B176 DEFB $16,$16,$02              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
@label=Messaging_OpponentName_Wins
 $B179 DEFM "                 WINS[" ; #FONT#(:(#STR(#PC,$00,$16)))$8D75,attr=$47(wins)
 $B18F DEFB $16,$17,$02              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
 $B192 DEFM "   HARD LUCK[[  "       ; #FONT#(:(#STR(#PC,$00,$10)))$8D75,attr=$47(hard-luck)
 $B1A2 DEFB $FF                      ; Terminator.
 $B1A3 CALL $AE04                    ; Call #R$AE04.
 $B1A6 LD HL,$9AA7                   ; #REGhl=#R$9AA7.
 $B1A9 INC (HL)                      ; Increment *#REGhl by one.
 $B1AA LD A,(HL)                     ; {Jump to #R$AADC if *#REGhl is not equal
 $B1AB CP $02                        ; to #N$02.
 $B1AD JP NZ,$AADC                   ; }
 $B1B0 XOR A                         ; {Write #N$00 to *#REGhl.
 $B1B1 LD (HL),A                     ; }
; Handle displaying the players rating.
 $B1B2 LD A,($9AB4)                  ; #REGa=*#R$9AB4.
 $B1B5 CP $01                        ; {Jump to #R$B1C1 if #REGa is equal to
 $B1B7 JR Z,$B1C1                    ; #N$01.}
 $B1B9 CP $02                        ; {Jump to #R$B1D2 if #REGa is equal to
 $B1BB JR Z,$B1D2                    ; #N$02.}
 $B1BD CP $04                        ; {Jump to #R$B1E3 if #REGa is equal to
 $B1BF JR Z,$B1E3                    ; #N$04.}
; Check if the players rating is "#STR$B278,$08($b==$5B)".
@label=CheckRating_MegaPlayer
*$B1C1 LD A,($9AA9)                  ; {Jump to #R$B1CD if *#R$9AA9 is greater
 $B1C4 CP $0D                        ; than or equal to #N$0D.
 $B1C6 JR NC,$B1CD                   ; }
; Sets the rating: "#STR$B28A,$08($b==$5B)".
@label=SetRating_AsRedHot
 $B1C8 LD HL,$B28A                   ; #REGhl=#R$B28A.
 $B1CB JR $B1F2                      ; Jump to #R$B1F2.
; Sets the rating: "#STR$B278,$08($b==$5B)".
@label=SetRating_AsAMegaPlayer
*$B1CD LD HL,$B278                   ; #REGhl=#R$B278.
 $B1D0 JR $B1F2                      ; Jump to #R$B1F2.
; Check if the players rating is "#STR$B254,$08($b==$5B)".
@label=CheckRating_Amateur
*$B1D2 LD A,($9AA9)                  ; {Jump to #R$B1DE if *#R$9AA9 is greater
 $B1D5 CP $0D                        ; than or equal to #N$0D.
 $B1D7 JR NC,$B1DE                   ; }
; Sets the rating: "#STR$B266,$08($b==$5B)".
@label=SetRating_AsANovice
 $B1D9 LD HL,$B266                   ; #REGhl=#R$B266.
 $B1DC JR $B1F2                      ; Jump to #R$B1F2.
; Sets the rating: "#STR$B254,$08($b==$5B)".
@label=SetRating_AsAnAmateur
*$B1DE LD HL,$B254                   ; #REGhl=#R$B254.
 $B1E1 JR $B1F2                      ; Jump to #R$B1F2.
; Check if the players rating is "#STR$B230,$08($b==$5B)".
@label=CheckRating_Wally
*$B1E3 LD A,($9AA9)                  ; {Jump to #R$B1EF if *#R$9AA9 is greater
 $B1E6 CP $0D                        ; than or equal to #N$0D.
 $B1E8 JR NC,$B1EF                   ; }
; Sets the rating: "#STR$B242,$08($b==$5B)".
@label=SetRating_AsADipstick
 $B1EA LD HL,$B242                   ; #REGhl=#R$B242.
 $B1ED JR $B1F2                      ; Jump to #R$B1F2.
; Sets the rating: "#STR$B230,$08($b==$5B)".
@label=SetRating_AsAWally
*$B1EF LD HL,$B230                   ; {Copy #N($0012,$04,$04) bytes of data
@label=CopyToRatingString
*$B1F2 LD DE,$B217                   ; from *#R$B230 to *#R$B217.
 $B1F5 LD BC,$0012                   ;
 $B1F8 LDIR                          ; }
; Print the rating messaging:
 $B1FA CALL $964C                    ; Call #R$964C.
 $B1FD DEFB $16,$0A,$0A              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
 $B200 DEFB $10,$07                  ; INK: #INK(#PEEK(#PC+$01)).
 $B202 DEFB $11,$00                  ; PAPER: #INK(#PEEK(#PC+$01)).
 $B204 DEFB $12,$01                  ; FLASH:
                                     ; #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $B206 DEFB $00                      ;
 $B207 DEFM "YOU ARE RATED"          ; #FONT#(:(#STR(#PC,$04,$0D)))$8D75,attr=$47(you-are-rated)
 $B214 DEFB $16,$0C,$0A              ; PRINT AT: #N(#PEEK(#PC+$01)),
                                     ; #N(#PEEK(#PC+$02)).
; See #R$B230 for the ratings.
@label=Messaging_Rating
 $B217 DEFM "                  "     ; "#STR#(#PC,$04,$12)".
 $B229 DEFB $FF                      ; Terminator.
 $B22A CALL $AE04                    ; Call #R$AE04.
 $B22D JP $933F                      ; Jump to #R$933F.

; Messaging: Ratings
@label=Messaging_AsAWally
t$B230 DEFM "AS A WALLY[[      " ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-a-wally)
@label=Messaging_AsADipstick
 $B242 DEFM "AS A DIPSTICK[[   " ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-a-dipstick)
@label=Messaging_AsAnAmateur
 $B254 DEFM "AS AN AMATEUR[[   " ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-an-amateur)
@label=Messaging_AsANovice
 $B266 DEFM "AS A NOVICE[[     " ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-a-novice)
@label=Messaging_AsAMegaPlayer
 $B278 DEFM "AS A MEGA PLAYER[[" ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-a-mega-player)
@label=Messaging_AsRedHot
 $B28A DEFM "AS RED HOT[[      " ; #FONT#(:(#STR(#PC,$02,$12)))$8D75,attr=$47(as-red-hot)

; Routine at B29C
;
; Used by the routine at #R$AFB5.
c$B29C PUSH HL       ; Stash #REGhl on the stack.
 $B29D LD D,A        ; #REGd=#REGa.
 $B29E SRL C         ; Shift #REGc right.
 $B2A0 JR NC,$B2AC   ; Jump to #R$B2AC if the result is greater than or equal
                     ; to #N$00.
 $B2A2 LD ($B410),A  ; Write #REGa to *#R$B410.
 $B2A5 LD A,$54      ; {Write #N$54 to *#R$B418.
 $B2A7 LD ($B418),A  ; }
 $B2AA JR $B2B4      ; Jump to #R$B2B4.
*$B2AC LD ($B410),A  ; Write #REGa to *#R$B410.
 $B2AF LD A,$53      ; {Write #N$53 to *#R$B418.
 $B2B1 LD ($B418),A  ; }
*$B2B4 LD A,D        ; #REGa=#REGd.
 $B2B5 CALL $B402    ; Call #R$B402.
 $B2B8 LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $B2BB CALL $A875    ; Call #R$A875.
 $B2BE CP (IX+$00)   ; {Jump to #R$B2CE if *#REGix+#N$00 is greater than or
 $B2C1 JR NC,$B2CE   ; equal to #N$53.}
 $B2C3 LD A,$53      ; {Write #N$53 to *#R$B419.
 $B2C5 LD ($B419),A  ; }
 $B2C8 LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B2C9 LD ($B411),A  ; }
 $B2CC JR $B337      ; Jump to #R$B337.
*$B2CE CP (IX+$01)   ; {Jump to #R$B2E1 if *#REGix+#N$01 is greater than or
 $B2D1 JR NC,$B2E1   ; equal to #N$53.}
 $B2D3 LD A,$54      ; {Write #N$54 to *#R$B419.
 $B2D5 LD ($B419),A  ; }
 $B2D8 LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B2D9 LD ($B411),A  ; }
 $B2DC LD C,A        ; #REGc=#REGa.
 $B2DD ADD A,A       ; #REGa+=#REGa.
 $B2DE ADD A,C       ; #REGa+=#REGc.
 $B2DF JR $B337      ; Jump to #R$B337.
*$B2E1 CP (IX+$02)   ; { Jump to #R$B2F2 if *#REGix+#N$02 is greater than or
 $B2E4 JR NC,$B2F2   ; equal to #N$54.}
 $B2E6 LD A,$53      ; {Write #N$53 to *#R$B419.
 $B2E8 LD ($B419),A  ; }
 $B2EB DEC HL        ; Decrease #REGhl by one.
 $B2EC LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B2ED LD ($B411),A  ; }
 $B2F0 JR $B337      ; Jump to #R$B337.
*$B2F2 CP (IX+$03)   ; {Jump to #R$B306 if *#REGix+#N$03 is greater than or
 $B2F5 JR NC,$B306   ; equal to #N$53.}
 $B2F7 LD A,$54      ; {Write #N$54 to *#R$B419.
 $B2F9 LD ($B419),A  ; }
 $B2FC DEC HL        ; Decrease #REGhl by one.
 $B2FD LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B2FE LD ($B411),A  ; }
 $B301 LD C,A        ; #REGc=#REGa.
 $B302 ADD A,A       ; #REGa+=#REGa.
 $B303 ADD A,C       ; #REGa+=#REGc.
 $B304 JR $B337      ; Jump to #R$B337.
*$B306 CP (IX+$04)   ; {Jump to #R$B317 if *#REGix+#N$04 is greater than or
 $B309 JR NC,$B317   ; equal to #N$54.}
 $B30B LD A,$53      ; {Write #N$53 to *#R$B419.
 $B30D LD ($B419),A  ; }
 $B310 INC HL        ; Increment #REGhl by one.
 $B311 LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B312 LD ($B411),A  ; }
 $B315 JR $B337      ; Jump to #R$B337.
*$B317 CP (IX+$05)   ; {Jump to #R$B32B if *#REGix+#N$05 is greater than or
 $B31A JR NC,$B32B   ; equal to #N$53.}
 $B31C LD A,$54      ; {Write #N$54 to *#R$B419.
 $B31E LD ($B419),A  ; }
 $B321 INC HL        ; Increment #REGhl by one.
 $B322 LD A,(HL)     ; #REGa=*#REGhl.
 $B323 LD ($B411),A  ; Write #REGa to *#R$B411.
 $B326 LD C,A        ; #REGc=#REGa.
 $B327 ADD A,A       ; #REGa+=#REGa.
 $B328 ADD A,C       ; #REGa+=#REGc.
 $B329 JR $B337      ; Jump to #R$B337.
*$B32B LD A,(HL)     ; {#REGd=*#REGhl.
 $B32C LD D,A        ; }
 $B32D LD A,$44      ; {Write #N$44 to *#R$B419.
 $B32F LD ($B419),A  ; }
 $B332 LD A,D        ; {Write #REGd to *#R$B411.
 $B333 LD ($B411),A  ; }
 $B336 ADD A,A       ; #REGa+=#REGa.
*$B337 POP HL        ; Restore #REGhl from the stack.
 $B338 LD D,$00      ; #REGd=#N$00.
 $B33A LD E,A        ; #REGe=#REGa.
 $B33B AND A         ; Set flags.
 $B33C SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $B33E LD ($B40C),A  ; Write #REGa to *#R$B40C.
 $B341 RET           ; Return.

; Routine at B342
;
; Used by the routine at #R$AFB5.
c$B342 PUSH HL       ; Stash #REGhl on the stack.
 $B343 LD ($B410),A  ; Write #REGa to *#R$B410.
 $B346 LD D,A        ; #REGd=#REGa.
 $B347 LD A,$44      ; {Write #COLOUR$44 to *#R$B418.
 $B349 LD ($B418),A  ; }
 $B34C LD A,D        ; #REGa=#REGd.
 $B34D CALL $B402    ; Call #R$B402.
 $B350 CP (IX+$00)   ; {Jump to #R$B36C if *#REGix+#N$00 is greater than or
 $B353 JR NC,$B36C   ; equal to #N$44.}
 $B355 LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B356 LD ($B411),A  ; }
 $B359 CALL $B38E    ; Call #R$B38E.
 $B35C LD D,A        ; #REGd=#REGa.
 $B35D LD A,($B419)  ; #REGa=*#R$B419.
 $B360 CP $44        ; {Jump to #R$B369 if #REGa is not equal to #N$44.
 $B362 JR NZ,$B369   ; }
 $B364 LD A,$FF      ; {Write #N$FF to *#R$B412.
 $B366 LD ($B412),A  ; }
*$B369 LD A,D        ; #REGa=#REGd.
 $B36A JR $B383      ; Jump to #R$B383.
*$B36C CP (IX+$01)   ; {Jump to #R$B37B if *#REGix+#N$01 is greater than or
 $B36F JR NC,$B37B   ; equal to #N$FF.}
 $B371 DEC HL        ; Decrease #REGhl by one.
 $B372 LD A,(HL)     ; {Write *#REGhl to *#R$B411.
 $B373 LD ($B411),A  ; }
 $B376 CALL $B38E    ; Call #R$B38E.
 $B379 JR $B383      ; Jump to #R$B383.
*$B37B INC HL        ; Increment #REGhl by one.
 $B37C LD A,(HL)     ; #REGa=*#REGhl.
 $B37D LD ($B411),A  ; Write #REGa to *#R$B411.
 $B380 CALL $B38E    ; Call #R$B38E.
*$B383 POP HL        ; Restore #REGhl from the stack.
 $B384 LD ($B40C),A  ; Write #REGa to *#R$B40C.
 $B387 LD E,A        ; #REGe=#REGa.
 $B388 LD D,$00      ; #REGd=#N$00.
 $B38A AND A         ; Set flags.
 $B38B SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $B38D RET           ; Return.
*$B38E LD B,A        ; #REGb=#REGa.
 $B38F LD E,$C8      ; #REGe=#N$C8.
 $B391 CALL $A875    ; Call #R$A875.
 $B394 CP (IX+$02)   ; Compare #REGa with *#REGix+#N$02.
 $B397 JR NC,$B3A2   ; Jump to #R$B3A2 if #REGhl is greater than or equal to
                     ; #REGa.
 $B399 LD A,$44      ; {Write #COLOUR$44 to *#R$B419.
 $B39B LD ($B419),A  ; }
 $B39E LD A,B        ; #REGa=#REGb.
 $B39F ADD A,A       ; #REGa+=#REGa.
 $B3A0 JR $B3B5      ; Jump to #R$B3B5.
*$B3A2 CP (IX+$03)   ; Compare #REGa with *#REGix+#N$03.
 $B3A5 JR NC,$B3AF   ; Jump to #R$B3AF if #REGhl is greater than or equal to
                     ; #REGa.
 $B3A7 LD A,$53      ; {Write #N$53 to *#R$B419.
 $B3A9 LD ($B419),A  ; }
 $B3AC LD A,B        ; #REGa=#REGb.
 $B3AD JR $B3B5      ; Jump to #R$B3B5.
*$B3AF LD A,$4D      ; {Write #COLOUR$4D to *#R$B419.
 $B3B1 LD ($B419),A  ; }
 $B3B4 XOR A         ; #REGa=#N$00.
*$B3B5 RET           ; Return.

; Routine at B3B6
;
; Used by the routine at #R$AFB5.
c$B3B6 PUSH HL       ; Stash #REGhl on the stack.
 $B3B7 LD A,L        ; #REGa=#REGl.
 $B3B8 LD ($B410),A  ; Write #REGa to *#R$B410.
 $B3BB LD A,$42      ; {Write #COLOUR$42 to *#R$B418.
 $B3BD LD ($B418),A  ; }
 $B3C0 LD A,L        ; #REGa=#REGl.
 $B3C1 LD DE,$00C8   ; #REGde=#N($00C8,$04,$04).
 $B3C4 CALL $A875    ; Call #R$A875.
 $B3C7 CP (IX+$00)   ; Compare #REGa with *#REGix+#N$00.
 $B3CA JR NC,$B3DA   ; Jump to #R$B3DA if #REGhl is greater than or equal to
                     ; #REGa.
 $B3CC LD A,$42      ; {Write #COLOUR$42 to *#R$B419.
 $B3CE LD ($B419),A  ; }
 $B3D1 LD A,$FF      ; {Write #N$FF to *#R$B412.
 $B3D3 LD ($B412),A  ; }
 $B3D6 LD A,$32      ; #REGa=#N$32.
 $B3D8 JR $B3F4      ; Jump to #R$B3F4.
*$B3DA CP (IX+$01)   ; Compare #REGa with *#REGix+#N$01.
 $B3DD JR NC,$B3E8   ; Jump to #R$B3E8 if #REGhl is greater than or equal to
                     ; #REGa.
 $B3DF LD A,$42      ; {Write #N$42 to *#R$B419.
 $B3E1 LD ($B419),A  ; }
 $B3E4 LD A,$19      ; #REGa=#N$19.
 $B3E6 JR $B3F4      ; Jump to #R$B3F4.
*$B3E8 LD DE,$0013   ; #REGde=#N($0013,$04,$04).
 $B3EB LD A,$53      ; {Write #N$53 to *#R$B419.
 $B3ED LD ($B419),A  ; }
 $B3F0 CALL $A875    ; Call #R$A875.
 $B3F3 INC A         ; Increment #REGa by one.
*$B3F4 LD ($B40C),A  ; Write #REGa to *#R$B40C.
 $B3F7 LD ($B411),A  ; Write #REGa to *#R$B411.
 $B3FA POP HL        ; Restore #REGhl from the stack.
 $B3FB LD D,$00      ; #REGd=#N$00.
 $B3FD LD E,A        ; #REGe=#REGa.
 $B3FE AND A         ; Set flags.
 $B3FF SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $B401 RET           ; Return.

; Routine at B402
;
; Used by the routines at #R$B29C and #R$B342.
c$B402 LD HL,$B41C   ; #REGhl=#R$B41C.
*$B405 CP (HL)       ; {Return if #REGa is equal to *#REGhl.
 $B406 RET Z         ; }
 $B407 INC HL        ; Increment #REGhl by one.
 $B408 JR $B405      ; Jump to #R$B405.

; Data block at B40A
b$B40A DEFB $00,$00

; Data block at B40C
b$B40C DEFB $00,$00

; Data block at B40E
b$B40E DEFB $00,$00

; Data block at B410
b$B410 DEFB $00

; Data block at B411
b$B411 DEFB $00

; Data block at B412
b$B412 DEFB $00,$00,$00

; Data block at B415
b$B415 DEFB $00

; Data block at B416
b$B416 DEFB $00

; Data block at B417
b$B417 DEFB $00

; Data block at B418
b$B418 DEFB $00

; Data block at B419
b$B419 DEFB $00

; Data block at B41A
b$B41A DEFB $32,$05

; Data block at B41C
b$B41C DEFB $14,$01,$12,$04,$0D,$06,$0A,$0F
 $B424 DEFB $02,$11,$03,$13,$07,$10,$08,$0B
 $B42C DEFB $0E,$09,$0C,$05,$14

; Data block at B431
w$B431 DEFW $B43B
 $B433 DEFW $B441
 $B435 DEFW $B447
 $B437 DEFW $B44D
 $B439 DEFW $B451

; Data block at B43B
w$B43B DEFW $7A3D
 $B43D DEFW $9A8A
 $B43F DEFW $BAAA

; Data block at B441
w$B441 DEFW $B414
 $B443 DEFW $BCB8
 $B445 DEFW $C4C0

; Data block at B447
w$B447 DEFW $9664
 $B449 DEFW $AAA0
 $B44B DEFW $BEB4

; Data block at B44D
w$B44D DEFW $AF96
 $B44F DEFW $9664
 $B451 DEFW $9664

; Data block at B453
w$B453 DEFW $826E
 $B455 DEFW $A096
 $B457 DEFW $BEB4
 $B459 DEFW $8C78
 $B45B DEFW $AAA0
 $B45D DEFW $C7BE
 $B45F DEFW $7846
 $B461 DEFW $9682
 $B463 DEFW $BEA0
 $B465 DEFW $9664
 $B467 DEFW $9664
 $B469 DEFW $4B28
 $B46B DEFW $B43B
 $B46D DEFW $B453

; Table: Opponent Data
;
; .
;
; .
;
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_JammyJim
b$B46F DEFM "   JAMMY JIM    "
 $B47F DEFB $04
 $B480 DEFW $B984
 $B482 DEFW $C404
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_BeerBellyBill
 $B484 DEFM "BEER BELLY BILL "
 $B494 DEFB $03
 $B495 DEFW $BAD4
 $B497 DEFW $C44C
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_DelBoyDesmond
 $B499 DEFM "DEL BOY DESMOND "
 $B4A9 DEFB $04
 $B4AA DEFW $BC24
 $B4AC DEFW $C494
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_MegaMick
 $B4AE DEFM "   MEGA MICK    "
 $B4BE DEFB $02
 $B4BF DEFW $BD74
 $B4C1 DEFW $C4DC
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_DeviousDave
 $B4C3 DEFM "  DEVIOUS DAVE  "
 $B4D3 DEFB $03
 $B4D4 DEFW $BEC4
 $B4D6 DEFW $C524
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_SureShotSidney
 $B4D8 DEFM "SURE SHOT SIDNEY"
 $B4E8 DEFB $01
 $B4E9 DEFW $C014
 $B4EB DEFW $C56C
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_LimpWristLarry
 $B4ED DEFM "LIMP WRIST LARRY"
 $B4FD DEFB $04
 $B4FE DEFW $C164
 $B500 DEFW $C5B4
; "#STR(#PC,$04,$10)".
@label=Table_Opponent_TacticalTel
 $B502 DEFM "  TACTICAL TEL  "
 $B512 DEFB $02
 $B513 DEFW $C2B4
 $B515 DEFW $C5FC

; Initialise Opponent
;
; Used by the routine at #R$AA0A.
;
; A Opponent number
@label=InitialiseOpponent
c$B517 LD E,$06      ; #REGe=#N$06.
 $B519 CALL $A875    ; Call #R$A875.
 $B51C LD HL,$B484   ; #REGhl=#R$B484.
 $B51F LD DE,$0015   ; Set the length of the opponent data in #REGde (#N($0015,$04,$04)
                     ; bytes).
 $B522 LD C,A        ; #REGc=the opponent ID.
 $B523 AND A         ; {Set a counter in #REGb of the opponent ID.
 $B524 LD B,A        ; }
 $B525 JR Z,$B52A    ; Jump to #R$B52A if the opponent counter is zero.
@label=FindOpponentData_Loop
*$B527 ADD HL,DE     ; Move #REGhl to the next opponent data block.
 $B528 DJNZ $B527    ; Decrease the opponent counter by one and loop back to #R$B527 until
                     ; the counter is zero.
; #REGhl now points to the opponent data block.
@label=FoundOpponentData
*$B52A LD ($9B21),HL ; Write the opponent data pointer to *#R$9B21.
*$B52D PUSH BC       ; Stash #REGbc on the stack.
 $B52E LD E,$06      ; #REGe=#N$06.
 $B530 CALL $A875    ; Call #R$A875.
 $B533 POP BC        ; Restore #REGbc from the stack.
 $B534 CP C          ; {Jump to #R$B52D if #REGa is equal to #REGc.
 $B535 JR Z,$B52D    ; }
 $B537 LD HL,$B484   ; #REGhl=#R$B484.
 $B53A LD DE,$0015   ; Set the length of the opponent data in #REGde (#N($0015,$04,$04)
                     ; bytes).
 $B53D AND A         ; {Set a counter in #REGb of the opponent ID.
 $B53E LD B,A        ; }
 $B53F JR Z,$B544    ; Jump to #R$B544 if the opponent counter is zero.
*$B541 ADD HL,DE     ; Move #REGhl to the next opponent data block.
 $B542 DJNZ $B541    ; Decrease the opponent counter by one and loop back to #R$B541 until
                     ; the counter is zero.
*$B544 LD ($9B23),HL ; Write #REGhl to *#R$9B23.
 $B547 RET           ; Return.

; Print Match Card
;
; Used by the routines at #R$B5BA, #R$B640 and #R$B6C2.
;
; .
;
; #PUSHS #SIM(start=$9D33,stop=$A95F)#SIM(start=$B548,stop=$B5A5)
; #UDGTABLE(default)
;   { #SCR$02{$80,$00,$180,$180}(match-card) }
; UDGTABLE# #POPS
; .
; This first section clears the area of the dart board where the card
; will appear.
; #PUSHS #SIM(start=$9D33,stop=$A95F)#SIM(start=$B548,stop=$B563)
; #UDGTABLE(default)
;   { #SCR$01(match-card-clear) }
; UDGTABLE#
; .
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
@label=Print_MatchCard
c$B548 LD DE,$040A   ; #REGde=#N$04/ #N$0A.
 $B54B CALL $A8AE    ; Call #R$A8AE.
 $B54E LD B,$80      ; #REGb=#N$80.
@label=MatchCard_ClearLoop
*$B550 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $B551 PUSH HL       ; }
 $B552 LD BC,$0012   ; #REGbc=#N($0012,$04,$04).
 $B555 PUSH HL       ; Stash #REGhl on the stack.
 $B556 POP DE        ; Restore #REGde from the stack.
 $B557 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $B559 INC DE        ; Increment #REGde by one.
 $B55A LDIR          ; LDIR.
 $B55C POP HL        ; Restore #REGhl from the stack.
 $B55D CALL $A8CC    ; Call #R$A8CC.
 $B560 POP BC        ; Restore #REGbc from the stack.
 $B561 DJNZ $B550    ; Decrease counter by one and loop back to #R$B550 until
                     ; counter is zero.
; Colour the card background:
; #SIM(start=$B563,stop=$B56E)
; #UDGTABLE(default)
;   { #SCR$01(match-card-1) }
; UDGTABLE#
 $B563 LD HL,$040A   ; Set the co-ordinates in #REGhl to #N$04/ #N$0A.
 $B566 LD BC,$1013   ; Set the block dimensions in #REGbc to #N$10/ #N$13.
 $B569 LD A,$60      ; {Call #R$B5A6 with #COLOUR$60.
 $B56B CALL $B5A6    ; }
; Colour the opponent portrait background:
; #SIM(start=$B56E,stop=$B579)
; #UDGTABLE(default)
;   { #SCR$01(match-card-2) }
; UDGTABLE#
 $B56E LD HL,$0A10   ; Set the co-ordinates in #REGhl to #N$0A/ #N$10.
 $B571 LD BC,$0706   ; Set the block dimensions in #REGbc to #N$07/ #N$06.
 $B574 LD A,$47      ; {Call #R$B5A6 with #COLOUR$47.
 $B576 CALL $B5A6    ; }
; Colour the card right-hand shadow:
; #SIM(start=$B579,stop=$B584)
; #UDGTABLE(default)
;   { #SCR$01(match-card-3) }
; UDGTABLE#
 $B579 LD HL,$051D   ; Set the co-ordinates in #REGhl to #N$05/ #N$1D.
 $B57C LD BC,$1001   ; Set the block dimensions in #REGbc to #N$10/ #N$01.
 $B57F LD A,$30      ; {Call #R$B5A6 with #COLOUR$30.
 $B581 CALL $B5A6    ; }
; Colour the card bottom shadow:
; #SIM(start=$B584,stop=$B58F)
; #UDGTABLE(default)
;   { #SCR$01(match-card-4) }
; UDGTABLE#
 $B584 LD HL,$140B   ; Set the co-ordinates in #REGhl to #N$14/ #N$0B.
 $B587 LD BC,$0113   ; Set the block dimensions in #REGbc to #N$01/ #N$13.
 $B58A LD A,$30      ; {Call #R$B5A6 with #COLOUR$30.
 $B58C CALL $B5A6    ; }
; Colour the opponent portrait bottom shadow:
; #SIM(start=$B58F,stop=$B59A)
; #UDGTABLE(default)
;   { #SCR$01(match-card-5) }
; UDGTABLE#
 $B58F LD HL,$1111   ; Set the co-ordinates in #REGhl to #N$11/ #N$11.
 $B592 LD BC,$0106   ; Set the block dimensions in #REGbc to #N$01/ #N$06.
 $B595 LD A,$20      ; {Call #R$B5A6 with #COLOUR$20.
 $B597 CALL $B5A6    ; }
; Colour the opponent portrait right-hand shadow:
; #SIM(start=$B59A,stop=$B5A5)
; #UDGTABLE(default)
;   { #SCR$01(match-card-6) }
; UDGTABLE# #POPS
 $B59A LD HL,$0B16   ; Set the co-ordinates in #REGhl to #N$0B/ #N$16.
 $B59D LD BC,$0701   ; Set the block dimensions in #REGbc to #N$07/ #N$01.
 $B5A0 LD A,$20      ; {Call #R$B5A6 with #COLOUR$20.
 $B5A2 CALL $B5A6    ; }
 $B5A5 RET           ; Return.

; Fill Attribute Block
;
; Used by the routines at #R$A15C, #R$A3A4 and #R$B548.
;
; A Attribute byte to copy
; B Height (number of rows)
; C Width (number of columns)
; H Y position
; L X position
@label=FillAttributeBlock
c$B5A6 PUSH BC       ; {Stash the height, width, X/ Y position, attribute byte and (again)
 $B5A7 PUSH HL       ; height and width on the stack.
 $B5A8 PUSH AF       ;
 $B5A9 PUSH BC       ; }
; Convert the X/ Y co-ordinates to an attribute buffer location.
 $B5AA CALL $A862    ; Call #R$A862.
 $B5AD POP BC        ; {Restore the height, width and attribute byte from the
 $B5AE POP AF        ; stack.}
 $B5AF LD B,C        ; Copy the width into #REGb as a counter.
@label=FillAttributeBlock_RowLoop
*$B5B0 LD (HL),A     ; Write the attribute byte to the attribute buffer.
 $B5B1 INC HL        ; Move the attribute buffer pointer right one position.
 $B5B2 DJNZ $B5B0    ; Decrease the width counter by one and loop back to #R$B5B0 until
                     ; this row has been coloured in.
 $B5B4 POP HL        ; Restore the original co-ordinates from the stack.
 $B5B5 INC H         ; Move down one row.
 $B5B6 POP BC        ; Restore the height and width from the stack.
 $B5B7 DJNZ $B5A6    ; Decrease the height counter by one and loop back to #R$B5A6 until
                     ; all rows have been coloured in.
 $B5B9 RET           ; Return.

; Quarter Finals
;
; Used by the routine at #R$AA0A.
@label=QuarterFinals
c$B5BA LD HL,($9B21)           ; {Copy #REGbc #N($0010,$04,$04) bytes of data
 $B5BD LD DE,$B179             ; from *#R$9B21 to *#R$B179.
 $B5C0 LD BC,$0010             ;
 $B5C3 LDIR                    ; }
 $B5C5 LD HL,($9B21)           ; {Copy #REGbc #N($0010,$04,$04) bytes of data
 $B5C8 LD DE,$B605             ; from *#R$9B21 to *#R$B605.
 $B5CB LD BC,$0010             ;
 $B5CE LDIR                    ; }
 $B5D0 CALL $B548              ; Call #R$B548.
 $B5D3 CALL $964C              ; Call #R$964C.
 $B5D6 DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
 $B5D8 DEFB $11,$04            ; PAPER: #INK(#PEEK(#PC+$01)).
 $B5DA DEFB $12,$01            ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $B5DC DEFB $16,$05,$0C        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B5DF DEFM "QUARTER  FINALS"  ; #FONT#(:(#STR(#PC,$00,$0F)))$8D75,attr=$47(quarter-finals)
 $B5EE DEFB $16,$08,$0D        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B5F1 DEFB $10,$00            ; INK: #INK(#PEEK(#PC+$01)).
 $B5F3 DEFM "YOUR OPPONENT"    ; #FONT#(:(#STR(#PC,$00,$0D)))$8D75,attr=$47(your-opponent)
 $B600 DEFB $16,$12,$0C        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B603 DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
@label=QuarterFinals_OpponentName
 $B605 DEFM "0000000000000000" ; "#STR#(#PC,$04,$10)".
 $B615 DEFB $FF                ; Terminator.
 $B616 LD HL,($9B21)           ; #REGhl=*#R$9B21.
 $B619 LD DE,$0011             ; {Move the pointer by #N($0011,$04,$04)
 $B61C ADD HL,DE               ; bytes...}
 $B61D LD C,(HL)               ; {Load the opponents portrait graphic pointer
 $B61E INC HL                  ; into #REGbc.
 $B61F LD B,(HL)               ; }
 $B620 LD ($9AAB),BC           ; Write #REGbc to *#R$9AAB.
 $B624 INC HL                  ; {Load the opponents pub scene graphic pointer
 $B625 LD C,(HL)               ; into #REGbc.
 $B626 INC HL                  ;
 $B627 LD B,(HL)               ; }
 $B628 LD ($9AAE),BC           ; Write #REGbc to *#R$9AAE.
; Draw the opponent portrait to the screen.
 $B62C LD BC,($9AAB)           ; #REGbc=*#R$9AAB.
 $B630 LD DE,$0A10             ; Set the destination co-ordinates to: #N$0A/
                               ; #N$10.
 $B633 CALL $B742              ; Call #R$B742.
 $B636 LD A,$04                ; {Write #N$04 to *#R$9AB4.
 $B638 LD ($9AB4),A            ; }
 $B63B XOR A                   ; #REGa=#N$00.
 $B63C CALL $CAEB              ; Call #R$CAEB.
 $B63F RET                     ; Return.

; Semi Finals
;
; Used by the routine at #R$AA5A.
@label=SemiFinals
c$B640 LD HL,($9B23)           ; {Copy #REGbc #N($0010,$04,$04) bytes of data
 $B643 LD DE,$B179             ; from *#R$9B23 to *#R$B179.
 $B646 LD BC,$0010             ;
 $B649 LDIR                    ; }
 $B64B LD HL,($9B23)           ; {Copy #REGbc #N($0010,$04,$04) bytes of data
 $B64E LD DE,$B687             ; from *#R$9B23 to *#R$B687.
 $B651 LD BC,$0010             ;
 $B654 LDIR                    ; }
 $B656 CALL $B548              ; Call #R$B548.
 $B659 CALL $964C              ; Call #R$964C.
 $B65C DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
 $B65E DEFB $11,$04            ; PAPER: #INK(#PEEK(#PC+$01)).
 $B660 DEFB $12,$01            ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $B662 DEFB $16,$05,$0E        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B665 DEFM "SEMI FINALS"      ; "#STR#(#PC,$04,$0B)".
 $B670 DEFB $16,$08,$0D        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B673 DEFB $10,$00            ; INK: #INK(#PEEK(#PC+$01)).
 $B675 DEFM "YOUR OPPONENT"    ; "#STR#(#PC,$04,$0D)".
 $B682 DEFB $16,$12,$0C        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B685 DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
@label=SemiFinals_OpponentName
 $B687 DEFM "0000000000000000" ; "#STR#(#PC,$04,$10)".
 $B697 DEFB $FF                ; Terminator.
 $B698 LD HL,($9B23)           ; #REGhl=*#R$9B23.
 $B69B LD DE,$0011             ; {Move the pointer by #N($0011,$04,$04)
 $B69E ADD HL,DE               ; bytes...}
 $B69F LD C,(HL)               ; {Load the opponents portrait graphic pointer
 $B6A0 INC HL                  ; into #REGbc.
 $B6A1 LD B,(HL)               ; }
 $B6A2 LD ($9AAB),BC           ; Write #REGbc to *#R$9AAB.
 $B6A6 INC HL                  ; {Load the opponents pub scene graphic pointer
 $B6A7 LD C,(HL)               ; into #REGbc.
 $B6A8 INC HL                  ;
 $B6A9 LD B,(HL)               ; }
 $B6AA LD ($9AAE),BC           ; Write #REGbc to *#R$9AAE.
; Draw the opponent portrait to the screen.
 $B6AE LD BC,($9AAB)           ; #REGbc=*#R$9AAB.
 $B6B2 LD DE,$0A10             ; Set the destination co-ordinates to: #N$0A/
                               ; #N$10.
 $B6B5 CALL $B742              ; Call #R$B742.
 $B6B8 LD A,$02                ; {Write #N$02 to *#R$9AB4.
 $B6BA LD ($9AB4),A            ; }
 $B6BD DEC A                   ; Decrease #REGa by one.
 $B6BE CALL $CAEB              ; Call #R$CAEB.
 $B6C1 RET                     ; Return.

; The Final
;
; Used by the routine at #R$AA7B.
@label=TheFinal
c$B6C2 LD HL,$B46F             ; {Copy #N($0010,$04,$04) bytes of data from
 $B6C5 LD DE,$B179             ; *#R$B46F to *#R$B179.
 $B6C8 LD BC,$0010             ;
 $B6CB LDIR                    ; }
 $B6CD LD HL,$B46F             ; {Copy #N($0010,$04,$04) bytes of data from
 $B6D0 LD DE,$B707             ; *#R$B46F to *#R$B707.
 $B6D3 LD BC,$0010             ;
 $B6D6 LDIR                    ; }
 $B6D8 CALL $B548              ; Call #R$B548.
 $B6DB CALL $964C              ; Call #R$964C.
 $B6DE DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
 $B6E0 DEFB $11,$04            ; PAPER: #INK(#PEEK(#PC+$01)).
 $B6E2 DEFB $12,$01            ; FLASH: #MAP(#PEEK(#PC+$01))(?,0:OFF,1:ON).
 $B6E4 DEFB $16,$05,$0F        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B6E7 DEFM "THE FINAL"        ; #FONT#(:(#STR(#PC,$04,$09)))$8D75,attr=$47(the-final)
 $B6F0 DEFB $16,$08,$0D        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B6F3 DEFB $10,$00            ; INK: #INK(#PEEK(#PC+$01)).
 $B6F5 DEFM "YOUR OPPONENT"    ; #FONT#(:(#STR(#PC,$04,$0D)))$8D75,attr=$47(your-opponent)
 $B702 DEFB $16,$12,$0C        ; PRINT AT: #N(#PEEK(#PC+$01)),
                               ; #N(#PEEK(#PC+$02)).
 $B705 DEFB $10,$07            ; INK: #INK(#PEEK(#PC+$01)).
@label=TheFinal_OpponentName
 $B707 DEFM "0000000000000000" ; "#STR#(#PC,$04,$10)".
 $B717 DEFB $FF                ; Terminator.
; The finals are always with Jammy Jim.
 $B718 LD HL,$B46F             ; #REGhl=#R$B46F.
 $B71B LD DE,$0011             ; {Move the pointer by #N($0011,$04,$04)
 $B71E ADD HL,DE               ; bytes...}
 $B71F LD C,(HL)               ; {Load the opponents portrait graphic pointer
 $B720 INC HL                  ; into #REGbc.
 $B721 LD B,(HL)               ; }
 $B722 LD ($9AAB),BC           ; Write #REGbc to *#R$9AAB.
 $B726 INC HL                  ; {Load the opponents pub scene graphic pointer
 $B727 LD C,(HL)               ; into #REGbc.
 $B728 INC HL                  ;
 $B729 LD B,(HL)               ; }
 $B72A LD ($9AAE),BC           ; Write #REGbc to *#R$9AAE.
; Draw the opponent portrait to the screen.
 $B72E LD BC,($9AAB)           ; #REGbc=*#R$9AAB.
 $B732 LD DE,$0A10             ; Set the destination co-ordinates to: #N$0A/
                               ; #N$10.
 $B735 CALL $B742              ; Call #R$B742.
 $B738 LD A,$01                ; {Write #N$01 to *#R$9AB4.
 $B73A LD ($9AB4),A            ; }
 $B73D INC A                   ; Increment #REGa by one.
 $B73E CALL $CAEB              ; Call #R$CAEB.
 $B741 RET                     ; Return.

; Draw Opponent Portrait
;
; Used by the routines at #R$A3A4, #R$B5BA, #R$B640 and #R$B6C2.
;
; BC Pointer to the opponent graphic
; D Destination Y position
; E Destination X position
;
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
@label=Draw_OpponentPortrait
c$B742 CALL $A8AE    ; Call #R$A8AE.
 $B745 LD D,B        ; {Copy the opponent pointer to display into #REGde.
 $B746 LD E,C        ; }
 $B747 LD B,$38      ; Set a counter in #REGb for the height of the opponent
                     ; image.
@label=Draw_OpponentPortrait_Loop
*$B749 PUSH BC       ; {Stash the height counter and destination pointer on the
 $B74A PUSH HL       ; stack.}
 $B74B EX DE,HL      ; Swap the source and destination registers.
 $B74C LDI           ; {Copy #N$06 bytes of data from the source address to the
 $B74E LDI           ; destination.
 $B750 LDI           ;
 $B752 LDI           ;
 $B754 LDI           ;
 $B756 LDI           ; }
 $B758 EX DE,HL      ; Swap the source and destination registers back again.
 $B759 POP HL        ; Restore the original screen position from the stack.
 $B75A CALL $A8CC    ; Call #R$A8CC.
 $B75D POP BC        ; Restore the height counter from the stack.
 $B75E DJNZ $B749    ; Decrease the height counter by one and loop back to #R$B749 until
                     ; the whole image has been displayed.
 $B760 RET           ; Return.

; Draw Opponent Pub Scene
;
; Used by the routine at #R$AB2E.
;
; BC Pointer to graphic data
; D Destination Y position
; E Destination X position
;
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
@label=Draw_OpponentPubScene
c$B761 CALL $A8AE    ; Call #R$A8AE.
 $B764 LD D,B        ; {Copy the opponent pointer to display into #REGde.
 $B765 LD E,C        ; }
 $B766 LD B,$18      ; Set a counter in #REGb for the height of the opponent
                     ; image.
@label=Draw_OpponentPubScene_Loop
*$B768 PUSH BC       ; {Stash the height counter and destination pointer on the
 $B769 PUSH HL       ; stack.}
 $B76A EX DE,HL      ; Swap the source and destination registers.
 $B76B LDI           ; {Copy #N$06 bytes of data from the source address to the
 $B76D LDI           ; destination.
 $B76F LDI           ; }
 $B771 EX DE,HL      ; Swap the source and destination registers back again.
 $B772 POP HL        ; Restore the original screen position from the stack.
 $B773 CALL $A8CC    ; Call #R$A8CC.
 $B776 POP BC        ; Restore the height counter from the stack.
 $B777 DJNZ $B768    ; Decrease the height counter by one and loop back to #R$B768 until
                     ; the whole image has been displayed.
 $B779 RET           ; Return.

; Copy Floating Hand To Dartboard
;
; Used by the routine at #R$9D42.
@label=CopyFloatingHandToDartboard
c$B77A LD DE,($9AC3) ; #REGde=*#R$9AC3.
 $B77E LD B,$08      ; #REGb=#N$08.
*$B780 LD A,D        ; {Jump to #R$B79C if #REGd is less than #N$00.
 $B781 CP $00        ;
 $B783 JR C,$B79C    ; }
 $B785 CP $18        ; {Jump to #R$B79C if #REGd is greater than or equal to
 $B787 JR NC,$B79C   ; #N$18.}
 $B789 PUSH BC       ; {Stash #REGbc, #REGde and #REGde on the stack.
 $B78A PUSH DE       ;
 $B78B PUSH DE       ; }
 $B78C LD A,E        ; #REGa=#REGe.
 $B78D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
; On return from #R$A8AE #REGhl will contain the screen buffer destination.
 $B78E CALL $A8AE    ; Call #R$A8AE.
 $B791 POP DE        ; Restore #REGde from the stack.
 $B792 PUSH HL       ; Stash #REGhl on the stack.
 $B793 CALL $A8BD    ; Call #R$A8BD.
 $B796 POP DE        ; Restore #REGde from the stack.
 $B797 CALL $B7A0    ; Call #R$B7A0.
 $B79A POP DE        ; {Restore #REGde and #REGbc from the stack.
 $B79B POP BC        ; }
*$B79C INC D         ; Increment #REGd by one.
 $B79D DJNZ $B780    ; Decrease counter by one and loop back to #R$B780 until
                     ; counter is zero.
 $B79F RET           ; Return.

; Routine at B7A0
;
; Used by the routine at #R$B77A.
c$B7A0 LD B,$08      ; #REGb=#N$08.
*$B7A2 EX AF,AF'     ; Exchange the shadow #REGaf register with the #REGaf
                     ; register.
 $B7A3 LD C,A        ; #REGc=#REGa.
 $B7A4 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $B7A5 PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $B7A6 PUSH HL       ;
 $B7A7 PUSH DE       ; }
 $B7A8 LD A,C        ; #REGa=#REGc.
 $B7A9 CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7AB JR Z,$B7D9    ; }
 $B7AD LDI           ; LDI.
 $B7AF INC A         ; Increment #REGa by one.
 $B7B0 CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7B2 JR Z,$B7D9    ; }
 $B7B4 LDI           ; LDI.
 $B7B6 INC A         ; Increment #REGa by one.
 $B7B7 CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7B9 JR Z,$B7D9    ; }
 $B7BB LDI           ; LDI.
 $B7BD INC A         ; Increment #REGa by one.
 $B7BE CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7C0 JR Z,$B7D9    ; }
 $B7C2 LDI           ; LDI.
 $B7C4 INC A         ; Increment #REGa by one.
 $B7C5 CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7C7 JR Z,$B7D9    ; }
 $B7C9 LDI           ; LDI.
 $B7CB INC A         ; Increment #REGa by one.
 $B7CC CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7CE JR Z,$B7D9    ; }
 $B7D0 LDI           ; LDI.
 $B7D2 INC A         ; Increment #REGa by one.
 $B7D3 CP $20        ; {Jump to #R$B7D9 if #REGa is equal to #N$20.
 $B7D5 JR Z,$B7D9    ; }
 $B7D7 LDI           ; LDI.
*$B7D9 POP DE        ; Restore #REGde from the stack.
 $B7DA INC D         ; Increment #REGd by one.
 $B7DB POP HL        ; Restore #REGhl from the stack.
 $B7DC INC H         ; Increment #REGh by one.
 $B7DD POP BC        ; Restore #REGbc from the stack.
 $B7DE DJNZ $B7A2    ; Decrease counter by one and loop back to #R$B7A2 until
                     ; counter is zero.
 $B7E0 RET           ; Return.

; Animation: Throwing Dart
;
; Used by the routine at #R$AB2E.
@label=Animation_ThrowingDart
c$B7E1 LD E,$04      ; #REGe=#N$04.
 $B7E3 CALL $A875    ; Call #R$A875.
 $B7E6 AND A         ; {Call #R$B83D if #REGa is zero.
 $B7E7 CALL Z,$B83D  ; }
; First show the playing "lining up" the shot...
 $B7EA LD B,$03      ; Set a counter in #REGb for the number of times to loop
                     ; the animation.
@label=Aiming_Loop
*$B7EC PUSH BC       ; Stash the animation loop counter on the stack.
; Frame #N$01.
 $B7ED LD DE,$C644   ; #REGde=#R$C644.
 $B7F0 CALL $B910    ; Call #R$B910.
; Frame #N$02.
 $B7F3 LD DE,$C68C   ; #REGde=#R$C68C.
 $B7F6 CALL $B910    ; Call #R$B910.
; Frame #N$03.
 $B7F9 LD DE,$C6D4   ; #REGde=#R$C6D4.
 $B7FC CALL $B910    ; Call #R$B910.
; Frame #N$02.
 $B7FF LD DE,$C68C   ; #REGde=#R$C68C.
 $B802 CALL $B910    ; Call #R$B910.
 $B805 POP BC        ; Restore the animation loop counter from the stack.
 $B806 DJNZ $B7EC    ; Decrease the animation loop counter by one and loop back to #R$B7EC
                     ; until the counter is zero.
; Show the last frame (frame #N$01 again).
 $B808 LD DE,$C644   ; #REGde=#R$C644.
 $B80B CALL $B910    ; Call #R$B910.
 $B80E LD B,$12      ; #REGb=#N$12.
 $B810 LD HL,$40F2   ; #REGhl=#N$40F2 (screen buffer location).
*$B813 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $B814 PUSH HL       ; }
 $B815 CALL $B92F    ; Call #R$B92F.
 $B818 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $B819 POP BC        ; }
 $B81A DEC L         ; Decrease #REGl by one.
 $B81B DJNZ $B813    ; Decrease counter by one and loop back to #R$B813 until
                     ; counter is zero.
 $B81D INC L         ; Increment #REGl by one.
 $B81E LD B,$03      ; #REGb=#N$03.
 $B820 LD DE,$C71C   ; #REGde=#R$C71C.
*$B823 LD A,(DE)     ; #REGa=*#REGde.
 $B824 OR (HL)       ; Set the bits from *#REGhl.
 $B825 LD (HL),A     ; Write #REGa to *#REGhl.
 $B826 INC DE        ; Increment #REGde by one.
 $B827 INC L         ; Increment #REGl by one.
 $B828 LD A,(DE)     ; #REGa=*#REGde.
 $B829 OR (HL)       ; Set the bits from *#REGhl.
 $B82A LD (HL),A     ; Write #REGa to *#REGhl.
 $B82B INC DE        ; Increment #REGde by one.
 $B82C INC H         ; Increment #REGh by one.
 $B82D LD A,(DE)     ; #REGa=*#REGde.
 $B82E OR (HL)       ; Set the bits from *#REGhl.
 $B82F LD (HL),A     ; Write #REGa to *#REGhl.
 $B830 INC DE        ; Increment #REGde by one.
 $B831 DEC L         ; Decrease #REGl by one.
 $B832 LD A,(DE)     ; #REGa=*#REGde.
 $B833 OR (HL)       ; Set the bits from *#REGhl.
 $B834 LD (HL),A     ; Write #REGa to *#REGhl.
 $B835 INC H         ; Increment #REGh by one.
 $B836 INC DE        ; Increment #REGde by one.
 $B837 DJNZ $B823    ; Decrease counter by one and loop back to #R$B823 until
                     ; counter is zero.
 $B839 CALL $A8EA    ; Call #R$A8EA.
 $B83C RET           ; Return.

; Animation: Bar Maid
;
; Used by the routine at #R$B7E1.
;
; .
;
; Plays through frames; #N$01#RAW(,) #N$02#RAW(,) #N$03#RAW(,)
; #N$03#RAW(,) #N$02#RAW(,) #N$01.
; .
; #PUSHS #SIM(start=$AB2E,stop=$AB39)
; #FOR$B8F5,$B8F8||n|#POKESn,$00||#FOR$B974,$B976||n|#POKESn,$00||
; #FOR$00,$05||x|
;   #SIM(start=($B83D+(x*$06)),stop=($B843+(x*$06)))#SCR$02(*bar-maid-x)
; ||
; #SIM(start=$B861,stop=$B866)
; #FOR$06,$10||x|#SIM(start=$B866,stop=$B86E)#SCR$02(*bar-maid-x)||
; #UDGTABLE { #UDGARRAY#(#ANIMATE$10,$10(bar-maid)) } UDGTABLE# #POPS
@label=Animation_BarMaid
c$B83D LD DE,$C724   ; {Call #R$B8F5 with #REGde=#R$C724.
 $B840 CALL $B8F5    ; }
 $B843 LD DE,$C784   ; {Call #R$B8F5 with #REGde=#R$C784.
 $B846 CALL $B8F5    ; }
 $B849 LD DE,$C7E4   ; {Call #R$B8F5 with #REGde=#R$C7E4.
 $B84C CALL $B8F5    ; }
 $B84F LD DE,$C7E4   ; {Call #R$B8F5 with #REGde=#R$C7E4.
 $B852 CALL $B8F5    ; }
 $B855 LD DE,$C784   ; {Call #R$B8F5 with #REGde=#R$C784.
 $B858 CALL $B8F5    ; }
 $B85B LD DE,$C724   ; {Call #R$B8F5 with #REGde=#R$C724.
 $B85E CALL $B8F5    ; }
 $B861 LD B,$0A      ; Set a counter in #REGb for the number of times to move the pint
                     ; graphic across the screen (#N$0A times).
 $B863 LD HL,$4810   ; Set the initial screen buffer location in #REGhl of where the pint
                     ; will first appear.
@label=Pint_Loop
*$B866 PUSH BC       ; {Stash the movement counter and screen buffer pointer on
 $B867 PUSH HL       ; the stack.}
 $B868 CALL $B965    ; Call #R$B965.
 $B86B POP HL        ; {Restore the screen buffer pointer and movement counter
 $B86C POP BC        ; from the stack.}
 $B86D DEC L         ; Move the pint graphic left by one character block.
 $B86E DJNZ $B866    ; Decrease the movement counter by one and loop back to #R$B866 until
                     ; the pint is at its destination position.
 $B870 RET           ; Return.

; Animation: Dog
;
; Used by the routine at #R$AB2E.
;
; .
;
; Self-modifying code:
@label=Animation_Dog
c$B871 LD A,$ED      ; {#HTML(Writes an extra <code>LDI</code> to #R$B8EA.)
 $B873 LD ($B8EA),A  ;
 $B876 LD A,$A0      ;
 $B878 LD ($B8EB),A  ; }
 $B87B LD B,$07      ; #REGb=#N$07.
 $B87D LD HL,$48B0   ; #REGhl=#N$48B0 (screen buffer location).
*$B880 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $B881 PUSH HL       ; }
 $B882 LD DE,$C8BC   ; #REGde=#R$C8BC.
 $B885 CALL $B8D9    ; Call #R$B8D9.
 $B888 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $B889 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $B88A POP HL        ; Restore #REGhl from the stack.
 $B88B PUSH HL       ; Stash #REGhl on the stack.
 $B88C LD DE,$C844   ; #REGde=#R$C844.
 $B88F CALL $B8D9    ; Call #R$B8D9.
 $B892 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $B893 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $B894 POP HL        ; Restore #REGhl from the stack.
 $B895 DEC L         ; Decrease #REGl by one.
 $B896 POP BC        ; Restore #REGbc from the stack.
 $B897 DJNZ $B880    ; Decrease counter by one and loop back to #R$B880 until
                     ; counter is zero.
 $B899 INC L         ; {Increment #REGl by four.
 $B89A INC L         ;
 $B89B INC L         ;
 $B89C INC L         ; }
 $B89D LD DE,$CA64   ; #REGde=#R$CA64.
 $B8A0 LD B,$18      ; #REGb=#N$18.
*$B8A2 LD A,(DE)     ; #REGa=*#REGde.
 $B8A3 LD (HL),A     ; Write #REGa to *#REGhl.
 $B8A4 INC DE        ; Increment #REGde by one.
 $B8A5 CALL $A8CC    ; Call #R$A8CC.
 $B8A8 DJNZ $B8A2    ; Decrease counter by one and loop back to #R$B8A2 until
                     ; counter is zero.
; Self-modifying code.
 $B8AA XOR A         ; {#HTML(Writes <code>NOP NOP</code> to remove the extra
 $B8AB LD ($B8EA),A  ; <code>LDI</code> command.)
 $B8AE LD ($B8EB),A  ; }
 $B8B1 LD DE,$C934   ; {Call #R$B8D6 with #REGde=#R$C934.
 $B8B4 CALL $B8D6    ; }
 $B8B7 LD DE,$C994   ; {Call #R$B8D6 with #REGde=#R$C994.
 $B8BA CALL $B8D6    ; }
 $B8BD LD DE,$C9F4   ; {Call #R$B8D6 with #REGde=#R$C9F4.
 $B8C0 CALL $B8D6    ; }
 $B8C3 LD DE,$C9F4   ; {Call #R$B8D6 with #REGde=#R$C9F4.
 $B8C6 CALL $B8D6    ; }
 $B8C9 LD DE,$C994   ; {Call #R$B8D6 with #REGde=#R$C994.
 $B8CC CALL $B8D6    ; }
 $B8CF LD DE,$C934   ; {Call #R$B8D6 with #REGde=#R$C934.
 $B8D2 CALL $B8D6    ; }
 $B8D5 RET           ; Return.

; Print Dog Frame
;
; Used by the routine at #R$B871.
@label=Print_Dog_Frame
c$B8D6 LD HL,$48A9   ; Set the target screen buffer location in #REGhl.
; This entry point is used by the routines at #R$AB2E and #R$B871.
*$B8D9 HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $B8DA HALT          ; four times.
 $B8DB HALT          ;
 $B8DC HALT          ; }
 $B8DD LD B,$18      ; Set a counter in #REGb of #N$18 for the height of the
                     ; graphic.
@label=Print_Dog_Frame_Loop
*$B8DF PUSH BC       ; {Stash the height counter and screen buffer location on
 $B8E0 PUSH HL       ; the stack.}
 $B8E1 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B8E2 LDI           ; {Copy #N$04 bytes of data from the graphic to the screen
 $B8E4 LDI           ; buffer.
 $B8E6 LDI           ;
 $B8E8 LDI           ; }
; Self-modifying code. See; #R$AB2E and #R$B871.
 $B8EA NOP           ; No operation.
 $B8EB NOP           ; No operation.
 $B8EC EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B8ED POP HL        ; Restore the screen buffer location from the stack.
 $B8EE CALL $A8CC    ; Call #R$A8CC.
 $B8F1 POP BC        ; Restore the height counter from the stack.
 $B8F2 DJNZ $B8DF    ; Decrease the height counter by one and loop back to #R$B8DF until
                     ; the frame has been displayed in full.
 $B8F4 RET           ; Return.

; Print Bar Maid Frame
;
; Used by the routine at #R$B83D.
@label=Print_BarMaid_Frame
c$B8F5 HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $B8F6 HALT          ; four times.
 $B8F7 HALT          ;
 $B8F8 HALT          ; }
 $B8F9 LD B,$20      ; Set a counter in #REGb of #N$20 for the height of the
                     ; graphic.
 $B8FB LD HL,$40AE   ; Set the target screen buffer location in #REGhl.
@label=Print_BarMaid_Frame_Loop
*$B8FE PUSH BC       ; {Stash the height counter and screen buffer location on
 $B8FF PUSH HL       ; the stack.}
 $B900 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B901 LDI           ; {Copy #N$03 bytes of data from the graphic to the screen
 $B903 LDI           ; buffer.
 $B905 LDI           ; }
 $B907 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B908 POP HL        ; Restore the screen buffer location from the stack.
 $B909 CALL $A8CC    ; Call #R$A8CC.
 $B90C POP BC        ; Restore the height counter from the stack.
 $B90D DJNZ $B8FE    ; Decrease the height counter by one and loop back to #R$B8FE until
                     ; the frame has been displayed in full.
 $B90F RET           ; Return.

; Print Throwing Dart Frame
;
; Used by the routine at #R$B7E1.
@label=Print_ThrowingDart_Frame
c$B910 HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $B911 HALT          ; eight times.
 $B912 HALT          ;
 $B913 HALT          ;
 $B914 HALT          ;
 $B915 HALT          ;
 $B916 HALT          ;
 $B917 HALT          ; }
 $B918 LD B,$18      ; Set a counter in #REGb of #N$18 for the height of the
                     ; graphic.
 $B91A LD HL,$40F3   ; Set the target screen buffer location in #REGhl.
@label=Print_ThrowingDart_Frame_Loop
*$B91D PUSH BC       ; {Stash the height counter and screen buffer location on
 $B91E PUSH HL       ; the stack.}
 $B91F EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B920 LDI           ; {Copy #N$03 bytes of data from the graphic to the screen
 $B922 LDI           ; buffer.
 $B924 LDI           ; }
 $B926 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $B927 POP HL        ; Restore the screen buffer location from the stack.
 $B928 CALL $A8CC    ; Call #R$A8CC.
 $B92B POP BC        ; Restore the height counter from the stack.
 $B92C DJNZ $B91D    ; Decrease the height counter by one and loop back to #R$B91D until
                     ; the frame has been displayed in full.
 $B92E RET           ; Return.

; Animation: Dart
;
; Used by the routine at #R$B7E1.
@label=Animation_Dart
c$B92F LD B,$02      ; #REGb=#N$02.
 $B931 LD DE,$C71C   ; #REGde=#R$C71C.
*$B934 LD A,(HL)     ; #REGa=*#REGhl.
 $B935 PUSH AF       ; Stash #REGaf on the stack.
 $B936 LD A,(DE)     ; #REGa=*#REGde.
 $B937 OR (HL)       ; Set the bits from *#REGhl.
 $B938 LD (HL),A     ; Write #REGa to *#REGhl.
 $B939 INC DE        ; Increment #REGde by one.
 $B93A INC L         ; Increment #REGl by one.
 $B93B LD A,(HL)     ; #REGa=*#REGhl.
 $B93C PUSH AF       ; Stash #REGaf on the stack.
 $B93D LD A,(DE)     ; #REGa=*#REGde.
 $B93E OR (HL)       ; Set the bits from *#REGhl.
 $B93F LD (HL),A     ; Write #REGa to *#REGhl.
 $B940 INC H         ; Increment #REGh by one.
 $B941 INC DE        ; Increment #REGde by one.
 $B942 LD A,(HL)     ; #REGa=*#REGhl.
 $B943 PUSH AF       ; Stash #REGaf on the stack.
 $B944 LD A,(DE)     ; #REGa=*#REGde.
 $B945 OR (HL)       ; Set the bits from *#REGhl.
 $B946 LD (HL),A     ; Write #REGa to *#REGhl.
 $B947 INC DE        ; Increment #REGde by one.
 $B948 DEC L         ; Decrease #REGl by one.
 $B949 LD A,(HL)     ; #REGa=*#REGhl.
 $B94A PUSH AF       ; Stash #REGaf on the stack.
 $B94B LD A,(DE)     ; #REGa=*#REGde.
 $B94C OR (HL)       ; Set the bits from *#REGhl.
 $B94D LD (HL),A     ; Write #REGa to *#REGhl.
 $B94E INC DE        ; Increment #REGde by one.
 $B94F INC H         ; Increment #REGh by one.
 $B950 DJNZ $B934    ; Decrease counter by one and loop back to #R$B934 until
                     ; counter is zero.
 $B952 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $B953 DEC H         ; Decrease #REGh by one.
 $B954 LD B,$02      ; #REGb=#N$02.
*$B956 POP AF        ; Restore #REGaf from the stack.
 $B957 LD (HL),A     ; Write #REGa to *#REGhl.
 $B958 INC L         ; Increment #REGl by one.
 $B959 POP AF        ; Restore #REGaf from the stack.
 $B95A LD (HL),A     ; Write #REGa to *#REGhl.
 $B95B DEC H         ; Decrease #REGh by one.
 $B95C POP AF        ; Restore #REGaf from the stack.
 $B95D LD (HL),A     ; Write #REGa to *#REGhl.
 $B95E DEC L         ; Decrease #REGl by one.
 $B95F POP AF        ; Restore #REGaf from the stack.
 $B960 LD (HL),A     ; Write #REGa to *#REGhl.
 $B961 DEC H         ; Decrease #REGh by one.
 $B962 DJNZ $B956    ; Decrease counter by one and loop back to #R$B956 until
                     ; counter is zero.
 $B964 RET           ; Return.

; Print Pint Frame
;
; Used by the routine at #R$B83D.
;
; HL Screen buffer address for drawing
;
; Draws the pint glass to the screen at the location provided by #REGhl.
; #PUSHS #SIM(start=$AB2E,stop=$AB39)
; #SIM(start=$B965,stop=$B974,hl=$4810)
; #UDGTABLE { #SCR$02{$C0,$40,$80,$70}(pint-frame) } UDGTABLE#
@label=Print_Pint_Frame
c$B965 LD B,$10      ; Set a counter in #REGb for the height of the graphic
                     ; (#N$10).
 $B967 LD DE,$CA54   ; #REGde=#R$CA54.
@label=Print_Pint_Frame_Loop
*$B96A LD A,(HL)     ; {Fetch the current byte in the screen buffer and stash it on the
 $B96B PUSH AF       ; stack.}
 $B96C LD A,(DE)     ; {Fetch a byte from the graphic pointer in *#REGde and write it to
 $B96D LD (HL),A     ; the screen buffer pointer held by *#REGhl.}
 $B96E CALL $A8CC    ; Call #R$A8CC.
 $B971 INC DE        ; Increment the graphic pointer by one.
 $B972 DJNZ $B96A    ; Decrease the height counter by one and loop back to #R$B96A until
                     ; the whole of the graphic has been drawn to the screen.
; Make sure the player sees the drawn pint before removing it.
 $B974 HALT          ; {Halt operation (suspend CPU until the next interrupt)
 $B975 HALT          ; three times.
 $B976 HALT          ; }
; Next all the stashed bytes are returned to the screen, ready for the
; next frame of the animation.
 $B977 CALL $A8DB    ; Call #R$A8DB.
 $B97A LD B,$10      ; Set a counter in #REGb for the height of the graphic
                     ; (#N$10).
@label=Restore_Background_Loop
*$B97C POP AF        ; {Restore the stashed byte from the stack and write it to the screen
 $B97D LD (HL),A     ; buffer pointer held by *#REGhl.}
 $B97E CALL $A8DB    ; Call #R$A8DB.
 $B981 DJNZ $B97C    ; Decrease the height counter by one and loop back to #R$B97C until
                     ; all the stashed bytes have been drawn back to the screen.
 $B983 RET           ; Return.

; Graphics: Jammy Jim
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($B984-$BACE-$01-$30)(jammy-jim) }
; UDGTABLE#
@label=Graphics_JammyJim
b$B984 DEFB $00,$00,$00,$00,$00,$00
 $B98A DEFB $00,$00,$00,$00,$00,$00
 $B990 DEFB $00,$00,$00,$00,$00,$00
 $B996 DEFB $00,$00,$00,$00,$00,$00
 $B99C DEFB $00,$00,$00,$00,$00,$00
 $B9A2 DEFB $00,$00,$00,$00,$00,$00
 $B9A8 DEFB $00,$00,$00,$00,$00,$00
 $B9AE DEFB $00,$01,$F8,$00,$00,$00
 $B9B4 DEFB $00,$02,$07,$F0,$00,$00
 $B9BA DEFB $00,$05,$F8,$38,$00,$00
 $B9C0 DEFB $00,$0B,$FB,$CC,$00,$00
 $B9C6 DEFB $00,$0B,$F7,$D3,$00,$00
 $B9CC DEFB $00,$17,$EF,$DC,$80,$00
 $B9D2 DEFB $00,$17,$DF,$EF,$40,$00
 $B9D8 DEFB $00,$17,$DF,$EF,$40,$00
 $B9DE DEFB $00,$17,$DF,$EF,$40,$00
 $B9E4 DEFB $00,$08,$5F,$DF,$40,$00
 $B9EA DEFB $00,$07,$83,$DF,$40,$00
 $B9F0 DEFB $00,$00,$7C,$3F,$A0,$00
 $B9F6 DEFB $00,$02,$13,$CF,$50,$00
 $B9FC DEFB $00,$07,$38,$33,$68,$00
 $BA02 DEFB $00,$0F,$FD,$CC,$F4,$00
 $BA08 DEFB $00,$0F,$FD,$F3,$3A,$00
 $BA0E DEFB $00,$09,$CD,$FC,$FD,$00
 $BA14 DEFB $00,$09,$CD,$CD,$BD,$00
 $BA1A DEFB $00,$08,$C5,$B6,$DD,$00
 $BA20 DEFB $00,$07,$BB,$F6,$AD,$00
 $BA26 DEFB $00,$E6,$C7,$F5,$12,$00
 $BA2C DEFB $01,$19,$FF,$F5,$0C,$00
 $BA32 DEFB $02,$E7,$FF,$EA,$00,$00
 $BA38 DEFB $05,$FF,$FF,$EA,$00,$00
 $BA3E DEFB $05,$FF,$7F,$DA,$00,$00
 $BA44 DEFB $05,$FF,$BF,$DA,$00,$00
 $BA4A DEFB $05,$F3,$BF,$5A,$00,$00
 $BA50 DEFB $02,$ED,$7F,$AA,$00,$00
 $BA56 DEFB $01,$1E,$FF,$CA,$00,$00
 $BA5C DEFB $00,$EF,$FF,$EA,$00,$00
 $BA62 DEFB $00,$17,$FF,$EA,$00,$00
 $BA68 DEFB $00,$17,$F3,$D2,$00,$00
 $BA6E DEFB $00,$2F,$CD,$CA,$00,$00
 $BA74 DEFB $00,$2F,$3F,$AA,$00,$00
 $BA7A DEFB $00,$10,$FF,$5A,$00,$00
 $BA80 DEFB $00,$17,$FE,$BA,$00,$00
 $BA86 DEFB $00,$0B,$FD,$7A,$00,$00
 $BA8C DEFB $00,$0B,$FA,$BA,$00,$00
 $BA92 DEFB $00,$0B,$F4,$BD,$00,$00
 $BA98 DEFB $00,$17,$E8,$5D,$00,$00
 $BA9E DEFB $00,$17,$D0,$5D,$00,$00
 $BAA4 DEFB $00,$17,$A0,$5D,$00,$00
 $BAAA DEFB $00,$08,$40,$BD,$00,$00
 $BAB0 DEFB $00,$07,$80,$BD,$00,$00
 $BAB6 DEFB $00,$00,$00,$00,$00,$00
 $BABC DEFB $00,$00,$00,$00,$00,$00
 $BAC2 DEFB $00,$00,$00,$00,$00,$00
 $BAC8 DEFB $00,$00,$00,$00,$00,$00
 $BACE DEFB $00,$00,$00,$00,$00,$00

; Graphics: Beer Belly Bill
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($BAD4-$BC1E-$01-$30)(beer-belly-bill) }
; UDGTABLE#
@label=Graphics_BeerBellyBill
b$BAD4 DEFB $00,$00,$00,$00,$00,$00
 $BADA DEFB $00,$00,$00,$00,$00,$00
 $BAE0 DEFB $00,$00,$00,$00,$00,$00
 $BAE6 DEFB $00,$00,$00,$00,$00,$00
 $BAEC DEFB $00,$00,$00,$00,$00,$00
 $BAF2 DEFB $00,$00,$00,$00,$00,$00
 $BAF8 DEFB $00,$00,$00,$00,$00,$00
 $BAFE DEFB $00,$00,$00,$00,$00,$00
 $BB04 DEFB $00,$00,$00,$00,$00,$00
 $BB0A DEFB $00,$00,$01,$E0,$00,$00
 $BB10 DEFB $00,$00,$3E,$1C,$00,$00
 $BB16 DEFB $00,$00,$40,$03,$00,$00
 $BB1C DEFB $00,$00,$80,$00,$C0,$00
 $BB22 DEFB $00,$01,$02,$00,$30,$00
 $BB28 DEFB $00,$00,$06,$00,$08,$00
 $BB2E DEFB $00,$01,$1F,$00,$04,$00
 $BB34 DEFB $00,$02,$FF,$C0,$02,$00
 $BB3A DEFB $00,$05,$FF,$E0,$02,$00
 $BB40 DEFB $00,$0B,$BF,$78,$01,$00
 $BB46 DEFB $00,$0B,$5E,$B8,$01,$00
 $BB4C DEFB $00,$0B,$2D,$BC,$01,$00
 $BB52 DEFB $00,$17,$2C,$BF,$00,$80
 $BB58 DEFB $00,$17,$94,$BF,$00,$80
 $BB5E DEFB $00,$17,$FE,$3F,$00,$80
 $BB64 DEFB $00,$17,$CF,$FC,$00,$80
 $BB6A DEFB $00,$17,$BF,$FF,$10,$80
 $BB70 DEFB $00,$17,$BB,$FF,$B8,$80
 $BB76 DEFB $00,$17,$C7,$FF,$B8,$80
 $BB7C DEFB $00,$16,$FF,$FF,$90,$80
 $BB82 DEFB $00,$15,$FF,$FF,$A0,$80
 $BB88 DEFB $00,$0A,$3F,$FF,$B0,$80
 $BB8E DEFB $00,$09,$03,$FF,$B5,$00
 $BB94 DEFB $00,$0B,$C0,$7F,$6A,$00
 $BB9A DEFB $00,$0B,$FF,$FE,$E8,$00
 $BBA0 DEFB $00,$17,$FF,$F9,$E8,$00
 $BBA6 DEFB $00,$17,$FE,$FD,$D0,$00
 $BBAC DEFB $00,$0B,$FE,$FE,$D0,$00
 $BBB2 DEFB $00,$0B,$BC,$FE,$D0,$00
 $BBB8 DEFB $00,$05,$39,$FD,$D0,$00
 $BBBE DEFB $00,$0A,$73,$F9,$D8,$00
 $BBC4 DEFB $00,$0B,$07,$F3,$E8,$00
 $BBCA DEFB $00,$05,$FF,$E7,$E8,$00
 $BBD0 DEFB $00,$05,$FF,$CF,$E8,$00
 $BBD6 DEFB $00,$02,$FF,$9F,$E8,$00
 $BBDC DEFB $00,$01,$3F,$3F,$E8,$00
 $BBE2 DEFB $00,$00,$C0,$7F,$E8,$00
 $BBE8 DEFB $00,$00,$2F,$FF,$D6,$00
 $BBEE DEFB $00,$00,$EF,$FF,$B1,$00
 $BBF4 DEFB $00,$01,$0F,$FF,$6E,$80
 $BBFA DEFB $00,$02,$F3,$FE,$DF,$40
 $BC00 DEFB $00,$05,$FC,$F9,$BF,$A0
 $BC06 DEFB $00,$00,$00,$00,$00,$00
 $BC0C DEFB $00,$00,$00,$00,$00,$00
 $BC12 DEFB $00,$00,$00,$00,$00,$00
 $BC18 DEFB $00,$00,$00,$00,$00,$00
 $BC1E DEFB $00,$00,$00,$00,$00,$00

; Graphics: Del Boy Desmond
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($BC24-$BD6E-$01-$30)(del-boy-desmond) }
; UDGTABLE#
@label=Graphics_DelBoyDesmond
b$BC24 DEFB $00,$00,$00,$00,$00,$00
 $BC2A DEFB $00,$00,$00,$00,$00,$00
 $BC30 DEFB $00,$00,$00,$00,$00,$00
 $BC36 DEFB $00,$00,$00,$00,$00,$00
 $BC3C DEFB $00,$00,$00,$00,$00,$00
 $BC42 DEFB $00,$00,$00,$00,$00,$00
 $BC48 DEFB $00,$00,$00,$00,$00,$00
 $BC4E DEFB $00,$00,$80,$80,$00,$00
 $BC54 DEFB $00,$01,$41,$40,$40,$00
 $BC5A DEFB $00,$1A,$22,$20,$A0,$00
 $BC60 DEFB $00,$26,$14,$21,$20,$00
 $BC66 DEFB $00,$22,$08,$12,$20,$00
 $BC6C DEFB $00,$20,$00,$14,$20,$00
 $BC72 DEFB $00,$10,$00,$08,$40,$00
 $BC78 DEFB $00,$10,$00,$00,$40,$00
 $BC7E DEFB $00,$10,$0E,$00,$40,$00
 $BC84 DEFB $00,$0A,$F3,$80,$80,$00
 $BC8A DEFB $00,$0B,$2D,$E0,$80,$00
 $BC90 DEFB $00,$02,$5E,$E0,$40,$00
 $BC96 DEFB $00,$05,$DE,$F0,$30,$00
 $BC9C DEFB $00,$05,$DE,$FC,$0C,$00
 $BCA2 DEFB $00,$04,$CE,$FC,$02,$00
 $BCA8 DEFB $00,$04,$46,$FA,$01,$00
 $BCAE DEFB $00,$02,$21,$FE,$02,$00
 $BCB4 DEFB $00,$01,$FF,$FE,$02,$00
 $BCBA DEFB $00,$00,$FF,$FE,$04,$00
 $BCC0 DEFB $00,$01,$1F,$FE,$08,$00
 $BCC6 DEFB $00,$02,$EF,$FE,$10,$00
 $BCCC DEFB $00,$06,$FF,$FD,$08,$00
 $BCD2 DEFB $00,$0A,$CF,$FD,$04,$00
 $BCD8 DEFB $00,$37,$3F,$FB,$02,$00
 $BCDE DEFB $00,$4F,$FF,$FA,$01,$00
 $BCE4 DEFB $00,$B5,$5F,$B6,$00,$80
 $BCEA DEFB $01,$7F,$F7,$D4,$01,$00
 $BCF0 DEFB $00,$AA,$BE,$EC,$0E,$00
 $BCF6 DEFB $00,$FF,$EB,$FA,$30,$00
 $BCFC DEFB $02,$55,$7F,$7F,$C0,$00
 $BD02 DEFB $02,$7F,$E3,$EA,$00,$00
 $BD08 DEFB $03,$07,$02,$B2,$00,$00
 $BD0E DEFB $03,$C0,$1D,$D4,$00,$00
 $BD14 DEFB $01,$B8,$3F,$54,$00,$00
 $BD1A DEFB $01,$BF,$AA,$AA,$00,$00
 $BD20 DEFB $01,$B9,$7F,$52,$00,$00
 $BD26 DEFB $00,$39,$54,$B2,$00,$00
 $BD2C DEFB $00,$01,$7E,$BA,$00,$00
 $BD32 DEFB $00,$02,$A9,$BA,$00,$00
 $BD38 DEFB $00,$05,$FD,$BA,$00,$00
 $BD3E DEFB $00,$05,$52,$9D,$00,$00
 $BD44 DEFB $00,$05,$CC,$5D,$00,$00
 $BD4A DEFB $00,$02,$30,$5D,$00,$00
 $BD50 DEFB $00,$01,$C0,$2D,$00,$00
 $BD56 DEFB $00,$00,$00,$00,$00,$00
 $BD5C DEFB $00,$00,$00,$00,$00,$00
 $BD62 DEFB $00,$00,$00,$00,$00,$00
 $BD68 DEFB $00,$00,$00,$00,$00,$00
 $BD6E DEFB $00,$00,$00,$00,$00,$00

; Graphics: Mega Mick
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($BD74-$BEBE-$01-$30)(mega-mick) }
; UDGTABLE#
@label=Graphics_MegaMick
b$BD74 DEFB $00,$00,$00,$00,$00,$00
 $BD7A DEFB $00,$00,$00,$00,$00,$00
 $BD80 DEFB $00,$00,$00,$00,$00,$00
 $BD86 DEFB $00,$00,$00,$00,$00,$00
 $BD8C DEFB $00,$00,$00,$00,$00,$00
 $BD92 DEFB $00,$00,$00,$00,$00,$00
 $BD98 DEFB $00,$00,$00,$00,$00,$00
 $BD9E DEFB $00,$00,$01,$FC,$00,$00
 $BDA4 DEFB $00,$00,$0E,$03,$80,$00
 $BDAA DEFB $00,$00,$31,$FC,$40,$00
 $BDB0 DEFB $00,$00,$4F,$FF,$A0,$00
 $BDB6 DEFB $00,$00,$BF,$FF,$C0,$00
 $BDBC DEFB $00,$01,$7F,$FF,$E8,$00
 $BDC2 DEFB $00,$01,$7F,$FF,$E8,$00
 $BDC8 DEFB $00,$02,$FF,$FF,$F4,$00
 $BDCE DEFB $00,$02,$FF,$FF,$F4,$00
 $BDD4 DEFB $00,$02,$FF,$FF,$FA,$00
 $BDDA DEFB $00,$01,$1F,$FF,$FB,$00
 $BDE0 DEFB $00,$00,$EF,$F8,$F6,$80
 $BDE6 DEFB $00,$02,$97,$F7,$7C,$40
 $BDEC DEFB $00,$02,$94,$E8,$B0,$40
 $BDF2 DEFB $00,$02,$B3,$2A,$A0,$40
 $BDF8 DEFB $00,$02,$97,$CB,$A0,$40
 $BDFE DEFB $00,$02,$95,$E8,$A0,$80
 $BE04 DEFB $00,$01,$0D,$E9,$A0,$80
 $BE0A DEFB $00,$02,$FD,$F7,$50,$80
 $BE10 DEFB $00,$05,$F3,$F8,$A8,$80
 $BE16 DEFB $00,$05,$EF,$FF,$AD,$00
 $BE1C DEFB $00,$05,$DF,$7E,$AA,$00
 $BE22 DEFB $00,$02,$BF,$BF,$50,$00
 $BE28 DEFB $00,$01,$7F,$7F,$50,$00
 $BE2E DEFB $00,$02,$FC,$FF,$50,$00
 $BE34 DEFB $00,$05,$E3,$FF,$50,$00
 $BE3A DEFB $00,$02,$17,$FF,$50,$00
 $BE40 DEFB $00,$01,$77,$FE,$D0,$00
 $BE46 DEFB $00,$01,$77,$FD,$A0,$00
 $BE4C DEFB $00,$01,$49,$FB,$A0,$00
 $BE52 DEFB $00,$01,$36,$F7,$A0,$00
 $BE58 DEFB $00,$01,$2B,$6B,$A0,$00
 $BE5E DEFB $00,$01,$48,$AB,$A0,$00
 $BE64 DEFB $00,$00,$AB,$D3,$A0,$00
 $BE6A DEFB $00,$00,$AB,$D3,$D0,$00
 $BE70 DEFB $00,$00,$BF,$A3,$D0,$00
 $BE76 DEFB $00,$00,$BF,$A3,$D0,$00
 $BE7C DEFB $00,$00,$BF,$4B,$D0,$00
 $BE82 DEFB $00,$00,$BF,$47,$E8,$00
 $BE88 DEFB $00,$00,$BE,$8F,$EC,$00
 $BE8E DEFB $00,$00,$BD,$07,$D0,$00
 $BE94 DEFB $00,$00,$42,$08,$0C,$00
 $BE9A DEFB $00,$00,$3C,$00,$00,$00
 $BEA0 DEFB $00,$00,$00,$00,$00,$00
 $BEA6 DEFB $00,$00,$00,$00,$00,$00
 $BEAC DEFB $00,$00,$00,$00,$00,$00
 $BEB2 DEFB $00,$00,$00,$00,$00,$00
 $BEB8 DEFB $00,$00,$00,$00,$00,$00
 $BEBE DEFB $00,$00,$00,$00,$00,$00

; Graphics: Devious Dave
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($BEC4-$C00E-$01-$30)(devious-dave) }
; UDGTABLE#
@label=Graphics_DeviousDave
b$BEC4 DEFB $00,$00,$00,$00,$00,$00
 $BECA DEFB $00,$00,$00,$00,$00,$00
 $BED0 DEFB $00,$00,$00,$00,$00,$00
 $BED6 DEFB $00,$00,$00,$00,$00,$00
 $BEDC DEFB $00,$00,$00,$00,$00,$00
 $BEE2 DEFB $00,$00,$00,$00,$00,$00
 $BEE8 DEFB $00,$00,$00,$00,$00,$00
 $BEEE DEFB $00,$00,$00,$00,$00,$00
 $BEF4 DEFB $00,$00,$00,$00,$00,$00
 $BEFA DEFB $00,$7F,$80,$00,$7C,$00
 $BF00 DEFB $00,$80,$7E,$07,$82,$00
 $BF06 DEFB $01,$7F,$81,$F8,$7D,$00
 $BF0C DEFB $02,$FF,$FE,$07,$FD,$00
 $BF12 DEFB $01,$7F,$FF,$FF,$FD,$00
 $BF18 DEFB $03,$BF,$FF,$FF,$FD,$00
 $BF1E DEFB $04,$DF,$FF,$FF,$C3,$00
 $BF24 DEFB $0B,$07,$E0,$00,$3E,$00
 $BF2A DEFB $06,$D8,$1D,$80,$01,$00
 $BF30 DEFB $01,$07,$F8,$40,$01,$00
 $BF36 DEFB $00,$8D,$F4,$C0,$00,$80
 $BF3C DEFB $00,$79,$FB,$90,$00,$80
 $BF42 DEFB $00,$83,$FC,$30,$00,$80
 $BF48 DEFB $00,$BE,$FF,$F8,$38,$80
 $BF4E DEFB $01,$7E,$FF,$F0,$45,$00
 $BF54 DEFB $01,$7E,$FF,$F0,$7A,$00
 $BF5A DEFB $01,$7E,$FF,$E0,$7A,$00
 $BF60 DEFB $00,$BD,$FF,$C0,$FA,$00
 $BF66 DEFB $00,$BD,$EF,$80,$F4,$00
 $BF6C DEFB $00,$5B,$F7,$C1,$F4,$00
 $BF72 DEFB $00,$5B,$F7,$FF,$F4,$00
 $BF78 DEFB $00,$37,$CB,$FF,$E8,$00
 $BF7E DEFB $00,$17,$3B,$FF,$E8,$00
 $BF84 DEFB $00,$2E,$FC,$7F,$E8,$00
 $BF8A DEFB $00,$5D,$FF,$9E,$D0,$00
 $BF90 DEFB $00,$5B,$FF,$EF,$20,$00
 $BF96 DEFB $00,$27,$FF,$EF,$C0,$00
 $BF9C DEFB $00,$5F,$FF,$0F,$D0,$00
 $BFA2 DEFB $00,$24,$00,$6F,$D0,$00
 $BFA8 DEFB $00,$1A,$DB,$6F,$D0,$00
 $BFAE DEFB $00,$0A,$DB,$6F,$A0,$00
 $BFB4 DEFB $00,$14,$01,$6F,$A0,$00
 $BFBA DEFB $00,$17,$FE,$0A,$A0,$00
 $BFC0 DEFB $00,$17,$FF,$FD,$A0,$00
 $BFC6 DEFB $00,$2F,$FF,$D3,$A0,$00
 $BFCC DEFB $00,$5F,$FF,$CF,$A0,$00
 $BFD2 DEFB $00,$5F,$FE,$3F,$A0,$00
 $BFD8 DEFB $00,$2F,$F9,$FF,$A0,$00
 $BFDE DEFB $00,$2F,$F5,$FF,$A0,$00
 $BFE4 DEFB $00,$2F,$EA,$FF,$40,$00
 $BFEA DEFB $00,$17,$D1,$7E,$A0,$00
 $BFF0 DEFB $00,$0B,$A2,$B9,$60,$00
 $BFF6 DEFB $00,$04,$47,$46,$F0,$00
 $BFFC DEFB $00,$03,$8F,$B9,$F0,$00
 $C002 DEFB $00,$00,$00,$00,$00,$00
 $C008 DEFB $00,$00,$00,$00,$00,$00
 $C00E DEFB $00,$00,$00,$00,$00,$00

; Graphics: Sure Shot Sidney
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($C014-$C15E-$01-$30)(sure-shot-sidney) }
; UDGTABLE#
@label=Graphics_SureShotSidney
b$C014 DEFB $00,$00,$00,$00,$00,$00
 $C01A DEFB $00,$00,$00,$00,$00,$00
 $C020 DEFB $00,$00,$00,$00,$00,$00
 $C026 DEFB $00,$00,$00,$00,$00,$00
 $C02C DEFB $00,$00,$00,$00,$00,$00
 $C032 DEFB $00,$00,$1F,$FE,$00,$00
 $C038 DEFB $00,$00,$60,$01,$C0,$00
 $C03E DEFB $00,$01,$80,$00,$30,$00
 $C044 DEFB $00,$02,$00,$00,$0C,$00
 $C04A DEFB $00,$04,$00,$00,$02,$00
 $C050 DEFB $00,$04,$00,$00,$01,$00
 $C056 DEFB $00,$08,$00,$00,$00,$80
 $C05C DEFB $00,$08,$00,$00,$00,$80
 $C062 DEFB $00,$10,$00,$30,$00,$80
 $C068 DEFB $00,$10,$00,$78,$00,$40
 $C06E DEFB $00,$10,$00,$F8,$00,$40
 $C074 DEFB $00,$08,$03,$FC,$00,$40
 $C07A DEFB $00,$08,$1F,$FC,$00,$40
 $C080 DEFB $00,$07,$FF,$FE,$00,$40
 $C086 DEFB $00,$0B,$FF,$FE,$18,$40
 $C08C DEFB $00,$0B,$FE,$7E,$24,$40
 $C092 DEFB $00,$0A,$7D,$BF,$58,$40
 $C098 DEFB $00,$05,$BD,$DF,$BC,$40
 $C09E DEFB $00,$02,$DC,$DF,$7C,$40
 $C0A4 DEFB $00,$02,$5E,$EF,$FC,$40
 $C0AA DEFB $00,$02,$5C,$6F,$FC,$40
 $C0B0 DEFB $00,$02,$5C,$6F,$F8,$40
 $C0B6 DEFB $00,$02,$5C,$5F,$F8,$80
 $C0BC DEFB $00,$01,$AA,$5F,$F8,$80
 $C0C2 DEFB $00,$01,$DD,$1F,$F8,$80
 $C0C8 DEFB $00,$02,$3E,$BF,$F5,$00
 $C0CE DEFB $00,$0D,$FF,$5F,$F5,$00
 $C0D4 DEFB $00,$33,$FF,$BF,$B5,$00
 $C0DA DEFB $00,$4F,$F7,$FF,$CA,$00
 $C0E0 DEFB $00,$BF,$EF,$FF,$F2,$00
 $C0E6 DEFB $01,$7F,$DF,$DB,$FA,$00
 $C0EC DEFB $02,$FF,$3F,$E7,$FA,$00
 $C0F2 DEFB $05,$FC,$FF,$D7,$FA,$00
 $C0F8 DEFB $05,$FB,$7F,$37,$F4,$00
 $C0FE DEFB $05,$F5,$7C,$EF,$F4,$00
 $C104 DEFB $05,$C9,$73,$DF,$74,$00
 $C10A DEFB $02,$30,$8F,$BE,$F4,$00
 $C110 DEFB $01,$C0,$BF,$7D,$F4,$00
 $C116 DEFB $00,$00,$BE,$FD,$F4,$00
 $C11C DEFB $00,$00,$1D,$FB,$F4,$00
 $C122 DEFB $00,$00,$23,$FB,$F4,$00
 $C128 DEFB $00,$00,$BF,$F7,$F4,$00
 $C12E DEFB $00,$00,$BF,$EF,$F4,$00
 $C134 DEFB $00,$00,$5F,$DF,$F4,$00
 $C13A DEFB $00,$00,$5F,$BF,$FC,$00
 $C140 DEFB $00,$00,$2F,$5F,$F4,$00
 $C146 DEFB $00,$00,$2E,$9F,$EE,$00
 $C14C DEFB $00,$00,$11,$2F,$DF,$00
 $C152 DEFB $00,$00,$0E,$30,$3F,$80
 $C158 DEFB $00,$00,$00,$00,$00,$00
 $C15E DEFB $00,$00,$00,$00,$00,$00

; Graphics: Limp Wrist Larry
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($C164-$C2AE-$01-$30)(limp-wrist-larry) }
; UDGTABLE#
@label=Graphics_LimpWristLarry
b$C164 DEFB $00,$00,$00,$00,$00,$00
 $C16A DEFB $00,$00,$00,$00,$00,$00
 $C170 DEFB $00,$00,$00,$00,$00,$00
 $C176 DEFB $00,$00,$00,$00,$00,$00
 $C17C DEFB $00,$00,$00,$00,$00,$00
 $C182 DEFB $00,$00,$00,$00,$00,$00
 $C188 DEFB $00,$00,$03,$F8,$00,$00
 $C18E DEFB $00,$00,$0C,$04,$00,$00
 $C194 DEFB $00,$00,$13,$FA,$00,$00
 $C19A DEFB $00,$00,$2F,$FD,$00,$00
 $C1A0 DEFB $00,$00,$5F,$FE,$80,$00
 $C1A6 DEFB $00,$00,$5F,$FE,$80,$00
 $C1AC DEFB $00,$00,$BF,$FF,$42,$00
 $C1B2 DEFB $00,$00,$BF,$FF,$45,$00
 $C1B8 DEFB $00,$01,$7F,$FF,$A8,$80
 $C1BE DEFB $00,$01,$3D,$FF,$B0,$80
 $C1C4 DEFB $00,$01,$5A,$FF,$C0,$80
 $C1CA DEFB $00,$01,$77,$7F,$80,$80
 $C1D0 DEFB $00,$01,$7F,$F8,$00,$80
 $C1D6 DEFB $00,$01,$7F,$F0,$00,$80
 $C1DC DEFB $00,$00,$99,$F0,$00,$80
 $C1E2 DEFB $00,$01,$66,$F0,$00,$80
 $C1E8 DEFB $00,$02,$EF,$70,$01,$00
 $C1EE DEFB $00,$04,$00,$70,$C2,$00
 $C1F4 DEFB $00,$02,$D6,$F0,$E2,$00
 $C1FA DEFB $00,$02,$52,$F1,$64,$00
 $C200 DEFB $00,$01,$39,$F0,$B4,$00
 $C206 DEFB $00,$00,$DF,$F1,$D4,$00
 $C20C DEFB $00,$01,$0F,$E1,$B4,$00
 $C212 DEFB $00,$02,$F7,$E1,$28,$00
 $C218 DEFB $00,$05,$FB,$C1,$A8,$00
 $C21E DEFB $00,$05,$FB,$81,$E8,$00
 $C224 DEFB $00,$05,$FB,$03,$50,$00
 $C22A DEFB $00,$02,$F7,$06,$E0,$00
 $C230 DEFB $00,$01,$0F,$9E,$C0,$00
 $C236 DEFB $00,$00,$FF,$FE,$80,$00
 $C23C DEFB $00,$00,$BF,$FE,$80,$00
 $C242 DEFB $00,$00,$B1,$FD,$00,$00
 $C248 DEFB $00,$01,$4E,$FD,$00,$00
 $C24E DEFB $00,$01,$BF,$7D,$00,$00
 $C254 DEFB $00,$00,$AE,$FD,$00,$00
 $C25A DEFB $00,$00,$A1,$FD,$00,$00
 $C260 DEFB $00,$00,$AF,$FA,$00,$00
 $C266 DEFB $00,$00,$5F,$FA,$00,$00
 $C26C DEFB $00,$00,$2F,$FA,$00,$00
 $C272 DEFB $00,$00,$2F,$FA,$00,$00
 $C278 DEFB $00,$00,$17,$FD,$00,$00
 $C27E DEFB $00,$00,$17,$FD,$00,$00
 $C284 DEFB $00,$00,$17,$FD,$00,$00
 $C28A DEFB $00,$00,$17,$FE,$80,$00
 $C290 DEFB $00,$00,$2F,$FE,$80,$00
 $C296 DEFB $00,$00,$2F,$FF,$40,$00
 $C29C DEFB $00,$00,$00,$00,$00,$00
 $C2A2 DEFB $00,$00,$00,$00,$00,$00
 $C2A8 DEFB $00,$00,$00,$00,$00,$00
 $C2AE DEFB $00,$00,$00,$00,$00,$00

; Graphics: Tactical Tel
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$06,attr=$47,scale=$04,step=$06($C2B4-$C3FE-$01-$30)(tactical-tel) }
; UDGTABLE#
@label=Graphics_TacticalTel
b$C2B4 DEFB $00,$00,$00,$00,$00,$00
 $C2BA DEFB $00,$00,$00,$00,$00,$00
 $C2C0 DEFB $00,$00,$00,$00,$00,$00
 $C2C6 DEFB $00,$00,$00,$00,$00,$00
 $C2CC DEFB $00,$00,$00,$00,$00,$00
 $C2D2 DEFB $00,$00,$00,$00,$00,$00
 $C2D8 DEFB $00,$00,$00,$00,$00,$00
 $C2DE DEFB $00,$00,$07,$E0,$00,$00
 $C2E4 DEFB $00,$00,$08,$10,$00,$00
 $C2EA DEFB $00,$00,$16,$48,$00,$00
 $C2F0 DEFB $00,$00,$2C,$34,$00,$00
 $C2F6 DEFB $00,$00,$58,$1A,$00,$00
 $C2FC DEFB $00,$00,$88,$02,$00,$00
 $C302 DEFB $00,$01,$00,$01,$00,$00
 $C308 DEFB $00,$02,$0C,$21,$00,$00
 $C30E DEFB $00,$02,$0F,$F0,$80,$00
 $C314 DEFB $00,$04,$0F,$F0,$80,$00
 $C31A DEFB $00,$0A,$1F,$F0,$40,$00
 $C320 DEFB $00,$0B,$1F,$F9,$A0,$00
 $C326 DEFB $00,$13,$9F,$FB,$90,$00
 $C32C DEFB $00,$61,$83,$C3,$08,$00
 $C332 DEFB $00,$80,$00,$03,$08,$00
 $C338 DEFB $01,$00,$00,$00,$04,$00
 $C33E DEFB $03,$81,$C0,$00,$02,$00
 $C344 DEFB $02,$47,$F0,$0E,$02,$00
 $C34A DEFB $02,$2F,$FF,$FF,$01,$00
 $C350 DEFB $01,$27,$FF,$FF,$C3,$00
 $C356 DEFB $01,$10,$78,$7B,$3E,$80
 $C35C DEFB $00,$8B,$83,$84,$D0,$80
 $C362 DEFB $00,$51,$B9,$BF,$E1,$00
 $C368 DEFB $00,$28,$78,$6F,$EA,$00
 $C36E DEFB $00,$2C,$C4,$DF,$EC,$00
 $C374 DEFB $00,$5F,$BB,$BF,$E8,$00
 $C37A DEFB $00,$5F,$7D,$BF,$E8,$00
 $C380 DEFB $00,$5F,$7D,$BF,$E8,$00
 $C386 DEFB $00,$2E,$FE,$BF,$E8,$00
 $C38C DEFB $00,$2E,$FE,$BF,$E8,$00
 $C392 DEFB $00,$16,$FE,$BF,$D0,$00
 $C398 DEFB $00,$0B,$7D,$DF,$D0,$00
 $C39E DEFB $00,$04,$BB,$DF,$D0,$00
 $C3A4 DEFB $00,$03,$47,$9F,$D0,$00
 $C3AA DEFB $00,$02,$7E,$67,$A0,$00
 $C3B0 DEFB $00,$05,$B9,$FB,$A0,$00
 $C3B6 DEFB $00,$0B,$C7,$FD,$A0,$00
 $C3BC DEFB $00,$0B,$FF,$FB,$A0,$00
 $C3C2 DEFB $00,$0B,$FF,$F7,$D0,$00
 $C3C8 DEFB $00,$0B,$FF,$EF,$D0,$00
 $C3CE DEFB $00,$0B,$FF,$DF,$D0,$00
 $C3D4 DEFB $00,$05,$FF,$AF,$E8,$00
 $C3DA DEFB $00,$02,$78,$57,$E8,$00
 $C3E0 DEFB $00,$01,$87,$97,$E8,$00
 $C3E6 DEFB $00,$00,$78,$00,$00,$00
 $C3EC DEFB $00,$00,$00,$00,$00,$00
 $C3F2 DEFB $00,$00,$00,$00,$00,$00
 $C3F8 DEFB $00,$00,$00,$00,$00,$00
 $C3FE DEFB $00,$00,$00,$00,$00,$00

; Graphics: Jammy Jim (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C404-$C449-$01-$18)(pub-jammy-jim) }
; UDGTABLE#
@label=Graphics_JammyJim_Pub
b$C404 DEFB $FF,$76,$7F
 $C407 DEFB $00,$ED,$80
 $C40A DEFB $01,$DD,$C0
 $C40D DEFB $01,$DD,$E0
 $C410 DEFB $01,$0D,$E0
 $C413 DEFB $03,$F5,$F0
 $C416 DEFB $06,$99,$88
 $C419 DEFB $05,$6E,$28
 $C41C DEFB $04,$2F,$A8
 $C41F DEFB $02,$9D,$C4
 $C422 DEFB $01,$FA,$F4
 $C425 DEFB $1B,$FE,$E8
 $C428 DEFB $BF,$BE,$E7
 $C42B DEFB $3F,$DE,$E0
 $C42E DEFB $BD,$BA,$DF
 $C431 DEFB $18,$7D,$C0
 $C434 DEFB $01,$E7,$80
 $C437 DEFB $01,$DB,$80
 $C43A DEFB $01,$3F,$00
 $C43D DEFB $FC,$FE,$9F
 $C440 DEFB $01,$FD,$80
 $C443 DEFB $FD,$FB,$9F
 $C446 DEFB $00,$F7,$80
 $C449 DEFB $00,$07,$40

; Graphics: Beer Belly Bill (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C44C-$C491-$01-$18)(pub-beer-belly-bill) }
; UDGTABLE#
@label=Graphics_BeerBellyBill_Pub
b$C44C DEFB $FF,$9F,$CF
 $C44F DEFB $00,$60,$30
 $C452 DEFB $00,$9F,$C8
 $C455 DEFB $01,$7F,$F4
 $C458 DEFB $01,$7F,$F4
 $C45B DEFB $00,$90,$FA
 $C45E DEFB $00,$EF,$2A
 $C461 DEFB $00,$BB,$D2
 $C464 DEFB $00,$D5,$EA
 $C467 DEFB $00,$11,$F2
 $C46A DEFB $00,$FF,$EA
 $C46D DEFB $01,$DF,$BA
 $C470 DEFB $FD,$BF,$B4
 $C473 DEFB $01,$CF,$A8
 $C476 DEFB $FE,$FF,$AB
 $C479 DEFB $00,$99,$68
 $C47C DEFB $00,$C7,$D0
 $C47F DEFB $00,$7D,$B7
 $C482 DEFB $00,$6D,$B0
 $C485 DEFB $FE,$93,$78
 $C488 DEFB $00,$6E,$C8
 $C48B DEFB $0F,$31,$B4
 $C48E DEFB $76,$5F,$26
 $C491 DEFB $00,$00,$00

; Graphics: Del Boy Desmond (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C494-$C4D9-$01-$18)(pub-del-boy-desmond) }
; UDGTABLE#
@label=Graphics_DelBoyDesmond_Pub
b$C494 DEFB $FB,$23,$7F
 $C497 DEFB $01,$B6,$30
 $C49A DEFB $19,$FE,$60
 $C49D DEFB $0D,$FF,$C7
 $C4A0 DEFB $07,$83,$F8
 $C4A3 DEFB $03,$7D,$FD
 $C4A6 DEFB $00,$AE,$F0
 $C4A9 DEFB $01,$56,$FC
 $C4AC DEFB $01,$57,$7C
 $C4AF DEFB $01,$06,$F8
 $C4B2 DEFB $00,$AD,$70
 $C4B5 DEFB $01,$7F,$78
 $C4B8 DEFB $FD,$5F,$7C
 $C4BB DEFB $03,$BE,$F8
 $C4BE DEFB $F5,$4E,$F7
 $C4C1 DEFB $0B,$BA,$E0
 $C4C4 DEFB $17,$ED,$40
 $C4C7 DEFB $10,$3B,$A0
 $C4CA DEFB $0F,$6E,$A0
 $C4CD DEFB $F6,$BE,$AF
 $C4D0 DEFB $06,$75,$A0
 $C4D3 DEFB $F0,$DB,$AF
 $C4D6 DEFB $00,$F5,$A0
 $C4D9 DEFB $00,$6D,$D0

; Graphics: Mega Mick (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C4DC-$C521-$01-$18)(pub-mega-mick) }
; UDGTABLE#
@label=Graphics_MegaMick_Pub
b$C4DC DEFB $FF,$3C,$FF
 $C4DF DEFB $00,$C3,$00
 $C4E2 DEFB $01,$3C,$80
 $C4E5 DEFB $02,$FF,$40
 $C4E8 DEFB $05,$FF,$40
 $C4EB DEFB $04,$E7,$40
 $C4EE DEFB $03,$5A,$E0
 $C4F1 DEFB $04,$A5,$50
 $C4F4 DEFB $06,$F6,$A8
 $C4F7 DEFB $06,$B5,$E8
 $C4FA DEFB $07,$35,$E8
 $C4FD DEFB $02,$DB,$A8
 $C500 DEFB $F5,$E7,$57
 $C503 DEFB $0B,$BF,$60
 $C506 DEFB $D6,$BE,$DF
 $C509 DEFB $11,$7D,$40
 $C50C DEFB $0F,$FB,$40
 $C50F DEFB $01,$D7,$40
 $C512 DEFB $02,$B7,$40
 $C515 DEFB $FA,$AB,$5F
 $C518 DEFB $03,$DB,$40
 $C51B DEFB $FA,$AB,$5F
 $C51E DEFB $02,$2B,$40
 $C521 DEFB $01,$CB,$40

; Graphics: Devious Dave (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C524-$C569-$01-$18)(pub-devious-dave) }
; UDGTABLE#
@label=Graphics_DeviousDave_Pub
b$C524 DEFB $DE,$38,$7F
 $C527 DEFB $3F,$C7,$80
 $C52A DEFB $1F,$FF,$E0
 $C52D DEFB $06,$FF,$F8
 $C530 DEFB $0C,$7F,$FC
 $C533 DEFB $3E,$FF,$FC
 $C536 DEFB $1F,$FF,$FC
 $C539 DEFB $08,$00,$18
 $C53C DEFB $0A,$D4,$08
 $C53F DEFB $0D,$6C,$08
 $C542 DEFB $06,$FC,$08
 $C545 DEFB $01,$F9,$88
 $C548 DEFB $FB,$FB,$8B
 $C54B DEFB $07,$3F,$88
 $C54E DEFB $EF,$9F,$0B
 $C551 DEFB $0C,$6F,$08
 $C554 DEFB $09,$F7,$88
 $C557 DEFB $01,$03,$90
 $C55A DEFB $01,$E7,$F0
 $C55D DEFB $FB,$FE,$6F
 $C560 DEFB $07,$E1,$E0
 $C563 DEFB $EF,$DF,$EF
 $C566 DEFB $0F,$A3,$E0
 $C569 DEFB $07,$43,$D0

; Graphics: Sure Shot Sidney (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C56C-$C5B1-$01-$18)(pub-sure-shot-sidney) }
; UDGTABLE#
@label=Graphics_SureShotSidney_Pub
b$C56C DEFB $FD,$FE,$7F
 $C56F DEFB $02,$01,$80
 $C572 DEFB $05,$FE,$40
 $C575 DEFB $05,$FF,$A0
 $C578 DEFB $05,$FF,$A0
 $C57B DEFB $04,$A7,$D0
 $C57E DEFB $05,$5B,$D0
 $C581 DEFB $07,$FD,$D0
 $C584 DEFB $05,$9D,$28
 $C587 DEFB $06,$6C,$C8
 $C58A DEFB $02,$2D,$C8
 $C58D DEFB $01,$8F,$C8
 $C590 DEFB $FB,$EF,$8B
 $C593 DEFB $07,$FF,$90
 $C596 DEFB $EF,$FF,$AF
 $C599 DEFB $1F,$3F,$C0
 $C59C DEFB $3E,$FB,$C0
 $C59F DEFB $3C,$E7,$80
 $C5A2 DEFB $18,$4F,$80
 $C5A5 DEFB $E7,$5F,$1F
 $C5A8 DEFB $00,$7E,$80
 $C5AB DEFB $FE,$FD,$9F
 $C5AE DEFB $00,$FB,$80
 $C5B1 DEFB $00,$77,$40

; Graphics: Limp Wrist Larry (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C5B4-$C5F9-$01-$18)(pub-limp-wrist-larry) }
; UDGTABLE#
@label=Graphics_LimpWristLarry_Pub
b$C5B4 DEFB $FF,$DE,$7F
 $C5B7 DEFB $00,$3F,$80
 $C5BA DEFB $00,$7F,$C0
 $C5BD DEFB $00,$FF,$E4
 $C5C0 DEFB $00,$77,$E9
 $C5C3 DEFB $00,$AB,$D6
 $C5C6 DEFB $00,$FF,$3C
 $C5C9 DEFB $00,$76,$FD
 $C5CC DEFB $00,$AA,$CE
 $C5CF DEFB $00,$22,$B5
 $C5D2 DEFB $01,$76,$9A
 $C5D5 DEFB $01,$DE,$AA
 $C5D8 DEFB $FB,$EE,$AB
 $C5DB DEFB $03,$ED,$B6
 $C5DE DEFB $FD,$DB,$75
 $C5E1 DEFB $00,$7C,$F8
 $C5E4 DEFB $00,$7F,$E0
 $C5E7 DEFB $00,$07,$C0
 $C5EA DEFB $00,$27,$C0
 $C5ED DEFB $FF,$BF,$DF
 $C5F0 DEFB $00,$3F,$80
 $C5F3 DEFB $FF,$9F,$BF
 $C5F6 DEFB $00,$1F,$00
 $C5F9 DEFB $FF,$DF,$BF

; Graphics: Tactical Tel (Pub Scene)
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C5FC-$C641-$01-$18)(pub-tactical-tel) }
; UDGTABLE#
@label=Graphics_TacticalTel_Pub
b$C5FC DEFB $FF,$9C,$FF
 $C5FF DEFB $00,$63,$00
 $C602 DEFB $00,$92,$80
 $C605 DEFB $01,$6D,$40
 $C608 DEFB $02,$9C,$A0
 $C60B DEFB $04,$A2,$A0
 $C60E DEFB $15,$3E,$50
 $C611 DEFB $2A,$C0,$A8
 $C614 DEFB $2C,$FF,$68
 $C617 DEFB $26,$63,$BC
 $C61A DEFB $15,$8C,$52
 $C61D DEFB $08,$65,$A2
 $C620 DEFB $F6,$F1,$F5
 $C623 DEFB $0F,$1B,$F8
 $C626 DEFB $EE,$EB,$FB
 $C629 DEFB $0E,$ED,$F0
 $C62C DEFB $06,$ED,$F0
 $C62F DEFB $03,$5C,$F0
 $C632 DEFB $01,$BB,$70
 $C635 DEFB $FC,$E7,$67
 $C638 DEFB $03,$1E,$E0
 $C63B DEFB $FB,$FD,$E7
 $C63E DEFB $03,$FB,$E0
 $C641 DEFB $01,$F7,$C0

; Graphics: Throwing
;
; .
;
; .
;
; Frame #N$01:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C644-$C689-$01-$18)(throwing-1*) }
; UDGTABLE#
@label=Graphics_Throwing_01
b$C644 DEFB $09,$40,$1C
 $C647 DEFB $09,$40,$1C
 $C64A DEFB $08,$00,$3E
 $C64D DEFB $03,$C0,$3E
 $C650 DEFB $CE,$EF,$FF
 $C653 DEFB $19,$E0,$00
 $C656 DEFB $57,$77,$EB
 $C659 DEFB $58,$F0,$2A
 $C65C DEFB $55,$F8,$2A
 $C65F DEFB $4B,$78,$2A
 $C662 DEFB $40,$7C,$2A
 $C665 DEFB $7F,$BD,$EB
 $C668 DEFB $00,$3E,$08
 $C66B DEFB $7F,$BF,$6B
 $C66E DEFB $40,$3F,$2A
 $C671 DEFB $40,$1F,$2A
 $C674 DEFB $00,$1F,$80
 $C677 DEFB $FF,$DF,$DF
 $C67A DEFB $FF,$EF,$F7
 $C67D DEFB $FF,$EF,$E2
 $C680 DEFB $FF,$EF,$C0
 $C683 DEFB $FF,$F7,$A2
 $C686 DEFB $FF,$F7,$F7
 $C689 DEFB $FF,$F7,$22
; Frame #N$02:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C68C-$C6D1-$01-$18)(throwing-2*) }
; UDGTABLE#
@label=Graphics_Throwing_02
 $C68C DEFB $09,$40,$1C
 $C68F DEFB $09,$40,$1C
 $C692 DEFB $09,$40,$3E
 $C695 DEFB $09,$4F,$3E
 $C698 DEFB $FF,$BB,$BF
 $C69B DEFB $00,$73,$80
 $C69E DEFB $7F,$6F,$AB
 $C6A1 DEFB $40,$73,$CA
 $C6A4 DEFB $40,$55,$CA
 $C6A7 DEFB $40,$2D,$CA
 $C6AA DEFB $40,$01,$CA
 $C6AD DEFB $7F,$FD,$CB
 $C6B0 DEFB $00,$01,$C8
 $C6B3 DEFB $7F,$FD,$CB
 $C6B6 DEFB $40,$03,$CA
 $C6B9 DEFB $40,$03,$EA
 $C6BC DEFB $00,$03,$E0
 $C6BF DEFB $FF,$FB,$EF
 $C6C2 DEFB $FF,$FB,$F7
 $C6C5 DEFB $FF,$FB,$E2
 $C6C8 DEFB $FF,$FB,$C0
 $C6CB DEFB $FF,$FB,$A2
 $C6CE DEFB $FF,$FB,$F7
 $C6D1 DEFB $FF,$FB,$22
; Frame #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C6D4-$C719-$01-$18)(throwing-3*) }
; UDGTABLE#
@label=Graphics_Throwing_03
 $C6D4 DEFB $09,$40,$1C
 $C6D7 DEFB $09,$40,$0C
 $C6DA DEFB $09,$40,$7A
 $C6DD DEFB $01,$41,$EC
 $C6E0 DEFB $FF,$FD,$96
 $C6E3 DEFB $00,$02,$D7
 $C6E6 DEFB $7F,$FD,$5F
 $C6E9 DEFB $40,$00,$3E
 $C6EC DEFB $40,$00,$7C
 $C6EF DEFB $40,$00,$7C
 $C6F2 DEFB $40,$00,$7A
 $C6F5 DEFB $7F,$FE,$FB
 $C6F8 DEFB $00,$00,$F8
 $C6FB DEFB $7F,$FD,$F3
 $C6FE DEFB $40,$01,$F2
 $C701 DEFB $40,$01,$F2
 $C704 DEFB $00,$03,$E0
 $C707 DEFB $FF,$FB,$FF
 $C70A DEFB $FF,$FB,$F7
 $C70D DEFB $FF,$F7,$E2
 $C710 DEFB $FF,$F7,$C0
 $C713 DEFB $FF,$F7,$A2
 $C716 DEFB $FF,$F7,$F7
 $C719 DEFB $FF,$F7,$22

; Graphics: Dart
;
; #UDGTABLE(default)
; { #UDGARRAY$04,attr=$47,scale=$04,step=$04($C71C-$C720-$01-$20){$00,$00,$80,$08}(dart) }
; UDGTABLE#
@label=Graphics_Dart
b$C71C DEFB $00,$70,$E0,$FF
 $C720 DEFB $00,$70,$00,$00

; Graphics: Bar Maid
;
; .
;
; .
;
; Frame #N$01:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C724-$C781-$01-$18)(bar-maid-1) }
; UDGTABLE#
@label=Graphics_BarMaid_01
b$C724 DEFB $00,$1E,$03
 $C727 DEFB $00,$21,$03
 $C72A DEFB $80,$4C,$84
 $C72D DEFB $40,$9E,$48
 $C730 DEFB $40,$BF,$48
 $C733 DEFB $40,$AD,$48
 $C736 DEFB $FE,$BF,$5F
 $C739 DEFB $00,$B3,$40
 $C73C DEFB $FE,$BF,$5F
 $C73F DEFB $00,$B5,$40
 $C742 DEFB $00,$B3,$40
 $C745 DEFB $00,$9E,$40
 $C748 DEFB $8D,$8C,$6F
 $C74B DEFB $01,$33,$24
 $C74E DEFB $01,$7F,$A0
 $C751 DEFB $03,$FF,$F0
 $C754 DEFB $05,$FF,$E8
 $C757 DEFB $0D,$F3,$EC
 $C75A DEFB $1D,$ED,$EE
 $C75D DEFB $1D,$C1,$EE
 $C760 DEFB $1D,$DD,$EE
 $C763 DEFB $3D,$91,$EF
 $C766 DEFB $3C,$3D,$CF
 $C769 DEFB $3C,$70,$07
 $C76C DEFB $3E,$FC,$07
 $C76F DEFB $3C,$FC,$07
 $C772 DEFB $39,$EC,$07
 $C775 DEFB $33,$DE,$1F
 $C778 DEFB $3F,$AD,$EF
 $C77B DEFB $BF,$0C,$0F
 $C77E DEFB $3E,$0C,$0F
 $C781 DEFB $3C,$0C,$1E
; Frame #N$02:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C784-$C7E1-$01-$18)(bar-maid-2) }
; UDGTABLE#
@label=Graphics_BarMaid_02
 $C784 DEFB $00,$1E,$03
 $C787 DEFB $00,$21,$03
 $C78A DEFB $80,$4C,$84
 $C78D DEFB $40,$9E,$48
 $C790 DEFB $40,$BF,$48
 $C793 DEFB $40,$AD,$48
 $C796 DEFB $FE,$BF,$5F
 $C799 DEFB $00,$B3,$40
 $C79C DEFB $FE,$BF,$5F
 $C79F DEFB $00,$B5,$40
 $C7A2 DEFB $00,$B3,$40
 $C7A5 DEFB $00,$9E,$40
 $C7A8 DEFB $8D,$8C,$6F
 $C7AB DEFB $01,$33,$24
 $C7AE DEFB $01,$7F,$A0
 $C7B1 DEFB $03,$FF,$F0
 $C7B4 DEFB $05,$FF,$E8
 $C7B7 DEFB $0D,$F3,$EC
 $C7BA DEFB $1D,$ED,$EE
 $C7BD DEFB $1D,$ED,$EE
 $C7C0 DEFB $1D,$ED,$EE
 $C7C3 DEFB $3D,$ED,$EF
 $C7C6 DEFB $3C,$E1,$CF
 $C7C9 DEFB $3C,$0C,$07
 $C7CC DEFB $3C,$30,$07
 $C7CF DEFB $3C,$FC,$07
 $C7D2 DEFB $3B,$F0,$07
 $C7D5 DEFB $37,$EE,$1F
 $C7D8 DEFB $3F,$CD,$EF
 $C7DB DEFB $BF,$0C,$0F
 $C7DE DEFB $3C,$0C,$0F
 $C7E1 DEFB $38,$0C,$1E
; Frame #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$03,attr=$47,scale=$04,step=$03($C7E4-$C841-$01-$18)(bar-maid-3) }
; UDGTABLE#
@label=Graphics_BarMaid_03
 $C7E4 DEFB $00,$1E,$03
 $C7E7 DEFB $00,$21,$03
 $C7EA DEFB $80,$4C,$84
 $C7ED DEFB $40,$9E,$48
 $C7F0 DEFB $40,$BF,$48
 $C7F3 DEFB $40,$AD,$48
 $C7F6 DEFB $FE,$BF,$5F
 $C7F9 DEFB $00,$B3,$40
 $C7FC DEFB $FE,$BF,$5F
 $C7FF DEFB $00,$B5,$40
 $C802 DEFB $00,$B3,$40
 $C805 DEFB $00,$9E,$40
 $C808 DEFB $8D,$8C,$6F
 $C80B DEFB $01,$33,$24
 $C80E DEFB $01,$7F,$A0
 $C811 DEFB $03,$FF,$F0
 $C814 DEFB $05,$FF,$E8
 $C817 DEFB $0D,$FF,$EC
 $C81A DEFB $1D,$FF,$EE
 $C81D DEFB $1D,$F3,$EE
 $C820 DEFB $3D,$EF,$EE
 $C823 DEFB $3D,$ED,$EF
 $C826 DEFB $3C,$ED,$CF
 $C829 DEFB $78,$0C,$07
 $C82C DEFB $78,$10,$07
 $C82F DEFB $78,$3C,$07
 $C832 DEFB $78,$F2,$07
 $C835 DEFB $73,$FE,$1F
 $C838 DEFB $77,$F1,$EF
 $C83B DEFB $7F,$CC,$0F
 $C83E DEFB $7F,$0C,$0F
 $C841 DEFB $7C,$0C,$1E

; Graphics: Dog
;
; .
;
; .
;
; Frame #N$01:
; #UDGTABLE(default)
; { #UDGARRAY$05,attr=$47,scale=$04,step=$05($C844-$C8B7-$01-$28)(dog-1) }
; UDGTABLE#
@label=Graphics_Dog_01
b$C844 DEFB $00,$64,$00,$00,$00
 $C849 DEFB $01,$8A,$00,$00,$00
 $C84E DEFB $02,$04,$00,$00,$00
 $C853 DEFB $05,$D4,$00,$00,$00
 $C858 DEFB $0A,$FA,$00,$30,$00
 $C85D DEFB $17,$C9,$8E,$48,$00
 $C862 DEFB $2F,$C4,$71,$B0,$00
 $C867 DEFB $14,$2B,$00,$40,$00
 $C86C DEFB $11,$96,$62,$20,$00
 $C871 DEFB $0E,$AE,$7E,$20,$00
 $C876 DEFB $00,$9C,$3F,$20,$00
 $C87B DEFB $00,$BC,$7E,$20,$00
 $C880 DEFB $00,$5C,$F6,$20,$00
 $C885 DEFB $00,$5F,$77,$10,$00
 $C88A DEFB $00,$5C,$F7,$10,$00
 $C88F DEFB $00,$BA,$0B,$90,$00
 $C894 DEFB $00,$B5,$ED,$D0,$00
 $C899 DEFB $FF,$B6,$DC,$DF,$FF
 $C89E DEFB $01,$6B,$5A,$E8,$00
 $C8A3 DEFB $02,$E7,$3B,$68,$00
 $C8A8 DEFB $02,$E8,$C6,$E8,$00
 $C8AD DEFB $01,$17,$39,$10,$00
 $C8B2 DEFB $00,$E0,$00,$E0,$00
 $C8B7 DEFB $00,$00,$00,$00,$00
; Frame #N$02:
; #UDGTABLE(default)
; { #UDGARRAY$05,attr=$47,scale=$04,step=$05($C8BC-$C92F-$01-$28)(dog-2) }
; UDGTABLE#
@label=Graphics_Dog_02
 $C8BC DEFB $00,$01,$80,$00,$00
 $C8C1 DEFB $00,$06,$40,$00,$00
 $C8C6 DEFB $00,$18,$A0,$00,$00
 $C8CB DEFB $00,$20,$40,$00,$00
 $C8D0 DEFB $00,$5D,$40,$00,$00
 $C8D5 DEFB $01,$AF,$A0,$03,$00
 $C8DA DEFB $02,$7C,$98,$E4,$80
 $C8DF DEFB $02,$FC,$47,$1B,$00
 $C8E4 DEFB $01,$42,$B0,$04,$00
 $C8E9 DEFB $00,$19,$66,$22,$00
 $C8EE DEFB $00,$EA,$E7,$E2,$00
 $C8F3 DEFB $00,$09,$C3,$F2,$00
 $C8F8 DEFB $00,$0B,$C7,$E2,$00
 $C8FD DEFB $00,$05,$CF,$62,$00
 $C902 DEFB $00,$04,$F7,$74,$00
 $C907 DEFB $00,$04,$CF,$74,$00
 $C90C DEFB $00,$0B,$60,$EA,$00
 $C911 DEFB $FF,$FB,$6E,$EB,$FF
 $C916 DEFB $00,$0B,$6D,$CD,$00
 $C91B DEFB $00,$16,$B5,$B6,$00
 $C920 DEFB $00,$2E,$B5,$AE,$00
 $C925 DEFB $00,$11,$73,$B1,$00
 $C92A DEFB $00,$0E,$8C,$4E,$00
 $C92F DEFB $00,$00,$73,$A0,$00
; Frame #N$03:
; #UDGTABLE(default)
; { #UDGARRAY$04,attr=$47,scale=$04,step=$04($C934-$C990-$01-$20)(dog-3) }
; UDGTABLE#
@label=Graphics_Dog_03
 $C934 DEFB $00,$30,$00,$00
 $C938 DEFB $00,$E0,$00,$00
 $C93C DEFB $01,$A0,$00,$00
 $C940 DEFB $C7,$90,$00,$00
 $C944 DEFB $19,$38,$20,$00
 $C948 DEFB $0C,$5C,$40,$00
 $C94C DEFB $04,$BB,$C0,$00
 $C950 DEFB $05,$53,$F8,$00
 $C954 DEFB $02,$84,$48,$00
 $C958 DEFB $01,$4E,$04,$00
 $C95C DEFB $00,$CF,$44,$00
 $C960 DEFB $01,$DE,$0C,$00
 $C964 DEFB $01,$DC,$0E,$00
 $C968 DEFB $01,$D0,$AE,$00
 $C96C DEFB $00,$B1,$2E,$00
 $C970 DEFB $00,$AA,$D6,$00
 $C974 DEFB $00,$AD,$52,$00
 $C978 DEFB $00,$AC,$4D,$FF
 $C97C DEFB $01,$33,$92,$00
 $C980 DEFB $01,$32,$12,$00
 $C984 DEFB $02,$52,$1A,$00
 $C988 DEFB $01,$A2,$0C,$00
 $C98C DEFB $00,$1C,$12,$00
 $C990 DEFB $00,$00,$0C,$00
; Frame #N$04:
; #UDGTABLE(default)
; { #UDGARRAY$04,attr=$47,scale=$04,step=$04($C994-$C9F0-$01-$20)(dog-4) }
; UDGTABLE#
@label=Graphics_Dog_04
 $C994 DEFB $00,$30,$00,$00
 $C998 DEFB $00,$E0,$00,$00
 $C99C DEFB $01,$A0,$00,$00
 $C9A0 DEFB $C7,$90,$00,$00
 $C9A4 DEFB $19,$38,$40,$00
 $C9A8 DEFB $0C,$5C,$40,$00
 $C9AC DEFB $04,$BB,$C0,$00
 $C9B0 DEFB $05,$53,$F8,$00
 $C9B4 DEFB $02,$84,$4A,$00
 $C9B8 DEFB $01,$4E,$05,$00
 $C9BC DEFB $00,$CF,$46,$C0
 $C9C0 DEFB $01,$DE,$09,$20
 $C9C4 DEFB $01,$DC,$00,$D0
 $C9C8 DEFB $01,$D0,$9C,$E8
 $C9CC DEFB $00,$B1,$23,$34
 $C9D0 DEFB $00,$AA,$C0,$C4
 $C9D4 DEFB $00,$AD,$40,$48
 $C9D8 DEFB $00,$AC,$5F,$FF
 $C9DC DEFB $01,$33,$80,$00
 $C9E0 DEFB $01,$32,$00,$00
 $C9E4 DEFB $02,$52,$00,$00
 $C9E8 DEFB $01,$A2,$00,$00
 $C9EC DEFB $00,$1C,$00,$00
 $C9F0 DEFB $00,$00,$00,$00
; Frame #N$05:
; #UDGTABLE(default)
; { #UDGARRAY$04,attr=$47,scale=$04,step=$04($C9F4-$CA50-$01-$20)(dog-5) }
; UDGTABLE#
@label=Graphics_Dog_05
 $C9F4 DEFB $00,$30,$00,$00
 $C9F8 DEFB $00,$E0,$00,$00
 $C9FC DEFB $01,$A0,$00,$00
 $CA00 DEFB $C7,$90,$00,$00
 $CA04 DEFB $19,$38,$00,$00
 $CA08 DEFB $0C,$5C,$00,$00
 $CA0C DEFB $04,$BB,$00,$E0
 $CA10 DEFB $05,$53,$FF,$50
 $CA14 DEFB $02,$84,$5C,$D0
 $CA18 DEFB $01,$4E,$00,$D0
 $CA1C DEFB $00,$CF,$5C,$50
 $CA20 DEFB $01,$DE,$23,$A0
 $CA24 DEFB $01,$DC,$40,$40
 $CA28 DEFB $01,$D0,$80,$00
 $CA2C DEFB $00,$B1,$00,$00
 $CA30 DEFB $00,$AA,$C0,$00
 $CA34 DEFB $00,$AD,$40,$00
 $CA38 DEFB $00,$AC,$5F,$FF
 $CA3C DEFB $01,$33,$80,$00
 $CA40 DEFB $01,$32,$00,$00
 $CA44 DEFB $02,$52,$00,$00
 $CA48 DEFB $01,$A2,$00,$00
 $CA4C DEFB $00,$1C,$00,$00
 $CA50 DEFB $00,$00,$00,$00

; Graphics: Pint
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$01,attr=$47,scale=$04,step=$01($CA54-$CA63-$01-$08)(pint) }
; UDGTABLE#
@label=Graphics_Pint
b$CA54 DEFB $00
 $CA55 DEFB $FF
 $CA56 DEFB $FF
 $CA57 DEFB $81
 $CA58 DEFB $81
 $CA59 DEFB $81
 $CA5A DEFB $81
 $CA5B DEFB $81
 $CA5C DEFB $81
 $CA5D DEFB $C3
 $CA5E DEFB $C3
 $CA5F DEFB $C3
 $CA60 DEFB $C3
 $CA61 DEFB $C3
 $CA62 DEFB $E7
 $CA63 DEFB $FF

; Graphics: Bar
;
; .
;
; .
;
; #UDGTABLE(default)
; { #UDGARRAY$01,attr=$47,scale=$04,step=$01($CA64-$CA7B-$01-$08)(bar) }
; UDGTABLE#
@label=Graphics_Bar
b$CA64 DEFB $00
 $CA65 DEFB $00
 $CA66 DEFB $00
 $CA67 DEFB $00
 $CA68 DEFB $00
 $CA69 DEFB $00
 $CA6A DEFB $00
 $CA6B DEFB $00
 $CA6C DEFB $00
 $CA6D DEFB $00
 $CA6E DEFB $00
 $CA6F DEFB $00
 $CA70 DEFB $00
 $CA71 DEFB $00
 $CA72 DEFB $00
 $CA73 DEFB $00
 $CA74 DEFB $00
 $CA75 DEFB $FF
 $CA76 DEFB $00
 $CA77 DEFB $00
 $CA78 DEFB $00
 $CA79 DEFB $00
 $CA7A DEFB $00
 $CA7B DEFB $00

; Sound: "180"
;
; Used by the routine at #R$A0D6.
;
; .
;
; Plays 1-bit PCM speech for the "ONE HUNDRED AND EIGHTY!" announcement.
; .
; #HTML(#AUDIO(speech.wav)(#INCLUDE(Speech)))
@label=Sound_180Speech
c$CA7C LD HL,$D500    ; Set a pointer to the speech data in #REGhl to #R$D500.
 $CA7F LD DE,$0800    ; Set the data length counter in #REGde to #N$0800 bytes.
@label=SpeechProcessByte
*$CA82 LD B,$08       ; Set a counter in #REGb for #N$08 bits per byte.
@label=SpeechProcessBit
*$CA84 RLC (HL)       ; Rotate *#REGhl left one position to set the next bit to the carry
                      ; flag.
; Set the speaker bit ON or OFF based on if the currently processed bit
; is set or not.
 $CA86 LD A,%00010000 ; Set the speaker bit to ON.
 $CA88 JR C,$CA8B     ; Jump to #R$CA8B if the carry bit is set.
 $CA8A XOR A          ; Set the speaker bit to OFF.
; Output the sample.
@label=SpeechOutputSample
*$CA8B OUT ($FE),A    ; Send #REGa to the speaker.
; Introduce a tiny delay.
 $CA8D LD C,$12       ; Set a delay counter in #REGc.
@label=SpeechDelay_Loop
*$CA8F DEC C          ; Decrease the delay counter by one.
 $CA90 JR NZ,$CA8F    ; Jump back to #R$CA8F until the delay counter is zero.
 $CA92 DJNZ $CA9C     ; Decrease the bit counter by one and jump to #R$CA9C until all
                      ; bits in the current byte have been processed.
; Finished with this byte, move onto the next.
 $CA94 INC HL         ; Move to the next byte of speech data.
 $CA95 DEC DE         ; Decrease the data length counter by one.
 $CA96 LD A,D         ; {Jump back to #R$CA82 until all the bytes have been
 $CA97 OR E           ; processed.
 $CA98 JR NZ,$CA82    ; }
; All done, re-enable the interrupts and return.
 $CA9A EI             ; Enable interrupts.
 $CA9B RET            ; Return.
; Minor timing tweaks (probably).
@label=SpeechWasteCycles
*$CA9C NOP            ; {No operation.
 $CA9D NOP            ;
 $CA9E NOP            ;
 $CA9F NOP            ;
 $CAA0 NOP            ; }
 $CAA1 JR $CA84       ; Jump to #R$CA84.

; Data block at CAA3
w$CAA3 DEFW $B46E
 $CAA5 DEFW $A096
 $CAA7 DEFW $BEB4
 $CAA9 DEFW $8C78
 $CAAB DEFW $AAA0
 $CAAD DEFW $C7BE
 $CAAF DEFW $7846
 $CAB1 DEFW $9682
 $CAB3 DEFW $BEA0
 $CAB5 DEFW $9664
 $CAB7 DEFW $9664
 $CAB9 DEFW $4B28
 $CABB DEFW $9632
 $CABD DEFW $B4AA
 $CABF DEFW $C6C3
 $CAC1 DEFW $A596
 $CAC3 DEFW $AFAA
 $CAC5 DEFW $C7B9
 $CAC7 DEFW $A050
 $CAC9 DEFW $B4AA
 $CACB DEFW $C3BE
 $CACD DEFW $6496
 $CACF DEFW $6496
 $CAD1 DEFW $6464
 $CAD3 DEFW $C801
 $CAD5 DEFW $C5C4
 $CAD7 DEFW $C7C6
 $CAD9 DEFW $BEB4
 $CADB DEFW $C2C0
 $CADD DEFW $C6C4
 $CADF DEFW $BE32
 $CAE1 DEFW $C2C0
 $CAE3 DEFW $C7C6
 $CAE5 DEFW $BEB4
 $CAE7 DEFW $B4A0
 $CAE9 DEFW $B4AF

; Routine at CAEB
;
; Used by the routines at #R$B5BA, #R$B640 and #R$B6C2.
c$CAEB LD HL,$CAA3   ; #REGhl=#R$CAA3.
 $CAEE LD DE,$0018   ; #REGde=#N($0018,$04,$04).
 $CAF1 OR A          ; Set the bits from #REGa.
 $CAF2 JR Z,$CAF8    ; Jump to #R$CAF8 if the result is zero.
 $CAF4 LD B,A        ; #REGb=#REGa.
*$CAF5 ADD HL,DE     ; #REGhl+=#REGde.
 $CAF6 DJNZ $CAF5    ; Decrease counter by one and loop back to #R$CAF5 until
                     ; counter is zero.
*$CAF8 LD DE,$B431   ; #REGde=#R$B431.
 $CAFB LD B,$04      ; #REGb=#N$04.
*$CAFD PUSH BC       ; Stash #REGbc on the stack.
 $CAFE EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $CAFF LD (HL),E     ; Write #REGe to *#REGhl.
 $CB00 INC HL        ; Increment #REGhl by one.
 $CB01 LD (HL),D     ; Write #REGd to *#REGhl.
 $CB02 INC HL        ; Increment #REGhl by one.
 $CB03 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $CB04 LD BC,$0006   ; {#REGhl+=#N($0006,$04,$04).
 $CB07 ADD HL,BC     ; }
 $CB08 POP BC        ; Restore #REGbc from the stack.
 $CB09 DJNZ $CAFD    ; Decrease counter by one and loop back to #R$CAFD until
                     ; counter is zero.
 $CB0B EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $CB0C DEC DE        ; {Decrease #REGde by two.
 $CB0D DEC DE        ; }
 $CB0E LD (HL),E     ; Write #REGe to *#REGhl.
 $CB0F INC HL        ; Increment #REGhl by one.
 $CB10 LD (HL),D     ; Write #REGd to *#REGhl.
 $CB11 RET           ; Return.

; Routine at CB12
c$CB12 JP $CB1E      ; Jump to #R$CB1E.
 $CB15 JP $CBF7      ; Jump to #R$CBF7.
 $CB18 JP $CC62      ; Jump to #R$CC62.
 $CB1B JP $CBC8      ; Jump to #R$CBC8.

; Routine at CB1E
;
; Used by the routines at #R$933F, #R$A15C, #R$AADC and #R$CB12.
c$CB1E PUSH AF         ; Stash #REGaf on the stack.
 $CB1F XOR A           ; {Write #N$00 to *#R$D009.
 $CB20 LD ($D009),A    ; }
 $CB23 POP AF          ; Restore #REGaf from the stack.
 $CB24 LD C,A          ; {Multiply #REGa by #N$06 and store the result in
 $CB25 ADD A,A         ; #REGc.
 $CB26 ADD A,C         ;
 $CB27 ADD A,A         ;
 $CB28 LD C,A          ; }
 $CB29 LD B,$00        ; #REGb=#N$00.
 $CB2B LD HL,$D00A     ; #REGhl=#R$D00A.
 $CB2E ADD HL,BC       ; #REGhl+=#REGbc.
 $CB2F LD IX,$CB6B     ; #REGix=#R$CB6B.
 $CB33 LD C,$1F        ; #REGc=#N$1F.
 $CB35 LD A,$03        ; #REGa=#N$03.
*$CB37 LD E,(HL)       ; #REGe=*#REGhl.
 $CB38 INC HL          ; Increment #REGhl by one.
 $CB39 LD D,(HL)       ; #REGd=*#REGhl.
 $CB3A INC HL          ; Increment #REGhl by one.
 $CB3B PUSH HL         ; Stash #REGhl on the stack.
 $CB3C LD (IX+$10),$01 ; Write #N$01 to *#REGix+#N$10.
 $CB40 LD (IX+$00),B   ; Write #REGb to *#REGix+#N$00.
 $CB43 LD (IX+$1D),B   ; Write #REGb to *#REGix+#N$1D.
 $CB46 LD (IX+$03),E   ; Write #REGe to *#REGix+#N$03.
 $CB49 LD (IX+$04),D   ; Write #REGd to *#REGix+#N$04.
 $CB4C EX DE,HL        ; Exchange the #REGde and #REGhl registers.
 $CB4D LD E,(HL)       ; #REGe=*#REGhl.
 $CB4E INC HL          ; Increment #REGhl by one.
 $CB4F LD D,(HL)       ; #REGd=*#REGhl.
 $CB50 LD (IX+$05),$02 ; Write #N$02 to *#REGix+#N$05.
 $CB54 LD (IX+$06),B   ; Write #REGb to *#REGix+#N$06.
 $CB57 POP HL          ; Restore #REGhl from the stack.
 $CB58 LD (IX+$01),E   ; Write #REGe to *#REGix+#N$01.
 $CB5B LD (IX+$02),D   ; Write #REGd to *#REGix+#N$02.
 $CB5E ADD IX,BC       ; #REGix+=#REGbc.
 $CB60 DEC A           ; Decrease #REGa by one.
 $CB61 JR NZ,$CB37     ; Jump to #R$CB37 if #REGa is not equal to #N$03.
 $CB63 INC A           ; Increment #REGa by one.
 $CB64 LD ($CC84),A    ; Write #REGa to *#R$CC84.
 $CB67 LD ($D009),A    ; Write #REGa to *#R$D009.
 $CB6A RET             ; Return.

; Data block at CB6B
b$CB6B DEFB $00,$00,$00
 $CB6E DEFB $00
 $CB6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CB77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CB7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CB87 DEFB $00,$00,$09
 $CB8A DEFB $00,$00,$00
 $CB8D DEFB $00
 $CB8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CB96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CB9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CBA6 DEFB $00,$00,$12
 $CBA9 DEFB $00,$00,$00
 $CBAC DEFB $00
 $CBAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CBB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CBBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $CBC5 DEFB $00,$00,$24

; Routine at CBC8
;
; Used by the routines at #R$A15C and #R$CB12.
c$CBC8 LD A,$01      ; {Write #N$01 to *#R$D009.
 $CBCA LD ($D009),A  ; }
 $CBCD RET           ; Return.

; Routine at CBCE
c$CBCE LD C,A        ; {Multiply #REGa by #N$06 and store the result in #REGc.
 $CBCF ADD A,A       ;
 $CBD0 ADD A,C       ;
 $CBD1 ADD A,A       ;
 $CBD2 LD C,A        ; }
 $CBD3 LD B,$00      ; #REGb=#N$00.
 $CBD5 LD HL,$D00A   ; #REGhl=#R$D00A.
 $CBD8 ADD HL,BC     ; #REGhl+=#REGbc.
 $CBD9 LD A,(HL)     ; {Write *#REGhl to *#R$CB6E.
 $CBDA LD ($CB6E),A  ; }
 $CBDD INC HL        ; Increment #REGhl by one.
 $CBDE LD A,(HL)     ; {Write *#REGhl to *#R$CB6F.
 $CBDF LD ($CB6F),A  ; }
 $CBE2 INC HL        ; Increment #REGhl by one.
 $CBE3 LD A,(HL)     ; {Write *#REGhl to *#R$CB8D.
 $CBE4 LD ($CB8D),A  ; }
 $CBE7 INC HL        ; Increment #REGhl by one.
 $CBE8 LD A,(HL)     ; {Write *#REGhl to *#R$CB8E.
 $CBE9 LD ($CB8E),A  ; }
 $CBEC INC HL        ; Increment #REGhl by one.
 $CBED LD A,(HL)     ; {Write *#REGhl to *#R$CBAC.
 $CBEE LD ($CBAC),A  ; }
 $CBF1 INC HL        ; Increment #REGhl by one.
 $CBF2 LD A,(HL)     ; {Write *#REGhl to *#R$CBAD.
 $CBF3 LD ($CBAD),A  ; }
 $CBF6 RET           ; Return.

; Routine at CBF7
;
; Used by the routines at #R$95ED and #R$CB12.
c$CBF7 LD A,($D009)  ; {Return if *#R$D009 is zero.
 $CBFA AND A         ;
 $CBFB RET Z         ; }
 $CBFC LD A,$00      ; {Write #N$00 to *#R$CC49(#N$CC4A).
 $CBFE LD ($CC4A),A  ; }
 $CC01 LD HL,$CC84   ; #REGhl=#R$CC84.
 $CC04 DEC (HL)      ; Decrease *#REGhl by one.
 $CC05 JR NZ,$CC22   ; Jump to #R$CC22 if *#REGhl is not equal to #N$00.
 $CC07 LD B,(HL)     ; #REGb=*#REGhl.
 $CC08 LD IX,$CB6B   ; #REGix=#R$CB6B.
 $CC0C CALL $CD4A    ; Call #R$CD4A.
 $CC0F LD IX,$CB8A   ; #REGix=#R$CB8A.
 $CC13 CALL $CD4A    ; Call #R$CD4A.
 $CC16 LD IX,$CBA9   ; #REGix=#R$CBA9.
 $CC1A CALL $CD4A    ; Call #R$CD4A.
 $CC1D LD HL,$CC84   ; #REGhl=#R$CC84.
 $CC20 LD (HL),$01   ; Write #N$01 to *#REGhl.
*$CC22 LD IX,$CB6B   ; #REGix=#R$CB6B.
 $CC26 CALL $CDEC    ; Call #R$CDEC.
 $CC29 LD ($CEFD),HL ; Write #REGhl to *#R$CEFD.
 $CC2C LD ($CF05),A  ; Write #REGa to *#R$CF05.
 $CC2F LD IX,$CB8A   ; #REGix=#R$CB8A.
 $CC33 CALL $CDEC    ; Call #R$CDEC.
 $CC36 LD ($CEFF),HL ; Write #REGhl to *#R$CEFF.
 $CC39 LD ($CF06),A  ; Write #REGa to *#R$CF06.
 $CC3C LD IX,$CBA9   ; #REGix=#R$CBA9.
 $CC40 CALL $CDEC    ; Call #R$CDEC.
 $CC43 LD ($CF01),HL ; Write #REGhl to *#R$CF01.
 $CC46 LD ($CF07),A  ; Write #REGa to *#R$CF07.
 $CC49 LD A,$00      ; {Write #N$00 to *#R$CF03.
 $CC4B LD ($CF03),A  ; }
 $CC4E LD HL,$CF0A   ; #REGhl=#R$CF0A.
 $CC51 LD A,$0D      ; #REGa=#N$0D.
 $CC53 LD C,$FD      ; #REGc=#N$FD.
*$CC55 LD B,$FF      ; #REGb=#N$FF.
 $CC57 OUT (C),A     ; Send #REGa to port *#REGc.
 $CC59 LD B,$BF      ; #REGb=#N$BF.
 $CC5B OUTD          ; OUTD.
 $CC5D DEC A         ; Decrease #REGa by one.
 $CC5E JP P,$CC55    ; Jump to #R$CC55 if #REGa is greater than or equal to
                     ; #REGa.
 $CC61 RET           ; Return.

; Initialise AY Sound
;
; Used by the routines at #R$9D42, #R$AADC and #R$CB12.
@label=Initialise_AYSound
c$CC62 XOR A         ; #REGa=#N$00.
 $CC63 LD ($D009),A  ; Write #REGa to *#R$D009.
; This entry point is used by the routine at #R$CC84.
*$CC66 LD C,$FD      ; Set the port number for the AY sound in #REGc (#N$FD).
 $CC68 LD DE,$0D00   ; #REGde=#N($0D00,$04,$04).
 $CC6B SUB A         ; #REGa-=#REGa.
*$CC6C LD B,$FF      ; Select the register port.
 $CC6E OUT (C),D     ; Select register.
 $CC70 LD B,$BF      ; Set the data port in #REGb (#N$BF).
 $CC72 OUT (C),A     ; Write zero to the register.
 $CC74 DEC D         ; Decrease #REGd by one.
 $CC75 JP P,$CC6C    ; Jump back to #R$CC6C if #REGd is greater than or equal
                     ; to #N$00.
; Set mixer control.
 $CC78 LD DE,$073F   ; #REGde=#N($073F,$04,$04).
 $CC7B LD B,$FF      ; #REGb=#N$FF.
 $CC7D OUT (C),D     ; Select mixer register.
 $CC7F LD B,$BF      ; Set the data port in #REGb (#N$BF).
 $CC81 OUT (C),E     ; Set mixer state.
 $CC83 RET           ; Return.

; Routine at CC84
c$CC84 NOP             ;
 $CC85 CP H            ;
 $CC86 AND H           ;
 $CC87 XOR B           ;
 $CC88 XOR L           ;
 $CC89 LD L,E          ;
 $CC8A SBC A,D         ;
 $CC8B SUB L           ;
 $CC8C DJNZ $CC12      ;
 $CC8E LD A,H          ;
 $CC8F LD C,D          ;
 $CC90 ADD HL,SP       ;
 $CC91 LD E,B          ;
 $CC92 XOR C           ;
 $CC93 LD BC,$32AF     ;
 $CC96 ADD HL,BC       ;
 $CC97 RET NC          ;
 $CC98 POP HL          ;
 $CC99 JP $CC66        ;
 $CC9C LD C,(IX+$05)   ;
 $CC9F LD B,(IX+$06)   ;
 $CCA2 LD L,(IX+$03)   ;
 $CCA5 LD H,(IX+$04)   ;
 $CCA8 ADD HL,BC       ;
 $CCA9 INC BC          ;
 $CCAA INC BC          ;
 $CCAB LD A,(HL)       ;
 $CCAC INC HL          ;
 $CCAD LD D,(HL)       ;
 $CCAE LD E,A          ;
 $CCAF OR D            ;
 $CCB0 JR NZ,$CCBE     ;
 $CCB2 LD L,(IX+$03)   ;
 $CCB5 LD H,(IX+$04)   ;
 $CCB8 LD BC,$0002     ;
 $CCBB LD E,(HL)       ;
 $CCBC INC HL          ;
 $CCBD LD D,(HL)       ;
*$CCBE LD (IX+$05),C   ;
 $CCC1 LD (IX+$06),B   ;
 $CCC4 LD B,$00        ;
 $CCC6 JP $CD58        ;
 $CCC9 LD A,(IX+$1E)   ;
 $CCCC LD C,A          ;
 $CCCD AND $07         ;
 $CCCF LD HL,$CEE2     ;
 $CCD2 XOR (HL)        ;
 $CCD3 AND C           ;
 $CCD4 XOR (HL)        ;
 $CCD5 LD (HL),A       ;
 $CCD6 JP $CD58        ;
 $CCD9 LD A,(IX+$1E)   ;
 $CCDC LD C,A          ;
 $CCDD AND $38         ;
 $CCDF LD HL,$CEE2     ;
 $CCE2 XOR (HL)        ;
 $CCE3 AND C           ;
 $CCE4 XOR (HL)        ;
 $CCE5 LD (HL),A       ;
 $CCE6 JP $CD58        ;
 $CCE9 LD HL,$CEE2     ;
 $CCEC LD A,(IX+$1E)   ;
 $CCEF CPL             ;
 $CCF0 AND (HL)        ;
 $CCF1 LD (HL),A       ;
 $CCF2 JR $CD58        ;
 $CCF4 LD A,(DE)       ;
 $CCF5 INC DE          ;
 $CCF6 LD (IX+$07),B   ;
 $CCF9 LD (IX+$08),B   ;
 $CCFC LD (IX+$0D),A   ;
 $CCFF SET 2,(IX+$00)  ;
 $CD03 LD A,(DE)       ;
 $CD04 LD (IX+$0E),A   ;
 $CD07 INC DE          ;
 $CD08 JR $CD58        ;
 $CD0A LD A,(DE)       ;
 $CD0B INC DE          ;
 $CD0C LD ($CBFD),A    ;
 $CD0F JR $CD58        ;
 $CD11 LD A,(DE)       ;
 $CD12 LD (IX+$1B),A   ;
 $CD15 INC DE          ;
 $CD16 LD A,(DE)       ;
 $CD17 LD (IX+$1A),A   ;
 $CD1A INC DE          ;
 $CD1B LD (IX+$1C),A   ;
 $CD1E JR $CD58        ;
 $CD20 SET 7,(IX+$00)  ;
 $CD24 SET 3,(IX+$00)  ;
 $CD28 JR $CD58        ;
 $CD2A LD (IX+$1D),B   ;
 $CD2D JR $CD58        ;
 $CD2F LD (IX+$1D),$40 ;
 $CD33 JR $CD58        ;
 $CD35 LD (IX+$1D),$C0 ;
 $CD39 JR $CD58        ;
 $CD3B SET 1,(IX+$00)  ;
 $CD3F JR $CD58        ;
 $CD41 LD (IX+$13),B   ;
 $CD44 RES 5,(IX+$00)  ;
 $CD48 JR $CD7B        ;
; This entry point is used by the routine at #R$CBF7.
*$CD4A DEC (IX+$10)    ;
 $CD4D JR NZ,$CD88     ;
 $CD4F LD (IX+$00),B   ;
 $CD52 LD E,(IX+$01)   ;
 $CD55 LD D,(IX+$02)   ;
*$CD58 LD A,(DE)       ;
 $CD59 INC DE          ;
 $CD5A AND A           ;
 $CD5B JP M,$CD99      ;
 $CD5E LD (IX+$12),A   ;
 $CD61 LD A,(IX+$19)   ;
 $CD64 LD (IX+$13),A   ;
 $CD67 SET 5,(IX+$00)  ;
 $CD6B SET 6,(IX+$00)  ;
 $CD6F LD A,(IX+$14)   ;
 $CD72 LD (IX+$16),A   ;
 $CD75 LD A,(IX+$17)   ;
 $CD78 LD (IX+$18),A   ;
*$CD7B LD A,(IX+$11)   ;
 $CD7E LD (IX+$10),A   ;
 $CD81 LD (IX+$02),D   ;
 $CD84 LD (IX+$01),E   ;
 $CD87 RET             ;
*$CD88 LD A,(IX+$00)   ;
 $CD8B BIT 3,A         ;
 $CD8D RET Z           ;
 $CD8E RLA             ;
 $CD8F JR NC,$CD95     ;
 $CD91 INC (IX+$12)    ;
 $CD94 RET             ;
*$CD95 DEC (IX+$12)    ;
 $CD98 RET             ;
*$CD99 CP $B8          ;
 $CD9B JR C,$CDE4      ;
 $CD9D ADD A,$20       ;
 $CD9F JR C,$CDC9      ;
 $CDA1 ADD A,$10       ;
 $CDA3 JR C,$CDCF      ;
 $CDA5 ADD A,$10       ;
 $CDA7 JR NC,$CDC2     ;
 $CDA9 LD C,A          ;
 $CDAA LD HL,$CFCB     ;
 $CDAD ADD HL,BC       ;
 $CDAE LD C,(HL)       ;
 $CDAF ADD HL,BC       ;
 $CDB0 LD (IX+$0B),L   ;
 $CDB3 LD (IX+$09),L   ;
 $CDB6 LD (IX+$0C),H   ;
 $CDB9 LD (IX+$0A),H   ;
 $CDBC SET 4,(IX+$00)  ;
 $CDC0 JR $CD58        ;
*$CDC2 ADD A,$09       ;
 $CDC4 LD ($CC21),A    ;
 $CDC7 JR $CD58        ;
*$CDC9 INC A           ;
 $CDCA LD (IX+$11),A   ;
 $CDCD JR $CD58        ;
*$CDCF LD (IX+$19),A   ;
 $CDD2 LD A,(DE)       ;
 $CDD3 INC DE          ;
 $CDD4 LD (IX+$14),A   ;
 $CDD7 LD A,(DE)       ;
 $CDD8 INC DE          ;
 $CDD9 LD (IX+$15),A   ;
 $CDDC LD A,(DE)       ;
 $CDDD INC DE          ;
 $CDDE LD (IX+$17),A   ;
 $CDE1 JP $CD58        ;
*$CDE4 LD HL,$CC05     ;
 $CDE7 LD C,A          ;
 $CDE8 ADD HL,BC       ;
 $CDE9 LD C,(HL)       ;
 $CDEA ADD HL,BC       ;
 $CDEB JP (HL)         ;
; This entry point is used by the routine at #R$CBF7.
*$CDEC LD C,(IX+$00)   ;
 $CDEF BIT 5,C         ;
 $CDF1 JR Z,$CE37      ;
 $CDF3 LD A,(IX+$16)   ;
 $CDF6 SUB $10         ;
 $CDF8 JR NC,$CE1F     ;
 $CDFA BIT 6,C         ;
 $CDFC JR Z,$CE24      ;
 $CDFE ADD A,(IX+$13)  ;
 $CE01 JR NC,$CE04     ;
 $CE03 SBC A,A         ;
*$CE04 ADD A,$10       ;
 $CE06 LD (IX+$13),A   ;
 $CE09 LD A,(IX+$18)   ;
 $CE0C SUB $10         ;
 $CE0E JR NC,$CE1A     ;
 $CE10 RES 6,C         ;
 $CE12 LD A,(IX+$15)   ;
 $CE15 LD (IX+$16),A   ;
 $CE18 JR $CE37        ;
*$CE1A LD (IX+$18),A   ;
 $CE1D JR $CE37        ;
*$CE1F LD (IX+$16),A   ;
 $CE22 JR $CE37        ;
*$CE24 CPL             ;
 $CE25 SUB $0F         ;
 $CE27 ADD A,(IX+$13)  ;
 $CE2A JR C,$CE2D      ;
 $CE2C SUB A           ;
*$CE2D LD (IX+$13),A   ;
 $CE30 DEC (IX+$18)    ;
 $CE33 JR NZ,$CE37     ;
 $CE35 RES 5,C         ;
*$CE37 LD A,(IX+$12)   ;
 $CE3A BIT 4,C         ;
 $CE3C JR Z,$CE59      ;
 $CE3E LD B,A          ;
 $CE3F LD L,(IX+$0B)   ;
 $CE42 LD H,(IX+$0C)   ;
 $CE45 LD A,(HL)       ;
 $CE46 CP $54          ;
 $CE48 JR C,$CE51      ;
 $CE4A LD L,(IX+$09)   ;
 $CE4D LD H,(IX+$0A)   ;
 $CE50 LD A,(HL)       ;
*$CE51 INC HL          ;
 $CE52 LD (IX+$0B),L   ;
 $CE55 LD (IX+$0C),H   ;
 $CE58 ADD A,B         ;
*$CE59 LD HL,$CF0B     ;
 $CE5C LD D,$00        ;
 $CE5E ADD A,A         ;
 $CE5F LD E,A          ;
 $CE60 ADD HL,DE       ;
 $CE61 LD E,(HL)       ;
 $CE62 INC HL          ;
 $CE63 LD D,(HL)       ;
 $CE64 LD L,(IX+$1D)   ;
 $CE67 BIT 6,L         ;
 $CE69 JR Z,$CEB3      ;
 $CE6B LD H,A          ;
 $CE6C LD B,(IX+$1A)   ;
 $CE6F SLA B           ;
 $CE71 BIT 7,L         ;
 $CE73 LD A,(IX+$1C)   ;
 $CE76 JR Z,$CE7C      ;
 $CE78 BIT 0,C         ;
 $CE7A JR NZ,$CE9A     ;
*$CE7C BIT 5,L         ;
 $CE7E JR NZ,$CE8C     ;
 $CE80 SUB (IX+$1B)    ;
 $CE83 JR NC,$CE97     ;
 $CE85 SET 5,(IX+$1D)  ;
 $CE89 SUB A           ;
 $CE8A JR $CE97        ;
*$CE8C ADD A,(IX+$1B)  ;
 $CE8F CP B            ;
 $CE90 JR C,$CE97      ;
 $CE92 RES 5,(IX+$1D)  ;
 $CE96 LD A,B          ;
*$CE97 LD (IX+$1C),A   ;
*$CE9A EX DE,HL        ;
 $CE9B SRL B           ;
 $CE9D SUB B           ;
 $CE9E LD E,A          ;
 $CE9F LD A,D          ;
 $CEA0 LD D,$00        ;
 $CEA2 JR NC,$CEA5     ;
 $CEA4 DEC D           ;
*$CEA5 ADD A,$A0       ;
 $CEA7 JR C,$CEB1      ;
*$CEA9 SLA E           ;
 $CEAB RL D            ;
 $CEAD ADD A,$18       ;
 $CEAF JR NC,$CEA9     ;
*$CEB1 ADD HL,DE       ;
 $CEB2 EX DE,HL        ;
*$CEB3 LD A,C          ;
 $CEB4 XOR $01         ;
 $CEB6 LD (IX+$00),A   ;
 $CEB9 BIT 2,C         ;
 $CEBB JR Z,$CEDE      ;
 $CEBD LD B,(IX+$0E)   ;
 $CEC0 DJNZ $CEDB      ;
 $CEC2 LD C,(IX+$0D)   ;
 $CEC5 BIT 7,C         ;
 $CEC7 JR Z,$CECA      ;
 $CEC9 DEC B           ;
*$CECA LD L,(IX+$07)   ;
 $CECD LD H,(IX+$08)   ;
 $CED0 ADD HL,BC       ;
 $CED1 LD (IX+$07),L   ;
 $CED4 LD (IX+$08),H   ;
 $CED7 ADD HL,DE       ;
 $CED8 EX DE,HL        ;
 $CED9 JR $CEDE        ;
*$CEDB LD (IX+$0E),B   ;
*$CEDE CPL             ;
 $CEDF AND $03         ;
 $CEE1 LD A,$38        ;
 $CEE3 JR NZ,$CEEF     ;
 $CEE5 LD A,($CBFD)    ;
 $CEE8 XOR $08         ;
 $CEEA LD ($CC4A),A    ;
 $CEED LD A,$07        ;
*$CEEF LD HL,$CF04     ;
 $CEF2 XOR (HL)        ;
 $CEF3 AND (IX+$1E)    ;
 $CEF6 XOR (HL)        ;
 $CEF7 LD (HL),A       ;
 $CEF8 EX DE,HL        ;
 $CEF9 LD A,(IX+$13)   ;
 $CEFC RET             ;

; Data block at CEFD
b$CEFD DEFB $00,$00

; Data block at CEFF
b$CEFF DEFB $00,$00

; Data block at CF01
b$CF01 DEFB $00,$00

; Data block at CF03
b$CF03 DEFB $00,$38

; Data block at CF05
b$CF05 DEFB $0F

; Data block at CF06
b$CF06 DEFB $0F

; Data block at CF07
b$CF07 DEFB $0D,$00,$00

; Data block at CF0A
b$CF0A DEFB $00,$F0,$1D,$20,$1C,$C0,$1A,$00
 $CF12 DEFB $19,$B0,$17,$50,$16,$10,$15,$E0
 $CF1A DEFB $13,$C0,$12,$C0,$11,$B0,$10,$C0
 $CF22 DEFB $0F,$F8,$0E,$10,$0E,$60,$0D,$80
 $CF2A DEFB $0C,$D8,$0B,$28,$0B,$88,$0A,$F0
 $CF32 DEFB $09,$60,$09,$E0,$08,$58,$08,$E0
 $CF3A DEFB $07,$7C,$07,$08,$07,$B0,$06,$40
 $CF42 DEFB $06,$EC,$05,$94,$05,$44,$05,$F8
 $CF4A DEFB $04,$B0,$04,$70,$04,$2C,$04,$F0
 $CF52 DEFB $03,$BE,$03,$84,$03,$58,$03,$20
 $CF5A DEFB $03,$F6,$02,$CA,$02,$A2,$02,$7C
 $CF62 DEFB $02,$58,$02,$38,$02,$16,$02,$F8
 $CF6A DEFB $01,$DF,$01,$C2,$01,$AC,$01,$90
 $CF72 DEFB $01,$7B,$01,$65,$01,$51,$01,$3E
 $CF7A DEFB $01,$2C,$01,$1C,$01,$0B,$01,$FC
 $CF82 DEFB $00,$EF,$00,$E1,$00,$D6,$00,$C8
 $CF8A DEFB $00,$BD,$00,$B2,$00,$A8,$00,$9F
 $CF92 DEFB $00,$96,$00,$8E,$00,$85,$00,$7E
 $CF9A DEFB $00,$77,$00,$70,$00,$6B,$00,$64
 $CFA2 DEFB $00,$5E,$00,$59,$00,$54,$00,$4F
 $CFAA DEFB $00,$4B,$00,$47,$00,$42,$00,$3F
 $CFB2 DEFB $00,$3B,$00,$38,$00,$35,$00,$32
 $CFBA DEFB $00,$2F,$00,$2C,$00,$2A,$00,$27
 $CFC2 DEFB $00,$25,$00,$23,$00,$21,$00,$1F
 $CFCA DEFB $00,$0D,$10,$13,$17,$1B,$1E,$21
 $CFD2 DEFB $24,$27,$29,$2B,$2D,$2F,$00,$03
 $CFDA DEFB $07,$87,$00,$04,$07,$87,$00,$03
 $CFE2 DEFB $07,$0C,$87,$00,$04,$07,$0C,$87
 $CFEA DEFB $07,$0C,$0F,$87,$07,$0C,$10,$87
 $CFF2 DEFB $03,$07,$0C,$87,$04,$07,$0C,$87
 $CFFA DEFB $00,$0C,$87,$00,$04,$87,$00,$03
 $D002 DEFB $87,$00,$05,$87,$00,$07,$87

; Data block at D009
b$D009 DEFB $00

; Data block at D00A
;
; .
;
; .
;
; #N((#PC-$D00A)/$06).
w$D00A DEFW $D016
 $D00C DEFW $D030
 $D00E DEFW $D04A
; #N((#PC-$D00A)/$06).
 $D010 DEFW $D064
 $D012 DEFW $D068
 $D014 DEFW $D06C
; Data?
 $D016 DEFW $D070
 $D018 DEFW $D0EA
 $D01A DEFW $D070
 $D01C DEFW $D0EA
 $D01E DEFW $D15F
 $D020 DEFW $D1C0
 $D022 DEFW $D15F
 $D024 DEFW $D1C0
 $D026 DEFW $D070
 $D028 DEFW $D0EA
 $D02A DEFW $D070
 $D02C DEFW $D0EA
 $D02E DEFW $0000
; Data?
 $D030 DEFW $D221
 $D032 DEFW $D256
 $D034 DEFW $D221
 $D036 DEFW $D256
 $D038 DEFW $D287
 $D03A DEFW $D2B8
 $D03C DEFW $D287
 $D03E DEFW $D2B8
 $D040 DEFW $D221
 $D042 DEFW $D256
 $D044 DEFW $D221
 $D046 DEFW $D256
 $D048 DEFW $0000
; Data?
 $D04A DEFW $D2E9
 $D04C DEFW $D31A
 $D04E DEFW $D2E9
 $D050 DEFW $D31A
 $D052 DEFW $D34B
 $D054 DEFW $D370
 $D056 DEFW $D34B
 $D058 DEFW $D370
 $D05A DEFW $D395
 $D05C DEFW $D395
 $D05E DEFW $D395
 $D060 DEFW $D395
 $D062 DEFW $0000
; Data?
 $D064 DEFW $D39D
 $D066 DEFW $0000
; Data?
 $D068 DEFW $D3C7
 $D06A DEFW $0000
; Data?
 $D06C DEFW $D3E6
 $D06E DEFW $0000
 $D070 DEFW $88BD
 $D072 DEFW $0402
 $D074 DEFW $DF82
 $D076 DEFW $5100
 $D078 DEFW $8A07
 $D07A DEFW $18E1
 $D07C DEFW $00DF
 $D07E DEFW $0703
 $D080 DEFW $E08B
 $D082 DEFW $0189
 $D084 DEFW $0000
 $D086 DEFW $00DF
 $D088 DEFW $0761
 $D08A DEFW $E18A
 $D08C DEFW $DF13
 $D08E DEFW $0200
 $D090 DEFW $8B07
 $D092 DEFW $89E0
 $D094 DEFW $0001
 $D096 DEFW $DF00
 $D098 DEFW $6100
 $D09A DEFW $8A07
 $D09C DEFW $18E1
 $D09E DEFW $00DF
 $D0A0 DEFW $0702
 $D0A2 DEFW $E08B
 $D0A4 DEFW $0189
 $D0A6 DEFW $0000
 $D0A8 DEFW $00DF
 $D0AA DEFW $0761
 $D0AC DEFW $E18A
 $D0AE DEFW $DF13
 $D0B0 DEFW $0200
 $D0B2 DEFW $8B07
 $D0B4 DEFW $89E0
 $D0B6 DEFW $0001
 $D0B8 DEFW $DF00
 $D0BA DEFW $6100
 $D0BC DEFW $8A07
 $D0BE DEFW $18E1
 $D0C0 DEFW $00DF
 $D0C2 DEFW $0702
 $D0C4 DEFW $E08B
 $D0C6 DEFW $0189
 $D0C8 DEFW $0000
 $D0CA DEFW $00DF
 $D0CC DEFW $0761
 $D0CE DEFW $E18A
 $D0D0 DEFW $DF13
 $D0D2 DEFW $0200
 $D0D4 DEFW $8B07
 $D0D6 DEFW $89E0
 $D0D8 DEFW $0001
 $D0DA DEFW $DF00
 $D0DC DEFW $6100
 $D0DE DEFW $8A07
 $D0E0 DEFW $18E1
 $D0E2 DEFW $18E0
 $D0E4 DEFW $1724
 $D0E6 DEFW $1623
 $D0E8 DEFW $8722
 $D0EA DEFW $00DF
 $D0EC DEFW $0761
 $D0EE DEFW $E18A
 $D0F0 DEFW $DF15
 $D0F2 DEFW $0200
 $D0F4 DEFW $8B07
 $D0F6 DEFW $89E0
 $D0F8 DEFW $0001
 $D0FA DEFW $DF00
 $D0FC DEFW $6100
 $D0FE DEFW $8A07
 $D100 DEFW $10E1
 $D102 DEFW $00DF
 $D104 DEFW $0702
 $D106 DEFW $E08B
 $D108 DEFW $0189
 $D10A DEFW $0000
 $D10C DEFW $00DF
 $D10E DEFW $0761
 $D110 DEFW $E18A
 $D112 DEFW $DF15
 $D114 DEFW $0200
 $D116 DEFW $8B07
 $D118 DEFW $89E0
 $D11A DEFW $0001
 $D11C DEFW $DF00
 $D11E DEFW $6100
 $D120 DEFW $8A07
 $D122 DEFW $10E1
 $D124 DEFW $00DF
 $D126 DEFW $0702
 $D128 DEFW $E08B
 $D12A DEFW $0189
 $D12C DEFW $0000
 $D12E DEFW $00DF
 $D130 DEFW $0761
 $D132 DEFW $E18A
 $D134 DEFW $DF15
 $D136 DEFW $0200
 $D138 DEFW $8B07
 $D13A DEFW $89E0
 $D13C DEFW $0001
 $D13E DEFW $DF00
 $D140 DEFW $6100
 $D142 DEFW $8A07
 $D144 DEFW $10E1
 $D146 DEFW $00DF
 $D148 DEFW $0702
 $D14A DEFW $E08B
 $D14C DEFW $0189
 $D14E DEFW $0000
 $D150 DEFW $00DF
 $D152 DEFW $0761
 $D154 DEFW $E18A
 $D156 DEFW $E015
 $D158 DEFW $2115
 $D15A DEFW $2216
 $D15C DEFW $2317
 $D15E DEFW $DF87
 $D160 DEFW $6100
 $D162 DEFW $8A07
 $D164 DEFW $13E1
 $D166 DEFW $00DF
 $D168 DEFW $0702
 $D16A DEFW $E08B
 $D16C DEFW $0189
 $D16E DEFW $0000
 $D170 DEFW $00DF
 $D172 DEFW $0761
 $D174 DEFW $E18A
 $D176 DEFW $DF0E
 $D178 DEFW $0200
 $D17A DEFW $8B07
 $D17C DEFW $89E0
 $D17E DEFW $0001
 $D180 DEFW $DF00
 $D182 DEFW $6100
 $D184 DEFW $8A07
 $D186 DEFW $13E1
 $D188 DEFW $13E0
 $D18A DEFW $121F
 $D18C DEFW $101E
 $D18E DEFW $DF1C
 $D190 DEFW $6100
 $D192 DEFW $8A07
 $D194 DEFW $13E1
 $D196 DEFW $00DF
 $D198 DEFW $0702
 $D19A DEFW $E08B
 $D19C DEFW $0189
 $D19E DEFW $0000
 $D1A0 DEFW $00DF
 $D1A2 DEFW $0761
 $D1A4 DEFW $E18A
 $D1A6 DEFW $DF0E
 $D1A8 DEFW $0200
 $D1AA DEFW $8B07
 $D1AC DEFW $89E0
 $D1AE DEFW $0001
 $D1B0 DEFW $DF00
 $D1B2 DEFW $6100
 $D1B4 DEFW $8A07
 $D1B6 DEFW $13E1
 $D1B8 DEFW $10E0
 $D1BA DEFW $111C
 $D1BC DEFW $121D
 $D1BE DEFW $871E
 $D1C0 DEFW $00DF
 $D1C2 DEFW $0761
 $D1C4 DEFW $E18A
 $D1C6 DEFW $DF11
 $D1C8 DEFW $0200
 $D1CA DEFW $8B07
 $D1CC DEFW $89E0
 $D1CE DEFW $0001
 $D1D0 DEFW $DF00
 $D1D2 DEFW $6100
 $D1D4 DEFW $8A07
 $D1D6 DEFW $18E1
 $D1D8 DEFW $00DF
 $D1DA DEFW $0702
 $D1DC DEFW $E08B
 $D1DE DEFW $0189
 $D1E0 DEFW $0000
 $D1E2 DEFW $00DF
 $D1E4 DEFW $0761
 $D1E6 DEFW $E18A
 $D1E8 DEFW $E011
 $D1EA DEFW $1D11
 $D1EC DEFW $1C10
 $D1EE DEFW $1A0E
 $D1F0 DEFW $00DF
 $D1F2 DEFW $0761
 $D1F4 DEFW $E18A
 $D1F6 DEFW $DF11
 $D1F8 DEFW $0200
 $D1FA DEFW $8B07
 $D1FC DEFW $89E0
 $D1FE DEFW $0001
 $D200 DEFW $DF00
 $D202 DEFW $6100
 $D204 DEFW $8A07
 $D206 DEFW $18E1
 $D208 DEFW $00DF
 $D20A DEFW $0702
 $D20C DEFW $E08B
 $D20E DEFW $0189
 $D210 DEFW $0000
 $D212 DEFW $00DF
 $D214 DEFW $0761
 $D216 DEFW $E18A
 $D218 DEFW $E011
 $D21A DEFW $1A0E
 $D21C DEFW $1B0F
 $D21E DEFW $1C10
 $D220 DEFW $8A87
 $D222 DEFW $0288
 $D224 DEFW $8204
 $D226 DEFW $00DF
 $D228 DEFW $0711
 $D22A DEFW $24E1
 $D22C DEFW $C5E0
 $D22E DEFW $C524
 $D230 DEFW $E124
 $D232 DEFW $24C5
 $D234 DEFW $2BCC
 $D236 DEFW $24E1
 $D238 DEFW $C5E0
 $D23A DEFW $C524
 $D23C DEFW $E124
 $D23E DEFW $24C5
 $D240 DEFW $2BCC
 $D242 DEFW $24E1
 $D244 DEFW $C5E0
 $D246 DEFW $C524
 $D248 DEFW $E124
 $D24A DEFW $24C5
 $D24C DEFW $2BCC
 $D24E DEFW $00DF
 $D250 DEFW $0751
 $D252 DEFW $C7E7
 $D254 DEFW $8730
 $D256 DEFW $888A
 $D258 DEFW $0402
 $D25A DEFW $DF82
 $D25C DEFW $1100
 $D25E DEFW $E107
 $D260 DEFW $E021
 $D262 DEFW $21C5
 $D264 DEFW $21C5
 $D266 DEFW $C5E1
 $D268 DEFW $C121
 $D26A DEFW $E12D
 $D26C DEFW $E021
 $D26E DEFW $21C5
 $D270 DEFW $21C5
 $D272 DEFW $C5E1
 $D274 DEFW $C121
 $D276 DEFW $E12D
 $D278 DEFW $E021
 $D27A DEFW $21C5
 $D27C DEFW $21C5
 $D27E DEFW $C5E1
 $D280 DEFW $C121
 $D282 DEFW $E72D
 $D284 DEFW $2DC7
 $D286 DEFW $8A87
 $D288 DEFW $0288
 $D28A DEFW $8204
 $D28C DEFW $00DF
 $D28E DEFW $0711
 $D290 DEFW $1FE1
 $D292 DEFW $C5E0
 $D294 DEFW $C51F
 $D296 DEFW $E11F
 $D298 DEFW $1FC5
 $D29A DEFW $2BC1
 $D29C DEFW $1FE1
 $D29E DEFW $C5E0

; Data block at D2A0
b$D2A0 DEFB $1F,$C5,$1F,$E1,$C5,$1F,$C1,$2B
 $D2A8 DEFB $E1,$1F,$E0,$C5,$1F,$C5,$1F,$E1
 $D2B0 DEFB $C5,$1F,$C1,$2B,$E7,$C7,$2B,$87
 $D2B8 DEFB $8A,$88,$02,$04,$82,$DF,$00,$11
 $D2C0 DEFB $07,$E1,$1D,$E0,$C5,$1D,$C5,$1D
 $D2C8 DEFB $E1,$C5,$1D,$C1,$29,$E1,$1D,$E0
 $D2D0 DEFB $C5,$1D,$C5,$1D,$E1,$C5,$1D,$C1
 $D2D8 DEFB $29,$E1,$1D,$E0,$C5,$1D,$C5,$1D
 $D2E0 DEFB $E1,$C5,$1D,$C1,$29,$E7,$C7,$29
 $D2E8 DEFB $87,$8A,$88,$02,$04,$82,$DF,$00
 $D2F0 DEFB $51,$07,$E0,$3C,$39,$37,$E1,$3C
 $D2F8 DEFB $E0,$39,$E1,$37,$E0,$3C,$39,$37
 $D300 DEFB $E1,$3C,$E0,$39,$E1,$37,$E0,$C8
 $D308 DEFB $3C,$C8,$39,$C8,$37,$E1,$C8,$3C
 $D310 DEFB $E0,$C8,$37,$E1,$C8,$34,$E7,$C8
 $D318 DEFB $30,$87,$8A,$88,$02,$04,$82,$DF
 $D320 DEFB $00,$51,$07,$E0,$31,$2F,$2D,$E1
 $D328 DEFB $31,$E0,$2F,$E1,$2D,$E0,$31,$2F

; Data block at D330
b$D330 DEFB $2D,$E1,$31,$E0,$2F,$E1,$2D,$E0
 $D338 DEFB $C8,$31,$C8,$2F,$C8,$2D,$E1,$C8
 $D340 DEFB $31,$E0,$C8,$2F,$E1,$C8,$31,$E7
 $D348 DEFB $C8,$2D,$87,$8A,$88,$02,$04,$82
 $D350 DEFB $DF,$00,$71,$05,$E5,$37,$E1,$36
 $D358 DEFB $E5,$37,$E1,$36,$E0,$C8,$37,$C8
 $D360 DEFB $36,$C8,$34,$E1,$C8,$37,$E0,$C8
 $D368 DEFB $36,$E1,$C8,$34,$E7,$C8,$32,$87
 $D370 DEFB $8A,$88,$02,$04,$82,$DF,$00,$71
 $D378 DEFB $05,$E5,$35,$E1,$34,$E5,$35,$E1
 $D380 DEFB $34,$E0,$C8,$35,$C8,$34,$C8,$32
 $D388 DEFB $E1,$C8,$35,$E0,$C8,$34,$E1,$C8
 $D390 DEFB $32,$E7,$C8,$30,$87,$DF,$00,$F1
 $D398 DEFB $01,$EF,$80,$80,$87,$BD,$88,$02
 $D3A0 DEFB $04,$82,$DF,$00,$41,$05,$8A,$E1
 $D3A8 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $D3B0 DEFB $1F,$1F,$1F,$1F,$1F,$1F,$1F,$1F
 $D3B8 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $D3C0 DEFB $DF,$00,$F1,$04,$EF,$18,$87,$88
 $D3C8 DEFB $02,$04,$82,$DF,$00,$61,$05,$8A
 $D3D0 DEFB $E1,$24,$24,$EB,$24,$E1,$26,$26
 $D3D8 DEFB $EB,$26,$E1,$2B,$2B,$EB,$24,$DF
 $D3E0 DEFB $00,$F1,$05,$EF,$24,$87,$88,$02
 $D3E8 DEFB $04,$82,$DF,$00,$61,$05,$8A,$E1
 $D3F0 DEFB $27,$27,$EB,$29,$E1,$2A,$2A,$EB
 $D3F8 DEFB $2B,$E1,$2F,$2F,$EB,$30,$DF,$00
 $D400 DEFB $F1,$05,$EF,$C3,$30,$87,$00,$00
 $D408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D410 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D418 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D428 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D430 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D448 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D450 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D458 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D460 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D468 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D470 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D480 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D488 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D490 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D4A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D4A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D4B0 DEFB $00,$00,$00,$00,$00,$00,$DB,$02
 $D4B8 DEFB $4D,$00,$E8,$57,$00,$00,$77,$3E
 $D4C0 DEFB $F3,$0D,$CE,$0B,$EF,$50,$DB,$02
 $D4C8 DEFB $4D,$00,$F9,$56,$00,$00,$CE,$0B
 $D4D0 DEFB $FC,$50,$05,$17,$DC,$0A,$DB,$02
 $D4D8 DEFB $4D,$00,$DB,$02,$4D,$00,$F1,$5C
 $D4E0 DEFB $06,$03,$07,$5C,$C0,$57,$71,$0E
 $D4E8 DEFB $F3,$0D,$DB,$02,$4D,$00,$FF,$FF
 $D4F0 DEFB $0E,$01,$00,$00,$51,$00,$92,$09
 $D4F8 DEFB $3F,$05,$76,$1B,$03,$13,$00,$3E

; Speech Data
;
; Used by the routine at #R$CA7C.
@label=Data_Speech
b$D500 DEFB $00,$00,$07,$FE,$00,$07,$F8,$0E,$07,$E0,$01,$FF,$00,$1F,$F0,$3F,$07,$E0,$07,$FC,$00,$7F,$81,$FC,$0F,$00,$7F,$C0,$0F,$E0,$3F,$C1
 $D520 DEFB $E0,$1F,$F8,$07,$F0,$3F,$81,$F0,$0F,$C0,$03,$F0,$1F,$E0,$F8,$1F,$80,$07,$E0,$7F,$81,$F0,$3E,$00,$1F,$81,$FC,$07,$83,$E1,$E1,$F8
 $D540 DEFB $1F,$F0,$10,$7E,$24,$7F,$03,$FC,$00,$0F,$0C,$0F,$81,$FE,$0E,$07,$C2,$0F,$C0,$1F,$83,$03,$C3,$07,$E0,$0F,$87,$03,$C7,$07,$C0,$1F
 $D560 DEFB $80,$0F,$BC,$1F,$F0,$3F,$E0,$3C,$F0,$7F,$E0,$FF,$C0,$FF,$83,$BF,$02,$1E,$2E,$FC,$00,$F8,$01,$F0,$00,$7F,$F0,$FC,$00,$FC,$07,$F0
 $D580 DEFB $7F,$7E,$00,$38,$1F,$F8,$07,$F8,$00,$00,$8F,$E0,$07,$80,$0F,$02,$3F,$80,$7C,$1C,$00,$7F,$FF,$C0,$07,$C0,$87,$C7,$87,$8E,$1C,$3F
 $D5A0 DEFB $F8,$79,$E0,$0F,$C3,$9F,$80,$1E,$F0,$7E,$03,$F0,$03,$FF,$8F,$83,$FE,$00,$7C,$03,$F1,$FF,$C1,$07,$80,$3E,$2F,$F8,$5F,$E0,$0F,$83
 $D5C0 DEFB $BF,$06,$7C,$0F,$E0,$FF,$C1,$FF,$01,$FC,$1F,$F0,$7B,$E0,$FB,$07,$FC,$1F,$B0,$3E,$83,$FF,$03,$FD,$0D,$20,$FD,$81,$F6,$03,$C0,$7F
 $D5E0 DEFB $E0,$FD,$01,$F0,$3E,$F0,$7E,$C0,$F8,$1F,$F8,$3F,$E0,$3C,$07,$FC,$1F,$BC,$1E,$07,$BC,$0F,$94,$0F,$83,$DF,$07,$DE,$0F,$03,$CF,$03
 $D600 DEFB $CB,$0F,$83,$C7,$83,$FF,$03,$03,$C3,$83,$F2,$03,$07,$87,$83,$FE,$06,$0F,$DF,$07,$F8,$0C,$1F,$BE,$0F,$F8,$7C,$3E,$3C,$1F,$F0,$F0
 $D620 DEFB $7C,$78,$7F,$E0,$E0,$F9,$E0,$FF,$81,$C3,$C3,$C3,$9F,$03,$0F,$0F,$07,$1F,$0C,$1F,$00,$1F,$F8,$78,$7F,$F8,$37,$F0,$60,$FF,$E0,$0F
 $D640 DEFB $C0,$87,$87,$83,$0F,$DE,$1F,$FE,$00,$3F,$50,$7F,$F8,$01,$F8,$03,$E0,$FF,$E0,$7E,$00,$07,$FF,$C0,$F8,$00,$FF,$FF,$C0,$E0,$21,$F9
 $D660 DEFB $FF,$C0,$00,$0F,$FC,$7F,$08,$00,$3F,$3C,$FC,$00,$78,$3F,$F9,$FF,$00,$00,$7F,$C7,$FF,$00,$0F,$DF,$FF,$FF,$00,$0F,$E7,$FE,$1F,$80
 $D680 DEFB $1F,$C0,$FF,$03,$80,$07,$E0,$FE,$07,$00,$07,$F0,$FE,$00,$00,$03,$FE,$FE,$78,$00,$01,$FF,$FF,$E0,$00,$00,$7F,$FF,$F8,$00,$00,$7F
 $D6A0 DEFB $FF,$F8,$00,$1C,$1F,$FF,$FC,$00,$3F,$01,$FF,$80,$00,$00,$00,$7F,$FF,$C0,$00,$00,$3F,$FF,$FC,$00,$00,$3F,$F8,$3F,$E0,$00,$7F,$F0
 $D6C0 DEFB $7F,$C0,$00,$BF,$ED,$BF,$80,$01,$BF,$C0,$7F,$00,$07,$FC,$49,$FF,$20,$03,$FE,$01,$FE,$00,$03,$A2,$D2,$FD,$87,$80,$27,$C0,$FF,$81
 $D6E0 DEFB $6F,$06,$BC,$1C,$D8,$00,$DD,$59,$4F,$80,$49,$C1,$FF,$49,$EC,$01,$F4,$9B,$CD,$8C,$04,$02,$FE,$87,$FE,$00,$FF,$E0,$B6,$40,$E0,$FF
 $D700 DEFB $F0,$00,$79,$F1,$80,$1F,$0F,$FF,$F0,$F0,$B0,$C3,$FF,$0E,$04,$1F,$3E,$FB,$E0,$03,$EF,$9C,$3F,$E0,$F9,$C3,$0F,$3E,$1C,$F0,$C3,$C7
 $D720 DEFB $0F,$3C,$71,$E1,$83,$9E,$18,$78,$61,$CF,$84,$3C,$30,$E7,$C0,$1E,$18,$73,$E1,$0F,$1C,$39,$F0,$07,$8C,$1D,$F8,$07,$C4,$0F,$F8,$07
 $D740 DEFB $E0,$0F,$F8,$07,$F4,$0F,$F8,$07,$E0,$0F,$F0,$0F,$C0,$1F,$F0,$0F,$C0,$1F,$F0,$3F,$80,$3F,$E0,$7F,$00,$7F,$C0,$FE,$00,$FF,$03,$FC
 $D760 DEFB $01,$FE,$0F,$F0,$07,$F8,$1F,$E0,$1F,$E0,$7F,$80,$3F,$C1,$FE,$00,$FE,$0F,$F8,$07,$38,$3F,$C0,$3C,$60,$FF,$00,$F1,$83,$FC,$03,$C6
 $D780 DEFB $0F,$F0,$0F,$00,$3F,$C0,$3F,$C0,$FF,$00,$EF,$03,$F8,$03,$B8,$1F,$E0,$1D,$E0,$7F,$00,$77,$03,$FC,$03,$DC,$1F,$E0,$0E,$F0,$7F,$80
 $D7A0 DEFB $7B,$83,$FE,$01,$EE,$07,$F0,$07,$38,$3F,$C0,$1D,$E0,$BF,$20,$E7,$05,$F8,$03,$B8,$27,$C0,$1D,$C0,$3F,$00,$F7,$04,$F8,$03,$BC,$23
 $D7C0 DEFB $C0,$1D,$E0,$1F,$00,$FF,$00,$F8,$03,$F8,$07,$C0,$1F,$E0,$3F,$80,$FF,$01,$FF,$07,$F0,$0F,$F0,$1F,$80,$7F,$80,$FE,$07,$F8,$07,$F0
 $D7E0 DEFB $3F,$C0,$3F,$80,$7C,$01,$FC,$03,$EE,$1F,$E0,$1E,$E1,$CF,$30,$03,$00,$FF,$10,$31,$0F,$FC,$01,$E8,$1F,$80,$3F,$C0,$7F,$00,$FF,$00
 $D800 DEFB $F8,$07,$FC,$01,$E0,$1B,$F8,$00,$00,$4F,$E1,$C0,$00,$7F,$0F,$E0,$0F,$F8,$3F,$E0,$3F,$E0,$1F,$80,$7F,$00,$7F,$00,$FE,$01,$FE,$01
 $D820 DEFB $E0,$0F,$F0,$87,$08,$7B,$83,$38,$03,$FC,$0F,$E0,$1F,$E0,$1F,$80,$7F,$80,$FE,$01,$FE,$03,$F8,$0F,$F8,$1F,$C0,$3F,$C0,$FF,$01,$FE
 $D840 DEFB $07,$F8,$07,$F0,$1F,$E0,$3F,$80,$7F,$01,$FC,$03,$F8,$0F,$F0,$0F,$E0,$1F,$C0,$3F,$80,$7F,$80,$7F,$80,$7F,$01,$FC,$01,$FC,$0F,$F0
 $D860 DEFB $0F,$E0,$3F,$80,$7F,$81,$FE,$01,$F8,$0F,$F0,$0F,$C0,$7F,$80,$7F,$00,$FE,$01,$FC,$03,$F8,$07,$E0,$1F,$C0,$3F,$00,$FE,$01,$FC,$07
 $D880 DEFB $F0,$0F,$F0,$1F,$C0,$7F,$C0,$7F,$00,$FE,$01,$FE,$07,$F8,$0F,$F0,$0F,$C0,$3F,$C0,$FE,$03,$FE,$0F,$F0,$0F,$C0,$7F,$80,$FE,$01,$FE
 $D8A0 DEFB $03,$FC,$0F,$F0,$0F,$F0,$1F,$E0,$3F,$80,$7F,$81,$FE,$03,$FC,$07,$F0,$1F,$C0,$3F,$80,$FF,$80,$7E,$01,$FE,$01,$FC,$07,$F8,$07,$FC
 $D8C0 DEFB $03,$FC,$03,$F8,$0F,$F0,$07,$E0,$3F,$E0,$1F,$C0,$F8,$3F,$E0,$FF,$00,$FF,$81,$FE,$03,$FC,$03,$FC,$07,$F8,$0F,$E0,$1F,$F0,$1F,$C0
 $D8E0 DEFB $3F,$C0,$1F,$F0,$FF,$FE,$3F,$FF,$0F,$FC,$0F,$FC,$1F,$F0,$3F,$E0,$3F,$C0,$7F,$80,$FF,$01,$FC,$07,$FC,$07,$F0,$1F,$C0,$3F,$C0,$7E
 $D900 DEFB $01,$F9,$4F,$5C,$07,$01,$FF,$01,$F8,$03,$F8,$07,$F8,$07,$C0,$3F,$F0,$01,$E1,$7F,$C0,$0F,$F9,$FF,$80,$3F,$F0,$FF,$00,$7F,$C1,$FC
 $D920 DEFB $01,$FF,$00,$F1,$07,$FE,$03,$C4,$3F,$F0,$8F,$00,$FF,$C0,$7C,$03,$FF,$01,$F1,$0F,$FC,$0F,$C0,$3F,$F0,$3E,$00,$7B,$80,$F8,$03,$FE
 $D940 DEFB $07,$E2,$1F,$F8,$1F,$00,$7F,$C0,$FC,$03,$EC,$0F,$E0,$1F,$A0,$7F,$00,$FD,$03,$FC,$03,$F4,$1F,$C0,$1F,$60,$FE,$05,$FA,$07,$F0,$4F
 $D960 DEFB $90,$7F,$00,$FD,$03,$F8,$07,$FE,$0F,$98,$0F,$F8,$0F,$C0,$1F,$E0,$FE,$00,$FF,$07,$F0,$07,$F8,$3F,$C0,$1F,$F3,$FC,$01,$FF,$F3,$C0
 $D980 DEFB $1F,$FF,$0E,$38,$FF,$E0,$0F,$90,$FE,$01,$FB,$07,$C0,$1F,$E0,$FC,$03,$F6,$1F,$80,$3E,$C7,$F8,$E7,$08,$FF,$0E,$E1,$1F,$E1,$DE,$23
 $D9A0 DEFB $FC,$2B,$C0,$3F,$87,$78,$07,$F0,$AF,$00,$EE,$18,$E1,$1C,$C3,$9C,$23,$98,$63,$84,$63,$0C,$E1,$1C,$61,$9C,$23,$9C,$73,$84,$63,$8C
 $D9C0 DEFB $71,$9C,$61,$9C,$23,$8C,$33,$80,$73,$84,$F0,$0E,$E1,$9E,$03,$9C,$27,$80,$77,$0C,$F0,$1F,$E1,$3C,$03,$FC,$27,$00,$7F,$00,$FA,$0F
 $D9E0 DEFB $E0,$3F,$81,$FC,$0F,$F0,$1F,$81,$FE,$03,$E0,$3F,$C0,$7C,$46,$F8,$0F,$98,$CF,$31,$FA,$01,$F6,$3F,$50,$3F,$C6,$77,$03,$FC,$0E,$61
 $DA00 DEFB $3F,$C0,$F6,$73,$F8,$0E,$64,$7F,$80,$F7,$33,$FF,$0F,$23,$1D,$F1,$F8,$11,$DC,$CF,$E4,$77,$37,$F9,$99,$DC,$CE,$23,$73,$3B,$FE,$1E
 $DA20 DEFB $C4,$27,$E0,$BE,$00,$7E,$37,$C6,$67,$03,$FE,$07,$F0,$0F,$F8,$7F,$00,$FC,$07,$F0,$1C,$C0,$7C,$07,$F0,$6F,$00,$7F,$03,$F0,$1F,$C0
 $DA40 DEFB $3E,$03,$FC,$0F,$80,$7F,$80,$FC,$07,$E0,$0F,$E0,$FC,$03,$D8,$3F,$80,$F0,$0F,$F0,$1F,$01,$FC,$03,$E0,$3F,$80,$38,$07,$F0,$0E,$01
 $DA60 DEFB $FE,$1F,$C0,$1F,$C3,$FE,$03,$F8,$7F,$00,$FF,$07,$E0,$1F,$81,$FE,$01,$F8,$0F,$E0,$3F,$01,$FE,$07,$F0,$1F,$C0,$7F,$03,$F8,$03,$F0
 $DA80 DEFB $7F,$80,$3F,$9F,$FE,$00,$FF,$1F,$F0,$0F,$F3,$FE,$01,$FE,$7F,$F8,$07,$CC,$FF,$00,$F9,$0F,$F0,$1F,$71,$FE,$13,$C0,$7F,$80,$FC,$07
 $DAA0 DEFB $F0,$0F,$E0,$FF,$01,$FE,$03,$E0,$1F,$C0,$7E,$01,$FC,$0F,$C0,$1F,$80,$F8,$07,$F0,$3F,$00,$FE,$07,$E0,$1F,$C0,$FE,$03,$F8,$1F,$C0
 $DAC0 DEFB $3F,$80,$F8,$03,$F8,$07,$00,$7E,$0F,$C0,$1F,$01,$F0,$0F,$E0,$3F,$01,$FC,$07,$F0,$0F,$C0,$FF,$01,$F8,$1F,$C0,$3F,$03,$F8,$0F,$E0
 $DAE0 DEFB $7F,$01,$F8,$0F,$E0,$3F,$81,$FC,$07,$F0,$7F,$00,$FA,$0F,$E0,$3F,$C1,$FC,$03,$F0,$3F,$80,$7F,$07,$F0,$1F,$E0,$FE,$01,$F8,$1F,$C0
 $DB00 DEFB $3F,$87,$F8,$0F,$A0,$FF,$01,$F0,$1F,$C0,$3F,$01,$F8,$07,$F0,$3F,$80,$FC,$0F,$F0,$1F,$00,$7C,$07,$F0,$1F,$80,$7F,$07,$F0,$1F,$C0
 $DB20 DEFB $7E,$03,$FC,$0F,$E0,$3F,$C0,$FE,$01,$FF,$FF,$80,$00,$0F,$FC,$00,$11,$E0,$07,$FC,$C0,$1F,$FC,$01,$FF,$10,$27,$FF,$00,$FF,$80,$19
 $DB40 DEFB $FF,$8C,$3F,$C0,$1C,$FB,$CE,$3C,$E1,$0E,$F9,$87,$1A,$F0,$07,$78,$C7,$1C,$70,$87,$78,$C7,$1C,$F0,$07,$78,$47,$9C,$71,$0E,$70,$87
 $DB60 DEFB $1C,$61,$0E,$70,$87,$3C,$E1,$1E,$E1,$87,$38,$C3,$1D,$E1,$0F,$79,$C2,$3D,$C3,$8E,$7B,$C2,$3F,$C5,$CF,$73,$84,$3F,$84,$0E,$F3,$84
 $DB80 DEFB $3F,$88,$CE,$F3,$80,$3F,$A0,$CF,$79,$C0,$3B,$84,$67,$19,$C2,$19,$C0,$33,$9C,$E1,$0C,$E3,$19,$8F,$78,$06,$70,$8C,$63,$CE,$51,$9C
 $DBA0 DEFB $21,$0C,$73,$10,$F7,$B8,$01,$0E,$70,$0F,$FC,$01,$3D,$EC,$01,$DE,$02,$F9,$1E,$F2,$9C,$B5,$2F,$D8,$77,$90,$07,$F9,$0C,$47,$B8,$86
 $DBC0 DEFB $39,$08,$63,$1E,$C2,$18,$A4,$21,$26,$37,$BC,$03,$7B,$C6,$04,$3F,$00,$43,$FE,$80,$66,$39,$08,$43,$D8,$86,$F6,$1D,$84,$21,$78,$4A
 $DBE0 DEFB $78,$8C,$E7,$08,$42,$3F,$FC,$23,$F8,$00,$13,$FC,$07,$44,$3F,$BD,$C0,$33,$FC,$C0,$87,$F7,$00,$46,$33,$9C,$C6,$3F,$F8,$00,$7F,$F8
 $DC00 DEFB $07,$31,$9F,$E0,$21,$9C,$E6,$20,$03,$FF,$F4,$00,$3F,$FC,$00,$77,$FE,$80,$01,$FF,$18,$C2,$18,$D6,$F7,$18,$00,$0F,$F0,$01,$09,$FF
 $DC20 DEFB $00,$00,$CF,$FA,$00,$04,$FF,$79,$08,$C7,$33,$00,$0F,$C8,$03,$FF,$80,$07,$FF,$80,$1F,$C4,$3F,$F9,$00,$07,$FB,$00,$FF,$C0,$0B,$FF
 $DC40 DEFB $00,$00,$FF,$FC,$00,$09,$99,$FE,$40,$11,$DC,$C6,$7F,$90,$0E,$01,$FF,$FC,$00,$3F,$F0,$07,$FF,$00,$0D,$FF,$E1,$18,$00,$0F,$FF,$FE
 $DC60 DEFB $01,$F0,$1F,$EC,$03,$00,$0F,$F8,$00,$FF,$F8,$00,$7F,$F8,$00,$FF,$E0,$0F,$C0,$07,$FF,$00,$3F,$F8,$00,$3F,$F8,$00,$01,$80,$FF,$80
 $DC80 DEFB $1F,$F0,$03,$FE,$00,$0F,$F8,$03,$FF,$80,$01,$FF,$C0,$3E,$80,$03,$FF,$C0,$07,$FF,$E6,$3B,$80,$3F,$C0,$00,$19,$FF,$FC,$03,$FF,$F0
 $DCA0 DEFB $00,$FF,$E0,$03,$FF,$C0,$07,$FC,$07,$F0,$00,$FF,$C0,$18,$EF,$E0,$1F,$F8,$00,$FF,$31,$FF,$E3,$70,$1F,$E0,$1F,$F0,$00,$0F,$F8,$00
 $DCC0 DEFB $07,$FC,$01,$F8,$00,$FF,$80,$07,$FC,$00,$7F,$F8,$00,$FF,$00,$1F,$FC,$00,$3F,$FF,$FF,$FF,$00,$FF,$80,$3F,$FF,$E0,$1F,$FF,$FF,$FF
 $DCE0 DEFB $FC,$FF,$FF,$FF,$FF,$FC,$07,$FF,$FF,$9F,$FF,$FF,$FC,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$FF,$FF,$FF,$FF,$F8,$1F,$FF,$FF,$FF,$FF,$E7

; Graphics: Pub Scene
;
; #UDGTABLE
; { =h Pub Scene }
; { #SCR$02,$00,$00,$20,$18,$DD00,$F500(pub-scene) }
; UDGTABLE#
@label=PubScene
b$DD00 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$40,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7E ; {Pixels.
 $DD20 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$0D,$FD,$02,$05,$02,$AA,$00,$0B,$FA,$01,$41,$83,$01,$6A,$C1,$17,$D1,$00,$BF,$E8,$01,$7E ;
 $DD40 DEFB $88,$88,$88,$89,$7F,$FF,$FF,$FF,$FF,$A1,$0D,$FD,$02,$05,$02,$FA,$00,$0B,$FA,$01,$41,$C7,$01,$24,$81,$10,$11,$00,$A0,$28,$01,$7E ;
 $DD60 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$03,$F1,$00,$F1,$01,$51,$00,$00,$E0,$01,$41,$10,$01,$04,$01,$01,$01,$00,$07,$00,$01,$7E ;
 $DD80 DEFB $88,$88,$88,$89,$7F,$FF,$FF,$FF,$FF,$A1,$00,$01,$00,$61,$00,$21,$00,$01,$40,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7E ;
 $DDA0 DEFB $01,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$06,$01,$31,$03,$00,$1E,$03,$01,$30,$01,$41,$20,$51,$20,$51,$20,$51,$20,$51,$40,$A1,$7E ;
 $DDC0 DEFB $01,$88,$88,$B0,$04,$FF,$FF,$FF,$FF,$BF,$FF,$FF,$FF,$FF,$FE,$BF,$5F,$FF,$FF,$FF,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$7E ;
 $DDE0 DEFB $01,$88,$88,$A0,$02,$00,$00,$00,$00,$A0,$21,$02,$10,$21,$05,$FF,$E8,$04,$21,$09,$40,$1C,$0E,$FF,$F8,$70,$07,$00,$70,$07,$01,$7E ;
 $DE00 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$07,$F9,$01,$F9,$00,$01,$00,$00,$00,$01,$41,$FF,$01,$1F,$01,$0F,$E1,$00,$01,$00,$01,$7E ;
 $DE20 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0C,$05,$02,$55,$02,$8A,$00,$0B,$1A,$01,$41,$83,$01,$6A,$C1,$10,$11,$00,$A0,$28,$01,$7E ;
 $DE40 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0D,$FD,$03,$FD,$02,$72,$00,$09,$F2,$01,$40,$EE,$01,$31,$81,$17,$D1,$00,$BF,$E8,$01,$7E ;
 $DE60 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$01,$E1,$00,$F1,$01,$21,$00,$00,$E0,$01,$40,$BA,$01,$0E,$01,$03,$81,$00,$37,$60,$01,$7E ;
 $DE80 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$01,$C1,$00,$01,$00,$01,$00,$01,$00,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7E ;
 $DEA0 DEFB $01,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$06,$01,$31,$03,$00,$21,$03,$01,$30,$01,$41,$20,$49,$20,$49,$20,$49,$20,$49,$40,$91,$7E ;
 $DEC0 DEFB $01,$55,$55,$60,$02,$00,$00,$00,$00,$A0,$00,$00,$00,$00,$00,$B5,$40,$00,$00,$01,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$7E ;
 $DEE0 DEFB $01,$55,$55,$50,$04,$00,$00,$00,$00,$A0,$21,$02,$10,$21,$0D,$F3,$EC,$04,$21,$09,$40,$1C,$0E,$E1,$F8,$70,$07,$00,$70,$07,$01,$7E ;
 $DF00 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$0F,$FD,$03,$FD,$00,$01,$00,$07,$FC,$01,$41,$FF,$01,$3F,$81,$1F,$F1,$00,$01,$00,$01,$46 ;
 $DF20 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$0C,$05,$02,$05,$02,$AA,$00,$0B,$FA,$01,$41,$BB,$01,$6A,$C1,$10,$11,$00,$AA,$A8,$01,$46 ;
 $DF40 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$0C,$05,$01,$F9,$03,$06,$00,$04,$E4,$01,$41,$7C,$01,$1F,$01,$18,$31,$00,$80,$08,$01,$46 ;
 $DF60 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$01,$E1,$00,$F1,$01,$71,$00,$00,$E0,$01,$41,$10,$01,$6E,$C1,$37,$D9,$00,$07,$00,$01,$46 ;
 $DF80 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$46 ;
 $DFA0 DEFB $11,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$09,$01,$49,$04,$80,$4C,$84,$81,$48,$01,$41,$20,$49,$20,$49,$20,$49,$20,$49,$40,$91,$46 ;
 $DFC0 DEFB $01,$22,$22,$40,$01,$00,$00,$00,$00,$A0,$00,$00,$00,$00,$00,$B3,$40,$00,$00,$01,$40,$3E,$1F,$07,$C0,$F8,$0F,$80,$F8,$0F,$81,$46 ;
 $DFE0 DEFB $01,$22,$22,$30,$04,$00,$00,$00,$00,$A0,$21,$02,$10,$21,$1D,$ED,$EE,$04,$21,$08,$00,$3E,$1E,$9A,$FC,$F8,$0F,$80,$F8,$0F,$81,$46 ;
 $E000 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0F,$FD,$03,$FD,$01,$FD,$00,$08,$02,$01,$41,$83,$01,$71,$C1,$18,$31,$00,$01,$00,$01,$40 ;
 $E020 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0C,$FD,$02,$F5,$02,$8A,$00,$0A,$0A,$01,$41,$83,$01,$6A,$C1,$10,$11,$00,$A0,$28,$01,$40 ;
 $E040 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0F,$FD,$01,$F9,$03,$FE,$00,$04,$44,$01,$41,$7C,$01,$1F,$01,$1F,$F1,$00,$4F,$90,$01,$40 ;
 $E060 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$00,$C1,$00,$01,$00,$71,$00,$00,$00,$01,$41,$00,$01,$00,$01,$03,$81,$00,$00,$00,$01,$40 ;
 $E080 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$40 ;
 $E0A0 DEFB $01,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$10,$81,$85,$08,$40,$9E,$48,$40,$84,$01,$41,$20,$69,$20,$69,$20,$69,$20,$69,$40,$D1,$40 ;
 $E0C0 DEFB $11,$55,$55,$40,$01,$00,$00,$00,$00,$A0,$00,$00,$00,$00,$00,$9E,$40,$00,$00,$01,$40,$1C,$0E,$03,$80,$70,$07,$00,$70,$07,$01,$40 ;
 $E0E0 DEFB $01,$55,$55,$58,$08,$00,$00,$00,$00,$A0,$21,$02,$10,$21,$1D,$ED,$EE,$04,$21,$03,$C0,$3E,$1E,$7F,$7C,$F8,$0F,$80,$F8,$0F,$81,$40 ;
 $E100 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$0F,$FD,$02,$05,$03,$FE,$00,$0B,$1A,$01,$41,$BB,$01,$64,$C1,$10,$11,$00,$01,$00,$01,$6F ;
 $E120 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$0C,$05,$02,$05,$02,$8A,$00,$0B,$FA,$01,$41,$BB,$01,$6A,$C1,$17,$D1,$00,$BF,$E8,$01,$6F ;
 $E140 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$0F,$FD,$01,$F9,$01,$FD,$00,$02,$08,$01,$41,$38,$01,$1F,$01,$0F,$E1,$00,$25,$20,$01,$6F ;
 $E160 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$00,$01,$02,$65,$03,$76,$00,$06,$EC,$01,$41,$10,$01,$04,$01,$01,$01,$00,$07,$00,$01,$6F ;
 $E180 DEFB $88,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$6F ;
 $E1A0 DEFB $01,$88,$88,$89,$40,$00,$00,$00,$00,$A1,$10,$81,$85,$08,$40,$BF,$48,$40,$84,$01,$41,$20,$51,$20,$51,$20,$51,$20,$51,$40,$A1,$6F ;
 $E1C0 DEFB $01,$88,$88,$C0,$01,$00,$00,$00,$00,$A0,$7F,$87,$F8,$7F,$8D,$8C,$6F,$0F,$F3,$FD,$40,$08,$04,$21,$00,$20,$02,$00,$20,$02,$01,$6F ;
 $E1E0 DEFB $01,$FF,$FF,$FC,$18,$3F,$FF,$FF,$FF,$BF,$FF,$FF,$FF,$FF,$1D,$ED,$EE,$7F,$FF,$CE,$EF,$FF,$FE,$1B,$BD,$FF,$FF,$FF,$FF,$FF,$FF,$7F ;
 $E200 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0C,$05,$02,$F5,$02,$02,$00,$0B,$FA,$01,$41,$83,$01,$6A,$C1,$13,$91,$00,$00,$00,$01,$6F ;
 $E220 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$0C,$05,$02,$F5,$02,$AA,$00,$0A,$0A,$01,$41,$BB,$01,$6A,$C1,$10,$11,$00,$A5,$28,$01,$6F ;
 $E240 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$07,$F9,$01,$F9,$00,$F9,$00,$02,$E8,$01,$41,$38,$01,$0E,$01,$07,$C1,$00,$12,$40,$01,$6F ;
 $E260 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$00,$C1,$03,$6D,$03,$76,$00,$00,$00,$01,$41,$00,$01,$00,$01,$00,$01,$00,$00,$00,$01,$6F ;
 $E280 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$41,$1F,$81,$1F,$81,$1F,$81,$1F,$81,$3F,$01,$6F ;
 $E2A0 DEFB $01,$55,$55,$55,$40,$00,$00,$00,$00,$A1,$10,$81,$85,$08,$40,$AD,$48,$40,$84,$01,$41,$10,$81,$10,$81,$10,$81,$10,$81,$21,$01,$6F ;
 $E2C0 DEFB $01,$55,$55,$40,$01,$00,$00,$00,$00,$A0,$12,$01,$20,$12,$01,$33,$24,$02,$40,$91,$40,$1C,$0E,$1F,$C0,$70,$07,$00,$70,$07,$01,$6F ;
 $E2E0 DEFB $01,$01,$00,$33,$E6,$00,$80,$00,$00,$40,$00,$00,$00,$00,$3D,$ED,$EF,$00,$00,$19,$E0,$00,$00,$29,$BC,$00,$00,$00,$00,$00,$00,$00 ;
 $E300 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$0C,$3D,$02,$05,$02,$FA,$00,$0B,$FA,$01,$41,$83,$01,$6A,$C1,$10,$11,$00,$7F,$F0,$01,$60 ;
 $E320 DEFB $22,$22,$22,$23,$7F,$FF,$FF,$FF,$FF,$A1,$0C,$7D,$02,$F5,$02,$8A,$00,$0A,$0A,$01,$41,$83,$01,$6A,$C1,$17,$D1,$00,$A0,$28,$01,$60 ;
 $E340 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$06,$D9,$00,$F1,$01,$71,$00,$01,$10,$01,$41,$38,$01,$0E,$01,$03,$81,$00,$08,$80,$01,$60 ;
 $E360 DEFB $22,$22,$22,$23,$7F,$FF,$FF,$FF,$FF,$A1,$06,$D9,$02,$65,$00,$01,$00,$01,$40,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$60 ;
 $E380 DEFB $22,$22,$22,$23,$40,$00,$00,$00,$00,$A1,$19,$80,$CC,$0C,$C0,$CD,$0C,$C0,$CC,$01,$41,$10,$81,$10,$81,$10,$81,$10,$81,$21,$01,$60 ;
 $E3A0 DEFB $01,$22,$22,$23,$E7,$FF,$FF,$FF,$FF,$BF,$FF,$FF,$FF,$FF,$FE,$BF,$5F,$FF,$FF,$FF,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$60 ;
 $E3C0 DEFB $01,$22,$22,$40,$01,$00,$00,$00,$00,$A0,$0C,$00,$C0,$0C,$01,$7F,$A0,$01,$80,$61,$40,$3E,$1F,$3F,$E0,$F8,$0F,$80,$F8,$0F,$81,$60 ;
 $E3E0 DEFB $01,$FD,$78,$CC,$19,$8E,$BF,$FF,$D7,$FF,$FD,$7F,$FF,$D7,$3C,$E1,$CF,$7F,$FD,$57,$77,$EB,$FF,$5F,$BD,$FD,$7F,$FF,$AF,$FF,$FA,$FF ;
 $E400 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$BF,$EC,$05,$FA,$F5,$FA,$8A,$FF,$EA,$AA,$FF,$7D,$BB,$7F,$6A,$DF,$D0,$17,$FE,$80,$0B,$FF,$40 ;
 $E420 DEFB $55,$55,$55,$55,$80,$00,$00,$00,$00,$61,$0C,$05,$02,$05,$02,$8A,$00,$0B,$FA,$01,$41,$83,$01,$6A,$C1,$17,$D1,$00,$AF,$A8,$01,$40 ;
 $E440 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$BF,$FA,$17,$FE,$F7,$FF,$77,$FF,$FD,$17,$FF,$7F,$BB,$FF,$EE,$FF,$FB,$BF,$FF,$F7,$7F,$FF,$40 ;
 $E460 DEFB $55,$55,$55,$55,$80,$00,$00,$00,$00,$61,$01,$E1,$00,$F1,$00,$21,$00,$01,$40,$01,$41,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$40 ;
 $E480 DEFB $55,$55,$55,$55,$40,$00,$00,$00,$00,$BF,$DF,$BE,$FD,$EF,$DE,$E1,$EF,$DE,$FD,$FF,$7F,$A0,$6F,$A0,$6F,$A0,$6F,$A0,$6F,$40,$DF,$40 ;
 $E4A0 DEFB $01,$55,$55,$5C,$18,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$B3,$40,$00,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0 ;
 $E4C0 DEFB $01,$55,$55,$20,$02,$00,$00,$00,$00,$A0,$12,$01,$20,$12,$03,$FF,$F0,$02,$40,$91,$40,$3E,$1E,$7F,$F0,$F8,$0F,$80,$F8,$0F,$81,$40 ;
 $E4E0 DEFB $11,$05,$47,$03,$E0,$72,$A0,$00,$54,$00,$05,$40,$00,$54,$3C,$0C,$07,$00,$05,$58,$F0,$2A,$00,$3F,$7C,$05,$40,$00,$A8,$00,$0A,$80 ;
 $E500 DEFB $01,$05,$58,$00,$00,$0C,$A0,$00,$54,$00,$05,$40,$00,$54,$3C,$30,$07,$00,$05,$55,$F8,$2A,$00,$77,$7C,$05,$40,$00,$A8,$00,$0A,$80 ;
 $E520 DEFB $01,$08,$01,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$F0,$A8,$00,$34,$00,$00,$00,$00,$00,$00 ;
 $E540 DEFB $01,$FF,$A6,$60,$00,$0D,$7F,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FA,$00,$00,$00,$00,$02,$BF,$FF,$FF,$FF,$FF,$FF ;
 $E560 DEFB $00,$00,$48,$00,$00,$05,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$50,$01,$9F,$E0,$20,$00,$00,$00,$00,$00 ;
 $E580 DEFB $FF,$FF,$A4,$C0,$01,$92,$B8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$01,$83,$9F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E5A0 DEFB $FF,$FF,$E8,$A1,$A1,$4A,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D0,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E5C0 DEFB $FF,$FF,$F4,$A1,$21,$5A,$30,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E5E0 DEFB $00,$00,$01,$40,$A0,$A3,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$80,$04,$00,$50,$00,$00,$00,$00,$00,$00 ;
 $E600 DEFB $01,$05,$20,$00,$00,$02,$A0,$00,$54,$00,$05,$40,$00,$54,$3C,$FC,$07,$00,$05,$4B,$78,$2A,$00,$6B,$B8,$05,$40,$00,$A8,$00,$0A,$80 ;
 $E620 DEFB $01,$E8,$03,$00,$00,$20,$0B,$FF,$FF,$FF,$9F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$DF,$DF,$23,$00,$22,$2B,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E640 DEFB $01,$00,$29,$80,$00,$35,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$2F,$E2,$22,$22,$62,$80,$00,$00,$00,$00,$00 ;
 $E660 DEFB $FF,$FF,$48,$00,$00,$05,$F8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$22,$7F,$97,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E680 DEFB $FF,$FF,$D4,$30,$06,$12,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$22,$7E,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E6A0 DEFB $FF,$FF,$F4,$A1,$A1,$4A,$18,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D0,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E6C0 DEFB $FF,$FF,$F4,$A1,$E1,$2A,$10,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E6E0 DEFB $FF,$FF,$FD,$5E,$AE,$AE,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$80,$0A,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E700 DEFB $01,$05,$40,$00,$00,$01,$20,$00,$54,$00,$05,$40,$00,$54,$3B,$F2,$1F,$00,$05,$40,$7C,$2A,$00,$1F,$A8,$05,$40,$00,$A8,$00,$0A,$80 ;
 $E720 DEFB $11,$D0,$06,$00,$00,$20,$05,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$F7,$76,$20,$77,$7A,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E740 DEFB $01,$FF,$D4,$00,$00,$CE,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$F8,$37,$77,$77,$76,$BF,$FF,$FF,$FF,$FF,$FF ;
 $E760 DEFB $FF,$FF,$48,$00,$00,$05,$F8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$57,$7D,$FE,$57,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E780 DEFB $FF,$FF,$D2,$0F,$F8,$26,$B8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B7,$77,$77,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E7A0 DEFB $FF,$FF,$F4,$A1,$A1,$4A,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D0,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E7C0 DEFB $FF,$FF,$F5,$26,$18,$AA,$20,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E7E0 DEFB $00,$00,$01,$40,$40,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0A,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $E800 DEFB $01,$FC,$80,$00,$00,$00,$BF,$FF,$D7,$FF,$FD,$7F,$FF,$D7,$37,$ED,$EF,$7F,$FD,$7F,$BD,$EB,$FF,$87,$6F,$FD,$7F,$FF,$AF,$FF,$FA,$FF ;
 $E820 DEFB $01,$D0,$0C,$00,$00,$18,$05,$FF,$FF,$FE,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$E2,$20,$40,$22,$25,$7F,$FF,$FF,$FF,$FF,$FF ;
 $E840 DEFB $01,$FF,$D4,$00,$03,$12,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$07,$A2,$22,$22,$A3,$5F,$FF,$FF,$FF,$FF,$FF ;
 $E860 DEFB $FF,$FF,$48,$00,$00,$09,$78,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$2B,$FD,$2F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E880 DEFB $FF,$FF,$D1,$00,$00,$46,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$22,$22,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E8A0 DEFB $FF,$FF,$F4,$A0,$C1,$5A,$18,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E8C0 DEFB $FF,$FF,$FB,$58,$C6,$B2,$20,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E8E0 DEFB $00,$00,$01,$40,$00,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0A,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $E900 DEFB $01,$01,$00,$00,$00,$00,$40,$00,$10,$00,$01,$00,$00,$10,$3F,$CC,$0F,$00,$01,$00,$3E,$08,$00,$2E,$D4,$01,$00,$00,$20,$00,$02,$00 ;
 $E920 DEFB $01,$D0,$1C,$00,$00,$1C,$05,$FF,$FF,$FC,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EF,$C0,$00,$90,$80,$05,$7F,$FF,$FF,$FF,$FF,$FF ;
 $E940 DEFB $11,$FF,$D2,$00,$00,$22,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$A0,$00,$00,$C1,$5F,$FF,$FF,$FF,$FF,$FF ;
 $E960 DEFB $FF,$FF,$48,$00,$00,$09,$B8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$0B,$55,$AF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E980 DEFB $FF,$FF,$D0,$C0,$00,$86,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4F,$FF,$FF,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E9A0 DEFB $FF,$FF,$FA,$A0,$C1,$5A,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E9C0 DEFB $FF,$FF,$FD,$63,$31,$AA,$40,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $E9E0 DEFB $00,$00,$01,$40,$00,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0A,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EA00 DEFB $01,$FA,$00,$00,$00,$00,$2F,$FF,$D7,$FF,$FD,$7F,$FF,$D7,$BF,$0C,$0F,$7F,$FD,$7F,$BF,$6B,$FF,$9D,$8C,$FD,$7F,$FF,$AF,$FF,$FA,$FF ;
 $EA20 DEFB $01,$EC,$38,$F0,$00,$0E,$1B,$FF,$FF,$F9,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F7,$A2,$20,$2A,$22,$25,$7F,$FF,$FF,$FF,$FF,$FF ;
 $EA40 DEFB $01,$FF,$D2,$00,$00,$43,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$A2,$22,$25,$E3,$5F,$FF,$FF,$FF,$FF,$FF ;
 $EA60 DEFB $FF,$FF,$A4,$00,$00,$11,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$25,$56,$EF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EA80 DEFB $FF,$FF,$E8,$B0,$07,$46,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$22,$FE,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EAA0 DEFB $FF,$FF,$FD,$A1,$E1,$7A,$18,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EAC0 DEFB $FF,$FF,$FD,$4E,$AC,$AA,$40,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$04,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EAE0 DEFB $00,$00,$01,$40,$00,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0A,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EB00 DEFB $01,$04,$00,$00,$00,$00,$10,$00,$54,$00,$05,$40,$00,$54,$3C,$0C,$0F,$00,$05,$40,$3F,$2A,$00,$9B,$0F,$05,$40,$00,$A8,$00,$0A,$80 ;
 $EB20 DEFB $01,$F3,$FF,$00,$00,$0F,$E7,$FF,$FF,$F3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F7,$F7,$73,$77,$76,$36,$BF,$FF,$FF,$FF,$FF,$FF ;
 $EB40 DEFB $01,$FF,$D0,$00,$00,$05,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$B7,$77,$73,$F7,$5F,$FF,$FF,$FF,$FF,$FF ;
 $EB60 DEFB $FF,$FF,$A2,$00,$00,$22,$B8,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B7,$75,$AB,$4F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EB80 DEFB $FF,$FF,$E8,$AF,$F9,$4A,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EBA0 DEFB $FF,$FF,$FD,$BE,$1F,$7A,$38,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EBC0 DEFB $FF,$FF,$FD,$7E,$AF,$AA,$80,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$04,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EBE0 DEFB $00,$00,$01,$40,$00,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$0A,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EC00 DEFB $01,$04,$00,$00,$00,$00,$10,$00,$54,$00,$05,$40,$00,$54,$38,$0C,$1E,$00,$05,$40,$1F,$2A,$0F,$26,$12,$C5,$40,$00,$A8,$00,$0A,$80 ;
 $EC20 DEFB $01,$FC,$28,$00,$00,$F7,$1F,$FF,$FF,$E7,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F7,$22,$02,$22,$22,$22,$BF,$FF,$FF,$FF,$FF,$FF ;
 $EC40 DEFB $FF,$FF,$A8,$00,$00,$06,$FF,$FF,$FF,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$D2,$22,$27,$FA,$5F,$FF,$FF,$FF,$FF,$FF ;
 $EC60 DEFB $FF,$FF,$A5,$00,$00,$53,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A2,$22,$54,$CF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EC80 DEFB $FF,$FF,$E8,$A3,$91,$4A,$58,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$00,$FF,$BF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $ECA0 DEFB $FF,$FF,$FA,$A1,$21,$7A,$18,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $ECC0 DEFB $FF,$FF,$FD,$5E,$AE,$AA,$80,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$04,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF ;
 $ECE0 DEFB $00,$00,$00,$80,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$09,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $ED00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $ED20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $ED40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $ED60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FC,$0F,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $ED80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EE00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EE20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EE40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$E0,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $EE60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$F0,$1F,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $EE80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EEA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $EEC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EEE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EF00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $EF20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$21,$00,$80,$00,$00,$00,$00,$00,$00 ;
 $EF40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$60,$B0,$40,$00,$00,$00,$00,$00,$00 ;
 $EF60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C0,$1F,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $EF80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EFA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EFC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $EFE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $F020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $F040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$DE,$80,$00,$00,$00,$00,$00,$00 ;
 $F060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $F080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $F120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $F140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$80,$21,$80,$00,$00,$00,$00,$00,$00 ;
 $F160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $F180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $F220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $F240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$00,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $F260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $F320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $F340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$01,$FF,$00,$00,$00,$00,$00,$00,$00 ;
 $F360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$11,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $F420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$20,$80,$40,$00,$00,$00,$00,$00,$00 ;
 $F440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FC,$03,$FF,$80,$00,$00,$00,$00,$00,$00 ;
 $F460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F480 DEFB $00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F4A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F4C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $F4E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $F500 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$42,$42,$44,$44,$44,$44,$07,$43,$43,$07,$07,$45,$06,$06,$06,$47,$47,$07,$42,$42,$07,$57 ; {Attributes.
 $F520 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$42,$42,$44,$44,$44,$44,$07,$43,$43,$07,$07,$45,$06,$06,$06,$47,$47,$07,$42,$42,$07,$57 ;
 $F540 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$42,$42,$44,$44,$44,$44,$07,$43,$43,$07,$07,$45,$06,$06,$06,$47,$47,$07,$42,$42,$07,$57 ;
 $F560 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$07,$47,$47,$07,$07,$47,$47,$47,$47,$47,$47,$07,$47,$47,$07,$57 ;
 $F580 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$07,$47,$47,$07,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$57 ;
 $F5A0 DEFB $0E,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$56,$47,$47,$47,$47,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$57 ;
 $F5C0 DEFB $0E,$47,$47,$06,$06,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$56,$06,$47,$47,$47,$07,$06,$46,$46,$46,$06,$06,$06,$06,$06,$06,$57 ;
 $F5E0 DEFB $0E,$47,$47,$06,$06,$06,$47,$47,$47,$47,$47,$47,$47,$47,$46,$56,$56,$47,$47,$06,$06,$06,$46,$46,$46,$06,$06,$06,$06,$06,$06,$57 ;
 $F600 DEFB $0E,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$56,$56,$56,$06,$06,$06,$06,$06,$46,$46,$46,$06,$06,$06,$06,$06,$06,$06 ;
 $F620 DEFB $0E,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$43,$43,$43,$43,$43,$06,$06,$06,$06,$06,$06 ;
 $F640 DEFB $0E,$46,$06,$06,$06,$06,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$43,$43,$43,$06,$46,$46,$46,$46,$46,$46 ;
 $F660 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$43,$43,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $F680 DEFB $06,$06,$06,$06,$06,$06,$06,$01,$06,$06,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$43,$43,$43,$06,$06,$06,$06,$06,$06,$06 ;
 $F6A0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $F6C0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$47,$06,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $F6E0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$47,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $F700 DEFB $07,$07,$06,$06,$06,$06,$07,$07,$07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$06,$06,$06,$06,$06,$01,$01,$01,$01,$01,$01 ;
 $F720 DEFB $07,$07,$06,$07,$07,$07,$07,$07,$07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$06,$06,$06,$06,$01,$01,$01,$01,$01,$01 ;
 $F740 DEFB $07,$07,$06,$06,$06,$07,$07,$07,$07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$07,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$01,$01,$01 ;
 $F760 DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$41,$41,$47,$47,$47,$47,$47,$47,$47,$47,$01,$01,$01,$01 ;
 $F780 DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $F7A0 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06 ;
 $F7C0 DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $F7E0 DEFB $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01 ; }

; Data block at F800
b$F800 DEFB $00,$00,$00,$00,$00,$00,$00
 $F807 DEFB $00,$00,$00

; Buffer Pointer
@label=Buffer_Pointer
g$F80A DEFW $0000

; Print Variables
@label=PrintVariable_01
g$F80C DEFB $00
@label=PrintVariable_02
 $F80D DEFB $00

; Data block at F80E
b$F80E DEFB $00,$00,$00,$00,$00,$00

; Buffer Control Code
@label=Buffer_ControlCode
g$F814 DEFB $00

; Buffer Counter
@label=Buffer_Counter
g$F815 DEFB $00

; Game status buffer entry at F816
g$F816 DEFB $00
 $F817 DEFB $00

; Game status buffer entry at F818
g$F818 DEFB $00
 $F819 DEFB $00

; Font Pointer
@label=Font_Pointer
g$F81A DEFW $0000

; Print: Attribute Buffer Pointer
;
; Pointer to the attribute buffer location of where the characters will
; be printed.
@label=PrintAttributeBuffer_Pointer
g$F81C DEFW $0000

; Print: Attribute Variable
;
; Helper variable for printing routines.
; .
; Holds an attribute value to copy for #R$97D5.
@label=Print_AttributeVariable
g$F81E DEFB $00

; Unused
u$F81F DEFW $0000

; Control Byte?
@label=ControlByte
g$F821 DEFB $00

; Game status buffer entry at F822
g$F822 DEFB $00,$00,$00,$00,$00

; Initial Stack Pointer
;
; Holds the initial value of the stack pointer.
; This is set in #R$9183 and restored only at #R$95BE.
@label=Initial_StackPointer
g$F827 DEFW $5FE6

; Data block at F829
b$F829 DEFB $00,$00

; Print: Screen Buffer Pointer
;
; Pointer to the screen buffer location of where the characters will be
; printed.
@label=PrintScreenBuffer_Pointer
g$F82B DEFW $0000

; Data block at F82D
b$F82D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F835 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F83D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F845 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F84D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F855 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F85D DEFB $00,$00,$00,$00,$00,$00,$00
 $F864 DEFB $00
 $F865 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F86D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F875 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F87D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F885 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F88D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F895 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F89D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8A5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8AD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8B5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8BD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8C5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8CD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8D5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8DD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8ED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8F5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8FD DEFB $00,$00,$00

; Data block at F900
w$F900 DEFW $4000
 $F902 DEFW $4200
 $F904 DEFW $4400
 $F906 DEFW $4600
 $F908 DEFW $4020
 $F90A DEFW $4220
 $F90C DEFW $4420
 $F90E DEFW $4620
 $F910 DEFW $4040
 $F912 DEFW $4240
 $F914 DEFW $4440
 $F916 DEFW $4640
 $F918 DEFW $4060
 $F91A DEFW $4260
 $F91C DEFW $4460
 $F91E DEFW $4660
 $F920 DEFW $4080
 $F922 DEFW $4280
 $F924 DEFW $4480
 $F926 DEFW $4680
 $F928 DEFW $40A0
 $F92A DEFW $42A0
 $F92C DEFW $44A0
 $F92E DEFW $46A0
 $F930 DEFW $40C0
 $F932 DEFW $42C0
 $F934 DEFW $44C0
 $F936 DEFW $46C0
 $F938 DEFW $40E0
 $F93A DEFW $42E0
 $F93C DEFW $44E0
 $F93E DEFW $46E0
 $F940 DEFW $4800
 $F942 DEFW $4A00
 $F944 DEFW $4C00
 $F946 DEFW $4E00
 $F948 DEFW $4820
 $F94A DEFW $4A20
 $F94C DEFW $4C20
 $F94E DEFW $4E20
 $F950 DEFW $4840
 $F952 DEFW $4A40
 $F954 DEFW $4C40
 $F956 DEFW $4E40
 $F958 DEFW $4860
 $F95A DEFW $4A60
 $F95C DEFW $4C60
 $F95E DEFW $4E60
 $F960 DEFW $4880
 $F962 DEFW $4A80
 $F964 DEFW $4C80
 $F966 DEFW $4E80
 $F968 DEFW $48A0
 $F96A DEFW $4AA0
 $F96C DEFW $4CA0
 $F96E DEFW $4EA0
 $F970 DEFW $48C0
 $F972 DEFW $4AC0
 $F974 DEFW $4CC0
 $F976 DEFW $4EC0
 $F978 DEFW $48E0
 $F97A DEFW $4AE0
 $F97C DEFW $4CE0
 $F97E DEFW $4EE0
 $F980 DEFW $5000
 $F982 DEFW $5200
 $F984 DEFW $5400
 $F986 DEFW $5600
 $F988 DEFW $5020
 $F98A DEFW $5220
 $F98C DEFW $5420
 $F98E DEFW $5620
 $F990 DEFW $5040
 $F992 DEFW $5240
 $F994 DEFW $5440
 $F996 DEFW $5640
 $F998 DEFW $5060
 $F99A DEFW $5260
 $F99C DEFW $5460
 $F99E DEFW $5660
 $F9A0 DEFW $5080
 $F9A2 DEFW $5280
 $F9A4 DEFW $5480
 $F9A6 DEFW $5680
 $F9A8 DEFW $50A0
 $F9AA DEFW $52A0
 $F9AC DEFW $54A0
 $F9AE DEFW $56A0
 $F9B0 DEFW $50C0
 $F9B2 DEFW $52C0
 $F9B4 DEFW $54C0
 $F9B6 DEFW $56C0
 $F9B8 DEFW $50E0
 $F9BA DEFW $52E0
 $F9BC DEFW $54E0
 $F9BE DEFW $56E0
 $F9C0 DEFW $5800
 $F9C2 DEFW $5A00
 $F9C4 DEFW $5C00
 $F9C6 DEFW $5E00
 $F9C8 DEFW $5820
 $F9CA DEFW $5A20
 $F9CC DEFW $5C20
 $F9CE DEFW $5E20
 $F9D0 DEFW $5840
 $F9D2 DEFW $5A40
 $F9D4 DEFW $5C40
 $F9D6 DEFW $5E40
 $F9D8 DEFW $5860
 $F9DA DEFW $5A60
 $F9DC DEFW $5C60
 $F9DE DEFW $5E60
 $F9E0 DEFW $5880
 $F9E2 DEFW $5A80
 $F9E4 DEFW $5C80
 $F9E6 DEFW $5E80
 $F9E8 DEFW $58A0
 $F9EA DEFW $5AA0
 $F9EC DEFW $5CA0
 $F9EE DEFW $5EA0
 $F9F0 DEFW $58C0
 $F9F2 DEFW $5AC0
 $F9F4 DEFW $5CC0
 $F9F6 DEFW $5EC0
 $F9F8 DEFW $58E0
 $F9FA DEFW $5AE0
 $F9FC DEFW $5CE0
 $F9FE DEFW $5EE0

; Data block at FA00
b$FA00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FD98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FDF8 DEFB $00,$00,$00,$00,$00

; Alias: Interrupt Jump Dispatcher
;
; All generated interrupts jump here and then are redirected to #R$95ED.
@label=AliasInterruptRedirect
c$FDFD JP $95ED      ; Jump to #R$95ED.

; Interrupt Low-Order Byte Jump Table
;
; Used as the low-order byte when an interrupt is generated.
; The high-order byte is also #N$FD, meaning all interrupts jump to #R$FDFD.
; .
; See #R$95D2 and #R$FDFD.
@label=InterruptLowOrderByteJumpTable
b$FE00 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE08 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE10 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE18 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE20 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE28 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE30 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE38 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE40 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE48 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE50 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE58 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE60 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE68 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE70 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE78 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE80 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE88 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE90 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FE98 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEA0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEA8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEB0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEB8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEC0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEC8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FED0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FED8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEE0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEE8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEF0 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FEF8 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $FF00 DEFB $FD

; Data block at FF01
b$FF01 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF09 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF11 DEFB $00,$00,$00,$00,$00,$00,$00,$F3
 $FF19 DEFB $0D,$CE,$0B,$E2,$50,$CE,$0B,$E3
 $FF21 DEFB $50,$1E,$17,$DC,$0A,$CE,$0B,$E4
 $FF29 DEFB $50,$1D,$17,$03,$1A,$FF,$FF,$FF
 $FF31 DEFB $FF,$FF,$FF,$FF,$FF,$DB,$02,$4D
 $FF39 DEFB $00,$BC,$47,$44,$00,$BB,$47,$8C
 $FF41 DEFB $18,$5C,$0E,$00,$47,$C0,$57,$71
 $FF49 DEFB $0E,$F3,$0D,$21,$17,$C6,$1E,$FF
 $FF51 DEFB $D4,$76,$1B,$03,$13,$00,$3E

; Mystery Font
@label=MysteryFont
b$FF58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00 ; #UDG(#PC,attr=$46)
 $FF60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00 ; #UDG(#PC,attr=$46)
 $FF68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00 ; #UDG(#PC,attr=$46)
 $FF70 DEFB $00,$78,$44,$42,$42,$44,$78,$00 ; #UDG(#PC,attr=$46)
 $FF78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00 ; #UDG(#PC,attr=$46)
 $FF80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00 ; #UDG(#PC,attr=$46)
 $FF88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00 ; #UDG(#PC,attr=$46)
 $FF90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00 ; #UDG(#PC,attr=$46)
 $FF98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00 ; #UDG(#PC,attr=$46)
 $FFA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00 ; #UDG(#PC,attr=$46)
 $FFA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00 ; #UDG(#PC,attr=$46)
 $FFB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00 ; #UDG(#PC,attr=$46)
 $FFB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00 ; #UDG(#PC,attr=$46)
 $FFC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00 ; #UDG(#PC,attr=$46)
 $FFC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00 ; #UDG(#PC,attr=$46)
 $FFD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00 ; #UDG(#PC,attr=$46)
 $FFD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00 ; #UDG(#PC,attr=$46)
 $FFE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00 ; #UDG(#PC,attr=$46)
 $FFE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00 ; #UDG(#PC,attr=$46)
 $FFF0 DEFB $00,$FE,$10,$10,$10,$10,$10,$00 ; #UDG(#PC,attr=$46)
 $FFF8 DEFB $00,$42,$42,$42,$42,$42,$3C,$00 ; #UDG(#PC,attr=$46)
